import React, { useState } from 'react';
import ProjectOverviewTab from './ProjectTabs/ProjectOverviewTab';
import ProjectJobsTab from './ProjectTabs/ProjectJobsTab';
import ProjectFinanceTab from './ProjectTabs/ProjectFinanceTab';
import ProjectDocumentsTab from './ProjectTabs/ProjectDocumentsTab';
import ProjectTeamTab from './ProjectTabs/ProjectTeamTab';
import { Link } from 'react-router-dom';

function ProjectOverview() {
  const [activeTab, setActiveTab] = useState('overview');

  const projectData = {
    title: 'Website Redesign Project',
    projectId: 'P00001',
    client: 'Acme Corporation',
    progress: 60,
    daysRemaining: 45,
    dueDate: 'Jan 30, 2025',
    budget: {
      status: '15',
      isUnderBudget: true,
    },
    teamSize: 8,
    jobList: [
      { phase: 'Design Phase', status: 'Complete', type: 'UI/UX Design' },
      { phase: 'Development', status: 'In Progress', type: 'Frontend & Backend' },
      { phase: 'Testing', status: 'Pending', type: 'QA & UAT' }
    ],
    recentActivity: [
      { action: 'Design phase completed', time: '2 hours ago' },
      { action: 'New purchase order created', time: 'Yesterday' },
      { action: 'New team member added', time: '2 days ago' }
    ],
    teamMembers: [
      { name: 'Sarah Johnson', role: 'Project Manager' },
      { name: 'Michael Chen', role: 'Lead Developer' },
      { name: 'Emily Wilson', role: 'UI/UX Designer' }
    ],
    purchaseOrders: {
      received: 3,
      issued: 5,
      totalValue: '$35,000'
    }
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return <ProjectOverviewTab projectData={projectData} />;
      case 'jobs':
        return <ProjectJobsTab jobList={projectData.jobList} />;
      case 'finance':
        return <ProjectFinanceTab budget={projectData.budget} purchaseOrders={projectData.purchaseOrders} />;
      case 'documents':
        return <ProjectDocumentsTab />;
      case 'team':
        return <ProjectTeamTab teamMembers={projectData.teamMembers} />;
      default:
        return <ProjectOverviewTab projectData={projectData} />;
    }
  };

  return (
    <div className="container-fluid py-4">
      {/* Project Header */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h4 className="mb-1">{projectData.projectId}-{projectData.title}</h4>
          <div className="text-muted">
           Client: {projectData.client}
          </div>
        </div>
        <div>
          <button className="btn btn-outline-secondary me-2">Import File</button>
         <Link to={"/UpdateProjectLis"}><button id='All_btn' className="btn btn-dark">Edit Project</button></Link>
        </div>
      </div>

      {/* Navigation Tabs */}
      <ul className="nav nav-tabs mb-4">
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
            style={{color:"#0d6efd",borderColor:"#0d6efd"}}
          >
            Overview
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'jobs' ? 'active' : ''}`}
            onClick={() => setActiveTab('jobs')}
            style={{color:"#0d6efd",borderColor:"#0d6efd"}}
          >
            Jobs
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'finance' ? 'active' : ''}`}
            onClick={() => setActiveTab('finance')}
            style={{color:"#0d6efd",borderColor:"#0d6efd"}}
          >
            Finance
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'documents' ? 'active' : ''}`}
            onClick={() => setActiveTab('documents')}
            style={{color:"#0d6efd",borderColor:"#0d6efd"}}
          >
            Documents
          </button>
        </li>
        <li className="nav-item">
          <button 
            className={`nav-link ${activeTab === 'team' ? 'active' : ''}`}
            onClick={() => setActiveTab('team')}
            style={{color:"#0d6efd",borderColor:"#0d6efd"}}
          >
            Team
          </button>
        </li>
      </ul>

      {/* Tab Content */}
      {renderTabContent()}
    </div>
  );
}

export default ProjectOverview;











status: '+$5,000',
      isUnderBudget: true,
      estimated: '$50,000',
      actual: '$45,000'

      import React, { useEffect, useState } from 'react';
      import { Form, Button, Container, Row, Col } from 'react-bootstrap';
      import { useDispatch } from 'react-redux';
      import { useNavigate, useParams } from 'react-router-dom';
      import { createProject } from '../../../redux/slices/ProjectsSlice';
      import { toast } from "react-toastify";
      import "react-toastify/dist/ReactToastify.css";
      
      
      function AddProjectList() {
        const navigate = useNavigate();
        const dispatch = useDispatch()
        const { id } = useParams();
      
        
        const [formData, setFormData] = useState({
          projectName: '',
          clientId: '',
          managerId: '',
          startDate: '',
          endDate: '',
          projectPriority: '',
          description: '',
          status: '',
          projectRequirements: {
            creativeDesign: false,
            artworkAdaptation: false,
            prepress: false,
            POS: false,
            mockups: false,
            rendering: false,
          },
          budgetAmount: '',
          currency: '',
          totalTime: ''
        });
        useEffect(() => {
          if (id) {
            // dispatch(getalltool());
          }
        }, [id, dispatch]);
      
        useEffect(() => {
          if (id && tools.length > 0) {
            const existingEntry = tools.find((entry) => entry._id === id);
            if (existingEntry) {
              setFormData({
                toolID: existingEntry.toolID,
                name: existingEntry.name,
                manufacturer: existingEntry.manufacturer,
                category: existingEntry.category,
                purchaseDate: existingEntry.purchaseDate.split("T")[0],
                condition: existingEntry.condition,
                notes: existingEntry.notes,
                location: existingEntry.location,
              });
            }
          }
        }, [id, tools]);
      
        const handleInputChange = (e) => {
          const { name, value } = e.target;
          setFormData((prev) => ({
            ...prev,
            [name]: value
          }));
        };
      
      
        const handleCheckboxChange = (e) => {
          const { name, checked } = e.target;
          setFormData(prev => ({
            ...prev,
            projectRequirements: {
              ...prev.projectRequirements,
              [name]: checked
            }
          }));
        };
      
      // AddProjectList.js
      const handleSubmit = e => {
        e.preventDefault();
        const payload = {
          ...formData,
          projectRequirements: [formData.projectRequirements]
        };
      
        if (id) {
          dispatch(updatetool({ id, updatedtool: formData }))
            .unwrap()
            .then(() => {
              toast.success("Tool Updated Successfully!");
              navigate("/plantMachinery");
            })
            .catch(() => {
              toast.error("Failed to update Tool!");
            });
        } else {
          dispatch(createProject(payload))
            .unwrap()
            .then(() => {
              toast.success("Tool Added successfully");
              navigate("/plantMachinery");
            })
            .catch(() => {
              toast.error("Error in creating tool");
            });
        }
      
      };
      
        
        
        const handleCancel = () => {
          // navigate(-1);
        };
      
        return (
          <Container className="py-4">
            <div className="form-container p-4 rounded shadow-sm" style={{ backgroundColor: "white", margin: "0 auto" }}>
              <h2 className="mb-4">New Project</h2>
              <Form onSubmit={handleSubmit} >
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Name</Form.Label>
                      <Form.Control
                        type="text"
                        name="projectName"
                        value={formData.projectName}
                        onChange={handleInputChange}
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Client Name</Form.Label>
                      <Form.Select
                        name="clientId"
                        value={formData.clientId}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Client</option>
                        <option value="662fb9cba77b2e0012345679">662fb9cba77b2e0012345679</option>
                        <option value="client2">Client 2</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>
      
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Manager</Form.Label>
                      <Form.Select
                        name="managerId"
                        value={formData.managerId}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Manager</option>
                        <option value="662fb9a2a77b2e0012345678">662fb9a2a77b2e0012345678</option>
                        <option value="manager2">Manager 2</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Start Date</Form.Label>
                      <Form.Control
                        type="date"
                        name="startDate"
                        value={formData.startDate}
                        onChange={handleInputChange}
                        required
                      />
                    </Form.Group>
                  </Col>
                </Row>
      
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Expected Completion Date</Form.Label>
                      <Form.Control
                        type="date"
                        name="endDate"
                        value={formData.endDate}
                        onChange={handleInputChange}
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Priority</Form.Label>
                      <Form.Select
                        name="projectPriority"
                        value={formData.projectPriority}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Priority</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>
      
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Status</Form.Label>
                      <Form.Select
                        name="status"
                        value={formData.status}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Status</option>
                        <option value="not_started">Not Started</option>
                        <option value="in_progress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="on_hold">On Hold</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Total Time Logged</Form.Label>
                      <Form.Control
                        type="time"
                        name="totalTime"
                        value={formData.totalTime}
                        onChange={handleInputChange}
                      />
                    </Form.Group>
                  </Col>
                </Row>
      
                <Form.Group className="mb-3">
                  <Form.Label className="text-muted mb-1">Project Description</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={4}
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                  />
                </Form.Group>
      
                <Form.Group className="mb-3">
                  <Form.Label className="text-muted mb-1">Project Requirements</Form.Label>
                  <div>
                    <Form.Check
                      type="checkbox"
                      label="Creative Design"
                      name="creativeDesign"
                      checked={formData.projectRequirements.creativeDesign}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Artwork Adaptation"
                      name="artworkAdaptation"
                      checked={formData.projectRequirements.artworkAdaptation}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Prepress/File Preparation"
                      name="prepress"
                      checked={formData.projectRequirements.prepress}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="POS"
                      name="POS"
                      checked={formData.projectRequirements.POS}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Mockups"
                      name="mockups"
                      checked={formData.projectRequirements.mockups}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="3D Rendering"
                      name="rendering"
                      checked={formData.projectRequirements.rendering}
                      onChange={handleCheckboxChange}
                    />
                  </div>
                </Form.Group>
      
                <Form.Label className="text-muted mb-1">Budget Information</Form.Label>
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Control
                        type="number"
                        placeholder="Budget Amount"
                        name="budgetAmount"
                        value={formData.budgetAmount}
                        onChange={handleInputChange}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Select
                        name="currency"
                        value={formData.currency}
                        onChange={handleInputChange}
                      >
                        <option value="">Select Currency</option>
                        <option value="AED">AED</option>
                        <option value="EUR">EUR</option>
                        <option value="GBP">GBP</option>
                        <option value="INR">INR</option>
                        <option value="SAR">SAR</option>
                        <option value="USD">USD</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>
      
                <div className="d-flex justify-content-end gap-2 mt-4">
                  <Button variant="secondary" className="px-4" style={{ minWidth: "120px" }} onClick={handleCancel}>Cancel</Button>
                  <Button variant="dark" type="submit" className="px-4" style={{ minWidth: "120px" }}>Create Project</Button>
                </div>
              </Form>
            </div>
          </Container>
        );
      }
      
      export default AddProjectList;
      






















      import React, { useEffect, useState } from 'react';
      import { Table, Badge, Button, Row, Col, Card, Modal, Form, Dropdown } from 'react-bootstrap';
      import { FaEye, FaEdit, FaUpload, FaPlus } from 'react-icons/fa';
      import { Link } from 'react-router-dom';
      import './Project.css';
      import { useDispatch, useSelector } from 'react-redux';
      import { fetchProject } from '../../../redux/slices/ProjectsSlice';
      
      function ProjectList() {
        const [activeTab, setActiveTab] = useState('All');
        const [currentPage, setCurrentPage] = useState(1);
      
       const dispatch =useDispatch()
      
        const [projects, setProjects] = useState([
          {
            id: '00001',
            name: 'POS',
            description: 'Redesign company website with new features',
            startDate: '2025/03/01',
            endDate: '2025/06/30',
            totaltimelogged: '9hour',
            client: 'JohnnySmith',
            status: 'Active Project',
            invoiceCreated: false
          },
          {
            id: '00002',
            name: 'CRM',
            description: 'Developing a cross-platform mobile application',
            startDate: '2025/04/15',
            endDate: '2025/09/20',
            totaltimelogged: '9hour',
            client: 'JohnnySmith',
            status: 'In Progress',
            invoiceCreated: false
          },
          {
            id: '00003',
            name: 'HRM',
            description: 'Integrating a new CRM with existing systems',
            startDate: '2025/05/10',
            endDate: '2025/11/05',
            totaltimelogged: '9hour',
            client: 'JohnnySmith',
            status: 'Completed',
            invoiceCreated: false
          },
          {
            id: '00004',
            name: 'Project Management',
            description: 'Legacy System Migration',
            startDate: '2025/01/01',
            endDate: '2025/12/31',
            totaltimelogged: '9hour',
            client: 'Jane/Doe',
            status: 'Closed',
            invoiceCreated: true
          },
          {
            id: '00005',
            name: 'Task Management',
            description: 'Cloud Infrastructure Setup',
            startDate: '2025/02/15',
            endDate: '2025/08/15',
            totaltimelogged: '9hour',
            client: 'TechCorp',
            status: 'Cancelled',
            invoiceCreated: true
          },
          {
            id: '00006',
            name: 'E-commerce',
            description: 'AI Implementation Project',
            startDate: '2025/06/01',
            endDate: '2025/12/31',
            totaltimelogged: '9hour',
            client: 'InnovationLabs',
            status: 'On Hold',
            invoiceCreated: false
          }
        ]);
      
      
      
      
      
      
        // All Projects 
      const { project, loading, error } = useSelector((state) => state.projects);
      console.log(project.data, "project");
      
      // const projectOptions = [
      //   "All",
      //   ...new Set(project.data.map((d) => d.project?.name).filter(Boolean)),
      // ];
      
      // const statusOptions = [
      //   "All",
      //   ...new Set(project.data.map((d) => d.status).filter(Boolean)),
      // ];
      
      useEffect(() => {
        dispatch(fetchProject());
      }, [dispatch]);
      
        const tabs = ['All', 'Active', 'In Progress', 'Completed', 'Closed', 'Cancelled', 'On Hold', 'Completed (To Be Invoiced)'];
      
        const filteredProjects = activeTab === 'All' 
          ? project.data
          : activeTab === 'Completed (To Be Invoiced)'
            ? project.data?.filter(project => project.status === 'Completed' && !project.invoiceCreated)
            : project.data?.filter(project => project.status === activeTab);
      
        const updateProjectStatus = (index, newStatus) => {
          const updatedProjects = [...projects];
          updatedProjects[index].status = newStatus;
          setProjects(updatedProjects);
        };
      
        const [selectedJobs, setSelectedJobs] = useState({});
      
        const handleCheckboxChange = (projectId) => {
          setSelectedJobs((prev) => ({
            ...prev,
            [projectId]: !prev[projectId],
          }));
        };
      
      
        return (
          <div className="project-container">
            {/* Header */}
            <div className="d-flex justify-content-between align-items-center mb-3">
              <h5 className="m-0 fw-bold">Project List</h5>
            </div>
      
            {/* Project Status Tabs */}
            <div className="project-tabs mb-4">
              <ul className="nav nav-tabs">
                {tabs.map((tab) => (
                  <li className="nav-item" key={tab}>
                    <button
                      className={`nav-link ${activeTab === tab ? 'active' : ''}`}
                      onClick={() => setActiveTab(tab)}
                      style={{ color: "#0d6efd", borderColor: "#0d6efd" }}
                    >
                      {tab}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
      
            {/* Search and Actions */}
            <div className="d-flex justify-content-between align-items-center mb-4">
              <div className="search-box">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Search projects.."
                />
              </div>
              <div className="actions">
                <Button variant="outline-secondary" size="sm" className="me-2">
                  <FaUpload className="me-1" /> Import
                </Button>
                <Link to={"/AddProjectList"}>
                  <Button id='All_btn' variant="dark" size="sm">
                    <FaPlus className="me-1" /> Add project
                  </Button>
                </Link>
              </div>
            </div>
      
            {/* Projects Table */}
            <Table responsive className="project-table mb-4">
              <thead>
                <tr>
                  <th>
                    <input
                      type="checkbox"
                      onChange={() => {
                        const isChecked = Object.keys(selectedJobs).length === projects.length;
                        const newSelectedJobs = {};
                        projects.forEach((project) => {
                          newSelectedJobs[project.id] = !isChecked;
                        });
                        setSelectedJobs(newSelectedJobs);
                      }}
                    />
                  </th>
                  <th style={{ whiteSpace: "nowrap" }}>Project No</th>
                  <th style={{ textWrap: "nowrap" }}>Project Name</th>
                  <th>Description</th>
                  <th>Start Date</th>
                  <th>End Date</th>
                  <th style={{ whiteSpace: "nowrap" }}>Total Time logged</th>
                  <th>Client</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredProjects.map((project, index) => (
                  <tr key={project.id}>
                    <td>
                      <input
                        type="checkbox"
                        checked={selectedJobs[project.id] || false}
                        onChange={() => handleCheckboxChange(project.id)}
                      />
                    </td>
                    <td><Link to={"/ProjectOverview"}>{project.id}</Link></td>
                    <td>{project.name}</td>
                    <td>{project.description}</td>
                    <td>{project.startDate}</td>
                    <td>{project.endDate}</td>
                    <td>{project.totaltimelogged}</td>
                    <td>{project.client}</td>
                    <th>
                    <Button className='mt-4' variant="success" style={{width:"150px"}} size="sm" >
                                  {project.status || "Active"}
                                 </Button>
                    </th>
                     
                    {/* <td>
                      <Dropdown>
                        <Dropdown.Toggle variant="success" size="sm">
                          {project.status || 'Select Status'}
                        </Dropdown.Toggle>
      
                        <Dropdown.Menu>
                          <Dropdown.Item onClick={() => updateProjectStatus(index, 'Active Project')}>Active Project</Dropdown.Item>
                          <Dropdown.Item onClick={() => updateProjectStatus(index, 'In Progress')}>In Progress</Dropdown.Item>
                          <Dropdown.Item onClick={() => updateProjectStatus(index, 'Completed')}>Completed</Dropdown.Item>
                          <Dropdown.Item onClick={() => updateProjectStatus(index, 'Closed')}>Closed</Dropdown.Item>
                          <Dropdown.Item onClick={() => updateProjectStatus(index, 'Cancelled')}>Cancelled</Dropdown.Item>
                          <Dropdown.Item onClick={() => updateProjectStatus(index, 'On Hold')}>On Hold</Dropdown.Item>
                        </Dropdown.Menu>
                      </Dropdown>
                    </td> */}
                    <td>
                      <div className="action-buttons d-flex ">
                        <Button variant="link" className="p-0 me-2">
                          <FaEye />
                        </Button>
                        <Button variant="link" className="p-0 me-2">
                          <Link to={"/UpdateProjectLis"}>
                            <FaEdit />
                          </Link>
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
      
            {/* Pagination */}
            <div className="d-flex justify-content-between align-items-center mb-4">
              <div className="text-muted small">Showing 1 to {filteredProjects.length} of {projects.length} entries</div>
              <ul className="pagination pagination-sm mb-0">
                <li className="page-item">
                  <button className="page-link">Previous</button>
                </li>
                <li className="page-item active">
                  <button className="page-link">1</button>
                </li>
                <li className="page-item">
                  <button className="page-link">2</button>
                </li>
                <li className="page-item">
                  <button className="page-link">3</button>
                </li>
                <li className="page-item">
                  <button className="page-link">Next</button>
                </li>
              </ul>
            </div>
          </div>
        );
      }
      
      export default ProjectList;
      





























      import React, { useState, useEffect } from 'react';
      import { Form, Button, Container, Row, Col } from 'react-bootstrap';
      import { useDispatch, useSelector } from 'react-redux';
      import { useNavigate, useParams } from 'react-router-dom';
      import { createProject, fetchProjectById, updateProject } from '../../../redux/slices/ProjectsSlice';
      import { toast } from "react-toastify";
      import "react-toastify/dist/ReactToastify.css";
      
      function AddProjectList() {
        const navigate = useNavigate();
        const dispatch = useDispatch();
        const { id } = useParams(); // Grab project ID from URL
        const [formData, setFormData] = useState({
          projectName: '',
          clientId: '',
          managerId: '',
          startDate: '',
          endDate: '',
          projectPriority: '',
          description: '',
          status: '',
          projectRequirements: {
            creativeDesign: false,
            artworkAdaptation: false,
            prepress: false,
            POS: false,
            mockups: false,
            rendering: false,
          },
          budgetAmount: '',
          currency: '',
          totalTime: ''
        });
      
        // Load existing project data in edit mode
        useEffect(() => {
          if (id) {
            dispatch(fetchProjectById(id)).then((res) => {
              const project = res.payload;
              if (project) {
                setFormData({
                  ...project,
                  projectRequirements: project.projectRequirements?.[0] || {}
                });
              }
            });
          }
        }, [id, dispatch]);
      
        const handleInputChange = (e) => {
          const { name, value } = e.target;
          setFormData((prev) => ({
            ...prev,
            [name]: value
          }));
        };
      
        const handleCheckboxChange = (e) => {
          const { name, checked } = e.target;
          setFormData(prev => ({
            ...prev,
            projectRequirements: {
              ...prev.projectRequirements,
              [name]: checked
            }
          }));
        };
      
        const handleSubmit = e => {
          e.preventDefault();
          const payload = {
            ...formData,
            projectRequirements: [formData.projectRequirements]
          };
          if (id) {
            dispatch(updateProject({ id, data: payload }))
              .unwrap()
              .then(() => {
                toast.success("Project updated successfully!");
                navigate("/plantMachinery");
              })
              .catch(() => {
                toast.error("Failed to update project!");
              });
          } else {
            dispatch(createProject(payload))
              .unwrap()
              .then(() => {
                toast.success("Project created successfully!");
                navigate("/projectList");
              })
              .catch(() => {
                toast.error("Error creating project");
              });
          }
        };
      
        const handleCancel = () => {
          navigate("/plantMachinery");
        };
      
        return (
          <Container className="py-4">
            <div className="form-container p-4 rounded shadow-sm" style={{ backgroundColor: "white", margin: "0 auto" }}>
              <h2 className="mb-4">New Project</h2>
              <Form onSubmit={handleSubmit} >
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Name</Form.Label>
                      <Form.Control
                        type="text"
                        name="projectName"
                        value={formData.projectName}
                        onChange={handleInputChange}
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Client Name</Form.Label>
                      <Form.Select
                        name="clientId"
                        value={formData.clientId}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Client</option>
                        <option value="662fb9cba77b2e0012345679">662fb9cba77b2e0012345679</option>
                        <option value="client2">Client 2</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>
      
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Manager</Form.Label>
                      <Form.Select
                        name="managerId"
                        value={formData.managerId}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Manager</option>
                        <option value="662fb9a2a77b2e0012345678">662fb9a2a77b2e0012345678</option>
                        <option value="manager2">Manager 2</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Start Date</Form.Label>
                      <Form.Control
                        type="date"
                        name="startDate"
                        value={formData.startDate}
                        onChange={handleInputChange}
                        required
                      />
                    </Form.Group>
                  </Col>
                </Row>
      
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Expected Completion Date</Form.Label>
                      <Form.Control
                        type="date"
                        name="endDate"
                        value={formData.endDate}
                        onChange={handleInputChange}
                        required
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Priority</Form.Label>
                      <Form.Select
                        name="projectPriority"
                        value={formData.projectPriority}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Priority</option>
                        <option value="high">High</option>
                        <option value="medium">Medium</option>
                        <option value="low">Low</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>
      
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Project Status</Form.Label>
                      <Form.Select
                        name="status"
                        value={formData.status}
                        onChange={handleInputChange}
                        required
                      >
                        <option value="">Select Status</option>
                        <option value="Active Project">Active Project</option>
                        <option value="In Progress">In Progress</option>
                        <option value="completed">Completed</option>
                        <option value="Completed">Closed</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="On Hold">On Hold</option>
                        <option value="Completed">Completed</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Label className="text-muted mb-1">Total Time Logged</Form.Label>
                      <Form.Control
                        type="time"
                        name="totalTime"
                        value={formData.totalTime}
                        onChange={handleInputChange}
                      />
                    </Form.Group>
                  </Col>
                </Row>
      
                <Form.Group className="mb-3">
                  <Form.Label className="text-muted mb-1">Project Description</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={4}
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                  />
                </Form.Group>
      
                <Form.Group className="mb-3">
                  <Form.Label className="text-muted mb-1">Project Requirements</Form.Label>
                  <div>
                    <Form.Check
                      type="checkbox"
                      label="Creative Design"
                      name="creativeDesign"
                      checked={formData.projectRequirements.creativeDesign}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Artwork Adaptation"
                      name="artworkAdaptation"
                      checked={formData.projectRequirements.artworkAdaptation}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Prepress/File Preparation"
                      name="prepress"
                      checked={formData.projectRequirements.prepress}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="POS"
                      name="POS"
                      checked={formData.projectRequirements.POS}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="Mockups"
                      name="mockups"
                      checked={formData.projectRequirements.mockups}
                      onChange={handleCheckboxChange}
                    />
                    <Form.Check
                      type="checkbox"
                      label="3D Rendering"
                      name="rendering"
                      checked={formData.projectRequirements.rendering}
                      onChange={handleCheckboxChange}
                    />
                  </div>
                </Form.Group>
      
                <Form.Label className="text-muted mb-1">Budget Information</Form.Label>
                <Row className="mb-3">
                  <Col md={6}>
                    <Form.Group>
                      <Form.Control
                        type="number"
                        placeholder="Budget Amount"
                        name="budgetAmount"
                        value={formData.budgetAmount}
                        onChange={handleInputChange}
                      />
                    </Form.Group>
                  </Col>
                  <Col md={6}>
                    <Form.Group>
                      <Form.Select
                        name="currency"
                        value={formData.currency}
                        onChange={handleInputChange}
                      >
                        <option value="">Select Currency</option>
                        <option value="AED">AED</option>
                        <option value="EUR">EUR</option>
                        <option value="GBP">GBP</option>
                        <option value="INR">INR</option>
                        <option value="SAR">SAR</option>
                        <option value="USD">USD</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>
      
                <div className="d-flex justify-content-end gap-2 mt-4">
                  <Button variant="secondary" className="px-4" style={{ minWidth: "120px" }} onClick={handleCancel}>Cancel</Button>
                  <Button variant="dark" type="submit" className="px-4" style={{ minWidth: "120px" }}>Create Project</Button>
                </div>
              </Form>
            </div>
          </Container>
        );
      }
      
      export default AddProjectList;






import React, { useState, useEffect } from 'react';
import { Form, Button, Container, Row, Col } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useParams, useLocation } from 'react-router-dom';
import { createProject, fetchProjectById, updateProject } from '../../../redux/slices/ProjectsSlice';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

function AddProjectList() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mode
  const location = useLocation();
  const { project } = location.state || {};

  const [formData, setFormData] = useState({
    projectName: '',
    clientId: '',
    managerId: '',
    startDate: '',
    endDate: '',
    projectPriority: '',
    description: '',
    status: '',
    projectRequirements: {
      creativeDesign: false,
      artworkAdaptation: false,
      prepress: false,
      POS: false,
      mockups: false,
      rendering: false,
    },
    budgetAmount: '',
    currency: '',
    totalTime: ''
  });

  useEffect(() => {
    if (project) {
      // Form pre-filled from location.state
      setFormData({
        ...project,
        projectRequirements: project.projectRequirements?.[0] || {}
      });
    } else if (id) {
      // Form pre-filled from API
      dispatch(fetchProjectById(id)).then((res) => {
        const fetchedProject = res.payload;
        if (fetchedProject) {
          setFormData({
            ...fetchedProject,
            projectRequirements: fetchedProject.projectRequirements?.[0] || {}
          });
        }
      });
    }
  }, [id, dispatch, project]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      projectRequirements: {
        ...prev.projectRequirements,
        [name]: checked
      }
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      ...formData,
      projectRequirements: [formData.projectRequirements]
    };

    if (id) {
      dispatch(updateProject({ id, data: payload }))
        .unwrap()
        .then(() => {
          toast.success("Project updated successfully!");
          navigate("/plantMachinery");
        })
        .catch(() => {
          toast.error("Failed to update project!");
        });
    } else {
      dispatch(createProject(payload))
        .unwrap()
        .then(() => {
          toast.success("Project created successfully!");
          navigate("/projectList");
        })
        .catch(() => {
          toast.error("Error creating project");
        });
    }
  };

  const handleCancel = () => {
    navigate("/plantMachinery");
  };

  return (
    <Container className="py-4">
      <div className="form-container p-4 rounded shadow-sm" style={{ backgroundColor: "white", margin: "0 auto" }}>
        <h2 className="mb-4">{id ? "Edit Project" : "New Project"}</h2>
        <Form onSubmit={handleSubmit}>
          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Name</Form.Label>
                <Form.Control
                  type="text"
                  name="projectName"
                  value={formData.projectName}
                  onChange={handleInputChange}
                  required
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Client Name</Form.Label>
                <Form.Select
                  name="clientId"
                  value={formData.clientId}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Client</option>
                  <option value="662fb9cba77b2e0012345679">Client 1</option>
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>

          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Manager</Form.Label>
                <Form.Select
                  name="managerId"
                  value={formData.managerId}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Manager</option>
                  <option value="662fb9a2a77b2e0012345678">Manager 1</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Start Date</Form.Label>
                <Form.Control
                  type="date"
                  name="startDate"
                  value={formData.startDate}
                  onChange={handleInputChange}
                  required
                />
              </Form.Group>
            </Col>
          </Row>

          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Expected Completion Date</Form.Label>
                <Form.Control
                  type="date"
                  name="endDate"
                  value={formData.endDate}
                  onChange={handleInputChange}
                  required
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Priority</Form.Label>
                <Form.Select
                  name="projectPriority"
                  value={formData.projectPriority}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Priority</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>

          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Status</Form.Label>
                <Form.Select
                  name="status"
                  value={formData.status}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Status</option>
                  <option value="Active Project">Active Project</option>
                  <option value="In Progress">In Progress</option>
                  <option value="completed">Completed</option>
                  <option value="Closed">Closed</option>
                  <option value="Cancelled">Cancelled</option>
                  <option value="On Hold">On Hold</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Total Time Logged</Form.Label>
                <Form.Control
                  type="time"
                  name="totalTime"
                  value={formData.totalTime}
                  onChange={handleInputChange}
                />
              </Form.Group>
            </Col>
          </Row>

          <Form.Group className="mb-3">
            <Form.Label className="text-muted mb-1">Project Description</Form.Label>
            <Form.Control
              as="textarea"
              rows={4}
              name="description"
              value={formData.description}
              onChange={handleInputChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label className="text-muted mb-1">Project Requirements</Form.Label>
            <div>
              {['creativeDesign', 'artworkAdaptation', 'prepress', 'POS', 'mockups', 'rendering'].map((key) => (
                <Form.Check
                  key={key}
                  type="checkbox"
                  label={key.replace(/([A-Z])/g, ' $1')}
                  name={key}
                  checked={formData.projectRequirements[key]}
                  onChange={handleCheckboxChange}
                />
              ))}
            </div>
          </Form.Group>

          <Form.Label className="text-muted mb-1">Budget Information</Form.Label>
          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Control
                  type="number"
                  placeholder="Budget Amount"
                  name="budgetAmount"
                  value={formData.budgetAmount}
                  onChange={handleInputChange}
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Select
                  name="currency"
                  value={formData.currency}
                  onChange={handleInputChange}
                >
                  <option value="">Select Currency</option>
                  <option value="AED">AED</option>
                  <option value="EUR">EUR</option>
                  <option value="GBP">GBP</option>
                  <option value="INR">INR</option>
                  <option value="SAR">SAR</option>
                  <option value="USD">USD</option>
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>

          <div className="d-flex justify-content-end gap-2 mt-4">
            <Button variant="secondary" className="px-4" style={{ minWidth: "120px" }} onClick={handleCancel}>Cancel</Button>
            <Button variant="dark" type="submit" className="px-4" style={{ minWidth: "120px" }}>
              {id ? "Update Project" : "Create Project"}
            </Button>
          </div>
        </Form>
      </div>
    </Container>
  );
}

export default AddProjectList;

      
      























      import axios from 'axios';
      import React, { useEffect, useState } from 'react';
      import { useNavigate, useParams } from 'react-router-dom'; // ✅ Added useParams
      import { toast, ToastContainer } from 'react-toastify';
      import 'react-toastify/dist/ReactToastify.css';
      import Barcode from 'react-barcode';
      import Select from 'react-select';
      import { useDispatch, useSelector } from 'react-redux';
      import { fetchProject } from '../../../redux/slices/ProjectsSlice';
      import { createjob, fetchjobById } from '../../../redux/slices/JobsSlice';
      
      
      import { useLocation } from 'react-router-dom';
      
      function AddJobTracker() {
        const { id } = useParams(); 
        const navigate = useNavigate();
        const dispatch = useDispatch();
      
        const { project, loading, error } = useSelector((state) => state.projects);
      
        useEffect(() => {
          dispatch(fetchProject());
        }, [dispatch]);
      
        const [formData, setFormData] = useState({
          projectsId: '',
          brandName: '',
          subBrand: '',
          flavour: '',
          packType: '',
          packSize: '',
          priority: '',
          Status: '',
          totalTime: '',
          assign: '',
          barcode: 'POS-123456',
        });
      
        const brandOptions = [
          { value: 'Pepsi', label: 'Pepsi' },
          { value: 'CocaCola', label: 'CocaCola' },
          { value: 'Fanta', label: 'Fanta' },
        ];
      
        const flavourOptions = [
          { value: 'Orange', label: 'Orange' },
          { value: 'Lime', label: 'Lime' },
          { value: 'Ginger Ale', label: 'Ginger Ale' },
        ];
      
        const packSizeOptions = [
          { value: '250ml', label: '250ml' },
          { value: '500ml', label: '500ml' },
          { value: '1L', label: '1L' },
        ];
      
        const handleChange = (e) => {
          const { name, value } = e.target;
          setFormData((prev) => ({ ...prev, [name]: value }));
        };
      
        useEffect(() => {
          if (project && !id) {
            setFormData((prev) => ({
              ...prev,
              projectRequirements: project.projectRequirements?.[0] || {},
            }));
          } else if (id) {
            // If editing job
            dispatch(fetchjobById(id)).then((res) => {
              const fetchedProject = res.payload;
              if (fetchedProject) {
                setFormData({
                  ...fetchedProject,
                  projectRequirements: fetchedProject.projectRequirements?.[0] || {},
                });
              }
            });
          }
        }, [id, dispatch, project]);
      
        const handleSubmit = (e) => {
          e.preventDefault();
      
          if (id) {
            toast.info('Update logic not implemented in this code');
          } else {
            dispatch(createjob(formData))
              .unwrap()
              .then(() => {
                navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
                dispatch(fetchProject());
                toast.success('Project created successfully!');
              })
              .catch(() => {
                toast.error('Error creating project');
              });
          }
        };
      
        const handleCancel = () => {
          navigate('/projectList');
        };
      
        
        return (
          <>
            <ToastContainer />
            <div className="container mt-5">
              <div className="card shadow-sm">
                <div className="card-body">
                  <h1 className="card-title h4 mb-4">Add New Jobs</h1>
                  <form className="row g-3" onSubmit={handleSubmit}>
                    {/* Project Name */}
                    <div className="col-md-6">
                      <label className="form-label">Project Name</label>
                      <select
                        name="projectsId"
                        className="form-control"
                        value={formData.projectsId}
                        onChange={handleChange}
                      >
                        <option value="" disabled>
                          Select a project
                        </option>
                        {project?.data?.map((project) => (
                          <option key={project._id} value={project._id}>
                            {project.projectName}
                          </option>
                        ))}
                      </select>
                    </div>
      
                    {/* Brand Name */}
                    <div className="col-md-6">
                      <label className="form-label">Brand Name</label>
                      <Select
                        options={brandOptions}
                        value={brandOptions.find((opt) => opt.value === formData.brandName)}
                        onChange={(option) =>
                          setFormData((prev) => ({ ...prev, brandName: option?.value || '' }))
                        }
                        isClearable
                      />
                    </div>
      
                    {/* Sub Brand */}
                    <div className="col-md-6">
                      <label className="form-label">Sub Brand</label>
                      <input
                        type="text"
                        className="form-control"
                        name="subBrand"
                        value={formData.subBrand}
                        onChange={handleChange}
                      />
                    </div>
      
                    {/* Flavour */}
                    <div className="col-md-6">
                      <label className="form-label">Flavour</label>
                      <Select
                        options={flavourOptions}
                        value={flavourOptions.find((opt) => opt.value === formData.flavour)}
                        onChange={(option) =>
                          setFormData((prev) => ({ ...prev, flavour: option?.value || '' }))
                        }
                        isClearable
                      />
                    </div>
      
                    {/* Pack Type */}
                    <div className="col-md-6">
                      <label className="form-label">Pack Type</label>
                      <input
                        type="text"
                        className="form-control"
                        name="packType"
                        value={formData.packType}
                        onChange={handleChange}
                      />
                    </div>
      
                    {/* Pack Size */}
                    <div className="col-md-6">
                      <label className="form-label">Pack Size</label>
                      <Select
                        options={packSizeOptions}
                        value={packSizeOptions.find((opt) => opt.value === formData.packSize)}
                        onChange={(option) =>
                          setFormData((prev) => ({ ...prev, packSize: option?.value || '' }))
                        }
                        isClearable
                      />
                    </div>
      
                    {/* Priority */}
                    <div className="col-md-6">
                      <label className="form-label">Priority</label>
                      <select
                        className="form-select"
                        name="priority"
                        value={formData.priority}
                        onChange={handleChange}
                      >
                        <option value="">Select</option>
                        <option value="low">Low</option>
                        <option value="medium">Medium</option>
                        <option value="high">High</option>
                      </select>
                    </div>
      
                    {/* Status */}
                    <div className="col-md-6">
                      <label className="form-label">Status</label>
                      <select
                        className="form-select"
                        name="Status"
                        value={formData.Status}
                        onChange={handleChange}
                      >
                        <option value="">Select</option>
                        <option value="open">Open</option>
                        <option value="in_progress">In Progress</option>
                        <option value="completed">Completed</option>
                      </select>
                    </div>
      
                    {/* Total Time Logged */}
                    <div className="col-md-6">
                      <label className="form-label">Total Time Logged</label>
                      <input
                        type="time"
                        className="form-control"
                        name="totalTime"
                        value={formData.totalTime}
                        onChange={(e) =>
                          setFormData((prev) => ({ ...prev, totalTime: e.target.value }))
                        }
                      />
                    </div>
      
                    {/* assign */}
                    <div className="col-md-6">
                      <label className="form-label">Assign</label>
                      <select
                        className="form-select"
                        name="assign"
                        value={formData.assign}
                        onChange={handleChange}
                      >
                        <option value="">Select</option>
                        <option value="Production">Production</option>
                        <option value="Designer">Designer</option>
                      </select>
                    </div>
      
                    {/* Barcode */}
                    <div className="col-md-1">
                      <Barcode value={formData.barcode} />
                    </div>
      
                    {/* Buttons */}
                    <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                      <button
                        type="button"
                        className="btn btn-outline-secondary"
                        onClick={handleCancel}
                      >
                        Cancel
                      </button>
                      <button type="submit" className="btn btn-dark">
                        Add Jobs
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </>
        );
      }
      
      export default AddJobTracker;












       {/* {filteredJobs.map((job, index) => (
              <tr key={index}>
                <td>
                  <input
                    type="checkbox"
                    checked={selectedJobs[job.jobNumber] || false}
                    onChange={() => handleCheckboxChange(job.jobNumber)}
                  />
                </td>
                <td>
                  <Link to={"/OvervieJobsTracker"}>{job.jobNumber}</Link>
                </td>
                <td>{job.projectName}</td>
                <td>{job.brandName}</td>
                <td>{job.subBrand}</td>
                <td>{job.flavour}</td>
                <td>{job.packType}</td>
                <td>{job.packSize}</td>
                <td>
                  <span className={getPriorityClass(job.priority)}>
                    {job.priority}
                  </span>
                </td>
                <td>
                  <span >
                    5\5\5\5
                  </span>
                </td>
                <th><span >
                  Designer
                </span></th>
                <td>{job.timeLogged}</td>
                <td>
                  <span
                    className={`badge ${getStatusClass(job.status)} px-2 py-1`}
                  >
                    {job.status}
                  </span>
                </td> */}
                {/* <td>{job.stage}</td> */}
                {/* <td>
                  <div className="d-flex gap-2">
                    <Button variant="outline-secondary" size="sm">
                      <FaFilePdf />
                    </Button>
                    <Button variant="outline-secondary" size="sm">
                      <FaUpload />
                    </Button>
                    <Button variant="outline-secondary" size="sm">
                      <FaLink />
                    </Button>
                    <Button variant="outline-secondary" size="sm">
                      <FaClock />
                    </Button>
                    <Button variant="outline-secondary" size="sm">
                      <Link to={"/updateJobTracker"}>
                        <FaEdit />
                      </Link>
                    </Button> */}
                    {/* <Button variant="outline-secondary" size="sm">
                    <MdDeleteOutline />
                    </Button> */}
                  {/* </div>
                </td>
              </tr>
            ))} */}

             {/* <Button variant="outline-secondary" size="sm">
                    <MdDeleteOutline />
                    </Button> */}
      





















                    import axios from 'axios';
                    import React, { useEffect, useState } from 'react';
                    import { useLocation, useNavigate, useParams } from 'react-router-dom';
                    import { toast, ToastContainer } from 'react-toastify';
                    import 'react-toastify/dist/ReactToastify.css';
                    import Barcode from 'react-barcode';
                    import Select from 'react-select';
                    import { useDispatch, useSelector } from 'react-redux';
                    import { fetchProject } from '../../../redux/slices/ProjectsSlice';
                    import { createjob, fetchjobById, updatejob } from '../../../redux/slices/JobsSlice';
                    
                    
                    function AddJobTracker() {
                      const navigate = useNavigate();
                      const dispatch = useDispatch();
                      const { id } = useParams(); // for edit mode
                      const location = useLocation();
                      const { job } = location.state || {};
                    console.log(job);
                    
                      // All Projects
                      const { project, loading, error } = useSelector((state) => state.projects);
                    
                      useEffect(() => {
                        dispatch(fetchProject());
                      }, [dispatch]);
                    
                      const [formData, setFormData] = useState({
                        projectsId: '',
                        brandName: '',
                        subBrand: '',
                        flavour: '',
                        packType: '',
                        packSize: '',
                        priority: '',
                        Status: '',
                        totalTime: '',  
                        assign: '',
                        barcode:"POS-123456",  
                      });
                    
                      // Static options
                      const brandOptions = [
                        { value: 'Pepsi', label: 'Pepsi' },
                        { value: 'CocaCola', label: 'CocaCola' },
                        { value: 'Fanta', label: 'Fanta' },
                      ];
                    
                      const flavourOptions = [
                        { value: 'Orange', label: 'Orange' },
                        { value: 'Lime', label: 'Lime' },
                        { value: 'Ginger Ale', label: 'Ginger Ale' },
                      ];
                    
                      const packSizeOptions = [
                        { value: '250ml', label: '250ml' },
                        { value: '500ml', label: '500ml' },
                        { value: '1L', label: '1L' },
                      ];
                    
                      const handleChange = (e) => {
                        const { name, value } = e.target;
                        setFormData((prev) => ({ ...prev, [name]: value }));
                      };
                    
                      // const handleSubmit = async (e) => {
                      //   e.preventDefault();
                      //   console.log("Form Data Submitted:", formData);
                      //   dispatch(createjob(formData))
                      // };
                    
                    
                      // useEffect(() => {
                      //   if (job) {
                      //     setFormData((prev) => ({
                      //       ...prev,
                      //       ...job,
                      //       projectsId: job.project?._id || job.project?.projectId || '', 
                      //     }));
                      //   } else if (id) {
                      //     dispatch(fetchjobById(id)).then((res) => {
                      //       const fetchedJob = res.payload;
                      //       if (fetchedJob) {
                      //         setFormData((prev) => ({
                      //           ...prev,
                      //           ...fetchedJob,
                      //           projectsId: fetchedJob.project?._id || fetchedJob.project?.projectId || '', 
                      //         }));
                      //       }
                      //     });
                      //   }
                      // }, [id, job, dispatch]);
                      useEffect(() => {
                        if (job) {
                          setFormData((prev) => ({
                            ...prev,
                            ...job,
                            projectsId: Array.isArray(job.projectsId)
                              ? (typeof job.projectsId[0] === 'object' ? job.projectsId[0]._id : job.projectsId[0])
                              : job.project?._id || job.project?.projectId || '',
                          }));
                        } else if (id) {
                          dispatch(fetchjobById(id)).then((res) => {
                            const fetchedJob = res.payload;
                            if (fetchedJob) {
                              setFormData((prev) => ({
                                ...prev,
                                ...fetchedJob,
                                projectsId: Array.isArray(fetchedJob.projectsId)
                                  ? (typeof fetchedJob.projectsId[0] === 'object' ? fetchedJob.projectsId[0]._id : fetchedJob.projectsId[0])
                                  : fetchedJob.project?._id || fetchedJob.project?.projectId || '',
                              }));
                            }
                          });
                        }
                      }, [id, job, dispatch]);
                      
                      
                      
                    
                      const handleInputChange = (e) => {
                        const { name, value } = e.target;
                        setFormData(prev => ({
                          ...prev,
                          [name]: value
                        }));
                      };
                      const handleSubmit = (e) => {
                        e.preventDefault();
                      
                        // Wrap projectsId as array
                        const payload = {
                          ...formData,
                          projectsId: [formData.projectsId],  // convert to array
                        };
                      
                        if (id) {
                          dispatch(updatejob({ id, data: payload }))
                            .unwrap()
                            .then(() => {
                              toast.success("Job updated successfully!");
                              navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
                              dispatch(fetchProject());
                            })
                            .catch(() => {
                              toast.error("Failed to update job!");
                            });
                        } else {
                          dispatch(createjob(payload))  // send payload with array
                            .unwrap()
                            .then(() => {
                              toast.success("Job created successfully!");
                              navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
                              dispatch(fetchProject());
                            })
                            .catch(() => {
                              toast.error("Error creating job");
                            });
                        }
                      };
                      
                    
                    // 
                        const handleCancel = () => {
                          navigate("/projectList");
                        }
                        const Cancel =()=>{
                          navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
                        }
                      return (
                        <>
                          <ToastContainer />
                          <div className="container mt-5">
                            <div className="card shadow-sm">
                              <div className="card-body">
                                <h1 className="card-title h4 mb-4">Add New Jobs</h1>
                                <form className="row g-3" onSubmit={handleSubmit}>
                    
                                  {/* Project Name */}
                                  <div className="col-md-6">
                                    <label className="form-label">Project Name</label>
                                    <select
                                      name="projectsId"
                                      className="form-control"
                                      value={formData.projectsId}
                                      onChange={handleChange}
                                    >
                                      <option value="" disabled>Select a project</option>
                                      {project?.data?.map((project) => (
                                        <option key={project._id} value={project._id}>
                                          {project.projectName}
                                        </option>
                                      ))}
                                    </select>
                                  </div>
                    
                                  {/* Brand Name */}
                                  <div className="col-md-6">
                                    <label className="form-label">Brand Name</label>
                                    <Select
                                      options={brandOptions}
                                      value={brandOptions.find(opt => opt.value === formData.brandName)}
                                      onChange={(option) =>
                                        setFormData((prev) => ({ ...prev, brandName: option?.value || '' }))
                                      }
                                      isClearable
                                    />
                                  </div>
                    
                                  {/* Sub Brand */}
                                  <div className="col-md-6">
                                    <label className="form-label">Sub Brand</label>
                                    <input
                                      type="text"
                                      className="form-control"
                                      name="subBrand"
                                      value={formData.subBrand}
                                      onChange={handleChange}
                                    />
                                  </div>
                    
                                  {/* Flavour */}
                                  <div className="col-md-6">
                                    <label className="form-label">Flavour</label>
                                    <Select
                                      options={flavourOptions}
                                      value={flavourOptions.find(opt => opt.value === formData.flavour)}
                                      onChange={(option) =>
                                        setFormData((prev) => ({ ...prev, flavour: option?.value || '' }))
                                      }
                                      isClearable
                                    />
                                  </div>
                    
                                  {/* Pack Type */}
                                  <div className="col-md-6">
                                    <label className="form-label">Pack Type</label>
                                    <input
                                      type="text"
                                      className="form-control"
                                      name="packType"
                                      value={formData.packType}
                                      onChange={handleChange}
                                    />
                                  </div>
                    
                                  {/* Pack Size */}
                                  <div className="col-md-6">
                                    <label className="form-label">Pack Size</label>
                                    <Select
                                      options={packSizeOptions}
                                      value={packSizeOptions.find(opt => opt.value === formData.packSize)}
                                      onChange={(option) =>
                                        setFormData((prev) => ({ ...prev, packSize: option?.value || '' }))
                                      }
                                      isClearable
                                    />
                                  </div>
                    
                                  {/* Priority */}
                                  <div className="col-md-6">
                                    <label className="form-label">Priority</label>
                                    <select
                                      className="form-select"
                                      name="priority"
                                      value={formData.priority}
                                      onChange={handleChange}
                                    >
                                      <option value="">Select</option>
                                      <option value="low">Low</option>
                                      <option value="medium">Medium</option>
                                      <option value="high">High</option>
                                    </select>
                                  </div>
                    
                                  {/* Status */}
                                  <div className="col-md-6">
                                    <label className="form-label">Status</label>
                                    <select
                                      className="form-select"
                                      name="Status"
                                      value={formData.Status}
                                      onChange={handleChange}
                                    >
                                      <option value="">Select</option>
                                      <option value="open">Open</option>
                                      <option value="in_progress">In Progress</option>
                                      <option value="completed">Completed</option>
                                    </select>
                                  </div>
                    
                                  {/* Total Time Logged */}
                                  <div className="col-md-6">
                                    <label className="form-label">Total Time Logged</label>
                                    <input
                                      type="time"
                                      className="form-control"
                                      name="totalTime"
                                      value={formData.totalTime}
                                      onChange={(e) =>
                                        setFormData((prev) => ({ ...prev, totalTime: e.target.value }))
                                      }
                                    />
                                  </div>
                    
                                  {/* assign */}
                                  <div className="col-md-6">
                                    <label className="form-label">assign</label>
                                    <select
                                      className="form-select"
                                      name="assign"
                                      value={formData.assign}
                                      onChange={handleChange}
                                    >
                                      <option value="">Select</option>
                                      <option value="Production">Production</option>
                                      <option value="Designer">Designer</option>
                                    </select>
                                  </div>
                    
                                  {/* Barcode */}
                                  <div className="col-md-1">
                                    <Barcode value="POS-123456" />
                                  </div>
                    
                                  {/* Buttons */}
                                  <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                                    <button type="button" className="btn btn-outline-secondary" onClick={()=>Cancel()}>Cancel</button>
                                    <button type="submit" className="btn btn-dark">Add Jobs</button>
                                  </div>
                    
                                </form>
                              </div>
                            </div>
                          </div>
                        </>
                      );
                    }
                    
                    export default AddJobTracker;














                    import React, { useEffect, useState } from 'react';
                    import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
                    import { Modal, Form, Button } from 'react-bootstrap';
                    import { useDispatch, useSelector } from 'react-redux';
                    import { deletejob, fetchjobs, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
                    import Swal from 'sweetalert2';
                    
                    function ProjectJobsTab() {
                      const [selectedProduction, setSelectedProduction] = useState('');
                      const [selectedAdditional, setSelectedAdditional] = useState('');
                      const [selectedJob, setSelectedJob] = useState(null);
                      const [attachedFile, setAttachedFile] = useState(null);
                      const [selectedJobs, setSelectedJobs] = useState({});
                      const [errorMessage, setErrorMessage] = useState('');
                    
                      const [showAssignModal, setShowAssignModal] = useState(false);
                      const [selectedDesigner, setSelectedDesigner] = useState('');
                      const [assignmentDescription, setAssignmentDescription] = useState('');
                    
                      const jobs = [
                        {
                          id: "00001",
                          brandName: "Brand1",
                          subBrand: "SubBrand1",
                          flavour: "Flavour1",
                          packType: "Type1",
                          packSize: "Size 1ml",
                          packCode: "Code1",
                          deadline: "2024/01/20",
                          brief: "ViewBrief",
                          status: "Pending Upload",
                          statusVariant: "warning",
                        },
                        {
                          id: "00002",
                          brandName: "Brand2",
                          subBrand: "SubBrand2",
                          flavour: "Flavour2",
                          packType: "Type2",
                          packSize: "Size 2ml",
                          packCode: "Code2",
                          deadline: "2024/01/25",
                          brief: "ViewBrief",
                          status: "In Progress",
                          statusVariant: "info",
                        },
                        {
                          id: "00003",
                          brandName: "Brand3",
                          subBrand: "SubBrand3",
                          flavour: "Flavour3",
                          packType: "Type3",
                          packSize: "Size 3ml",
                          packCode: "Code3",
                          deadline: "2024/02/01",
                          brief: "ViewBrief",
                          status: "DraftSaved",
                          statusVariant: "secondary",
                        },
                      ];
                    
                      const handleCheckboxChange = (jobId) => {
                        setSelectedJobs((prev) => ({
                          ...prev,
                          [jobId]: !prev[jobId],
                        }));
                      };
                    
                      const handleSubmitAssignment = () => {
                        const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                    
                        if (selectedJobIds.length === 0) {
                          setErrorMessage("Please select at least 1 job to assign.");
                          setTimeout(() => setErrorMessage(""), 3000);
                          return;
                        }
                    
                        if (!selectedDesigner) {
                          setErrorMessage("Please select a designer.");
                          setTimeout(() => setErrorMessage(""), 3000);
                          return;
                        }
                    
                        // ✅ Now send data to handleJobAssign
                        handleJobAssign(selectedJobIds, selectedDesigner);
                    
                        // Reset state and close modal
                        setShowAssignModal(false);
                        setSelectedProduction('');
                        setSelectedAdditional('');
                        setSelectedJob(null);
                        setSelectedDesigner('');
                        setAssignmentDescription('');
                      };
                    
                      const handleCSVImport = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                          console.log("CSV file selected:", file.name);
                        }
                      };
                    
                      const getPriorityClass = (priority) => {
                        switch (priority.toLowerCase()) {
                          case "high":
                            return "text-danger";
                          case "medium":
                            return "text-warning";
                          case "low":
                            return "text-success";
                          default:
                            return "";
                        }
                      };
                      // ////////////////////////////////////////
                      const navigate = useNavigate();
                      const dispatch = useDispatch();
                      const location = useLocation();
                      const params = useParams();
                      const id = location.state?.id || params.id;
                      useEffect(() => {
                        console.log("Project ID:", id);
                      }, [id]);
                    
                      const { job } = useSelector((state) => state.jobs);
                      console.log(job.jobs, "all jobs");
                    
                      useEffect(() => {
                        dispatch(fetchjobs());
                      }, [dispatch]);
                    
                    
                      const handleDelete = (_id) => {
                        console.log(_id);
                        Swal.fire({
                          title: "Are you sure?",
                          text: "You won't be able to revert this!",
                          icon: "warning",
                          showCancelButton: true,
                          confirmButtonColor: "#3085d6",
                          cancelButtonColor: "#d33",
                          confirmButtonText: "Yes, delete it!",
                        }).then((result) => {
                          if (result.isConfirmed) {
                            dispatch(deletejob(_id))
                              .then(() => {
                                Swal.fire("Deleted!", "The document has been deleted.", "success");
                                dispatch(fetchjobs());
                              })
                              .catch(() => {
                                Swal.fire("Error!", "Something went wrong.", "error");
                              });
                          }
                        });
                      }
                    
                    
                      const handleUpdate = (job) => {
                        navigate(`/AddJobTracker`, { state: { job } });
                      };
                    
                      const JobDetails = (job) => {
                        navigate(`/OvervieJobsTracker`, { state: { job } });
                      }
                    
                    
                      const getStatusClass = (status) => {
                        switch (status.toLowerCase().trim()) {
                          case "in progress":
                          case "in_progress":
                            return "bg-warning text-dark";
                          case "review":
                            return "bg-info text-dark";
                          case "not started":
                            return "bg-secondary text-white";
                          case "completed":
                            return "bg-success text-white";
                          case "open":
                            return "bg-primary text-white";
                          default:
                            return "bg-light text-dark";
                        }
                      };
                    
                     const handleJobAssign = (selectedIds, assignTo) => {
                     
                      const payload = {
                        id: selectedIds,
                        assign: assignTo,
                      };
                      console.log("Assignment Payload:", payload);
                      dispatch(UpdateJobAssign(payload))
                      .then(() => {
                          // Swal.fire("Success!", "Jobs assigned successfully", "success");
                          dispatch(fetchjobs());
                        })
                        .catch(() => {
                          Swal.fire("Error!", "Something went wrong", "error");
                        });
                    };
                    
                    return (
                        <div className="card">
                          <div className="card-header d-flex align-content-center justify-content-between mt-3">
                            <h5 className="card-title mb-0">Jobs List</h5>
                            <div className="text-end">
                              {/* ✅ Assign Button always enabled, shows error if none selected */}
                              <Button
                                id="All_btn"
                                className="m-2"
                                variant="primary"
                                onClick={() => {
                                  const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                                  if (selectedJobIds.length === 0) {
                                    setErrorMessage("Please select at least 1 job to assign.");
                                    setTimeout(() => setErrorMessage(""), 3000);
                                  } else {
                                    handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                                    setShowAssignModal(true);
                                  }
                                }}
                              >
                                Assign
                              </Button>
                    
                    
                              <label className="btn btn-success m-2">
                                <i className="bi bi-upload"></i> Import CSV
                                <input
                                  type="file"
                                  accept=".csv"
                                  onChange={handleCSVImport}
                                  hidden
                                />
                              </label>
                    
                              <Link to={"/AddJobTracker"}>
                                <button id='All_btn' className="btn btn-primary">
                                  <i className="bi bi-plus"></i> Add New
                                </button>
                              </Link>
                            </div>
                          </div>
                    
                          <div className="card-body">
                            {/* ✅ Error message block */}
                            {errorMessage && (
                              <div className="alert alert-danger py-2" role="alert">
                                {errorMessage}
                              </div>
                            )}
                    
                            <div className="table-responsive">
                              <table className="table table-hover">
                                <thead>
                                  <tr>
                                    <th>
                                      <input
                                        type="checkbox"
                                        onChange={() => {
                                          const isChecked = Object.keys(selectedJobs).length === jobs.length;
                                          const newSelectedJobs = {};
                                          jobs.forEach((job) => {
                                            newSelectedJobs[job.id] = !isChecked;
                                          });
                                          setSelectedJobs(newSelectedJobs);
                                        }}
                                      />
                                    </th>
                                    <th>JobsNo</th>
                                    <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                                    <th>Brand</th>
                                    <th>SubBrand</th>
                                    <th>Flavour</th>
                                    <th>PackType</th>
                                    <th>PackSize</th>
                                    <th>Priority</th>
                                    <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                                    <th>Assing</th>
                                    <th>TotalTime</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {job?.jobs?.slice().reverse().map((job, index) => (
                                    <tr key={job._id}>
                                      <td>
                                        <input
                                          type="checkbox"
                                          checked={selectedJobs[job._id] || false}
                                          onChange={() => handleCheckboxChange(job._id)}
                                        />
                                      </td>
                                      <td>
                                        <Link>
                                          {String(index + 1).padStart(4, '0')}
                                        </Link>
                                      </td>
                                      <td>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                                      <td>{job.brandName}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                                      <td>{job.packType}</td>
                                      <td>{job.packSize}</td>
                                      <td>
                                        <span className={getPriorityClass(job.priority)}>
                                          {job.priority}
                                        </span>
                                      </td>
                                      <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                                      <td>{job.assign}</td>
                                      <td>{job.totalTime}</td>
                                      {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                                      <td>
                                        <span
                                          className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                                        >
                                          {job.Status}
                                        </span>
                                      </td>
                                      <td className="d-flex">
                                        <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                                          <i className="bi bi-eye"></i> View
                                        </button>
                                        <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                                          <i className="bi bi-pencil"></i> Edit
                                        </button>
                                        <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                                          <i className="bi bi-trash"></i> Delete
                                        </button>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </div>
                    
                          {/* ✅ Job Assignment Modal */}
                          <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
                            <Modal.Header closeButton>
                              <Modal.Title>Assign Job</Modal.Title>
                            </Modal.Header>
                            <Modal.Body>
                              <Form>
                                <Form.Group className="mb-3">
                                  <Form.Label>Select Designer</Form.Label>
                                  <Form.Select
                                    value={selectedDesigner}
                                    onChange={(e) => setSelectedDesigner(e.target.value)}
                                  >
                                    <option value="">-- Select --</option>
                                    <option value="production">Production</option>
                                    <option value="designer">Designer</option>
                                  </Form.Select>
                                </Form.Group>
                    
                                <Form.Group className="mb-3">
                                  <Form.Label>Description</Form.Label>
                                  <Form.Control
                                    as="textarea"
                                    rows={3}
                                    value={assignmentDescription}
                                    onChange={(e) => setAssignmentDescription(e.target.value)}
                                    placeholder="Enter assignment details or instructions..."
                                  />
                                </Form.Group>
                              </Form>
                            </Modal.Body>
                            <Modal.Footer>
                              <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
                                Cancel
                              </Button>
                              <Button variant="primary" onClick={handleSubmitAssignment}>
                                Assign
                              </Button>
                            </Modal.Footer>
                          </Modal>
                    
                        </div>
                      );
                    }
                    
                    export default ProjectJobsTab;
                    
                    





                    import React, { useEffect, useState } from 'react';
                    import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
                    import { Modal, Form, Button } from 'react-bootstrap';
                    import { useDispatch, useSelector } from 'react-redux';
                    import { deletejob, fetchjobs, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
                    import Swal from 'sweetalert2';
                    
                    function ProjectJobsTab() {
                      const [selectedProduction, setSelectedProduction] = useState('');
                      const [selectedAdditional, setSelectedAdditional] = useState('');
                      const [selectedJob, setSelectedJob] = useState(null);
                      const [attachedFile, setAttachedFile] = useState(null);
                      const [selectedJobs, setSelectedJobs] = useState({});
                      const [errorMessage, setErrorMessage] = useState('');
                    
                      const [showAssignModal, setShowAssignModal] = useState(false);
                      const [selectedDesigner, setSelectedDesigner] = useState('');
                      const [assignmentDescription, setAssignmentDescription] = useState('');
                    
                      const jobs = [
                        {
                          id: "00001",
                          brandName: "Brand1",
                          subBrand: "SubBrand1",
                          flavour: "Flavour1",
                          packType: "Type1",
                          packSize: "Size 1ml",
                          packCode: "Code1",
                          deadline: "2024/01/20",
                          brief: "ViewBrief",
                          status: "Pending Upload",
                          statusVariant: "warning",
                        },
                        {
                          id: "00002",
                          brandName: "Brand2",
                          subBrand: "SubBrand2",
                          flavour: "Flavour2",
                          packType: "Type2",
                          packSize: "Size 2ml",
                          packCode: "Code2",
                          deadline: "2024/01/25",
                          brief: "ViewBrief",
                          status: "In Progress",
                          statusVariant: "info",
                        },
                        {
                          id: "00003",
                          brandName: "Brand3",
                          subBrand: "SubBrand3",
                          flavour: "Flavour3",
                          packType: "Type3",
                          packSize: "Size 3ml",
                          packCode: "Code3",
                          deadline: "2024/02/01",
                          brief: "ViewBrief",
                          status: "DraftSaved",
                          statusVariant: "secondary",
                        },
                      ];
                    
                      const handleCheckboxChange = (jobId) => {
                        setSelectedJobs((prev) => ({
                          ...prev,
                          [jobId]: !prev[jobId],
                        }));
                      };
                    
                      const handleSubmitAssignment = () => {
                        const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                    
                        if (selectedJobIds.length === 0) {
                          setErrorMessage("Please select at least 1 job to assign.");
                          setTimeout(() => setErrorMessage(""), 3000);
                          return;
                        }
                    
                        if (!selectedDesigner) {
                          setErrorMessage("Please select a designer.");
                          setTimeout(() => setErrorMessage(""), 3000);
                          return;
                        }
                    
                        // ✅ Now send data to handleJobAssign
                        handleJobAssign(selectedJobIds, selectedDesigner);
                    
                        // Reset state and close modal
                        setShowAssignModal(false);
                        setSelectedProduction('');
                        setSelectedAdditional('');
                        setSelectedJob(null);
                        setSelectedDesigner('');
                        setAssignmentDescription('');
                      };
                    
                      const handleCSVImport = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                          console.log("CSV file selected:", file.name);
                        }
                      };
                    
                      const getPriorityClass = (priority) => {
                        switch (priority.toLowerCase()) {
                          case "high":
                            return "text-danger";
                          case "medium":
                            return "text-warning";
                          case "low":
                            return "text-success";
                          default:
                            return "";
                        }
                      };
                      // ////////////////////////////////////////
                      const navigate = useNavigate();
                      const dispatch = useDispatch();
                      const location = useLocation();
                      const params = useParams();
                      const id = location.state?.id || params.id;
                      useEffect(() => {
                        console.log("Project ID:", id);
                      }, [id]);
                    
                      const { job } = useSelector((state) => state.jobs);
                      console.log(job.jobs, "all jobs");
                    
                      useEffect(() => {
                        dispatch(fetchjobs());
                      }, [dispatch]);
                    
                    
                      const handleDelete = (_id) => {
                        console.log(_id);
                        Swal.fire({
                          title: "Are you sure?",
                          text: "You won't be able to revert this!",
                          icon: "warning",
                          showCancelButton: true,
                          confirmButtonColor: "#3085d6",
                          cancelButtonColor: "#d33",
                          confirmButtonText: "Yes, delete it!",
                        }).then((result) => {
                          if (result.isConfirmed) {
                            dispatch(deletejob(_id))
                              .then(() => {
                                Swal.fire("Deleted!", "The document has been deleted.", "success");
                                dispatch(fetchjobs());
                              })
                              .catch(() => {
                                Swal.fire("Error!", "Something went wrong.", "error");
                              });
                          }
                        });
                      }
                    
                    
                      const handleUpdate = (job) => {
                        navigate(`/AddJobTracker`, { state: { job } });
                      };
                    
                      const JobDetails = (job) => {
                        navigate(`/OvervieJobsTracker`, { state: { job } });
                      }
                    
                    
                      const getStatusClass = (status) => {
                        switch (status.toLowerCase().trim()) {
                          case "in progress":
                          case "in_progress":
                            return "bg-warning text-dark";
                          case "review":
                            return "bg-info text-dark";
                          case "not started":
                            return "bg-secondary text-white";
                          case "completed":
                            return "bg-success text-white";
                          case "open":
                            return "bg-primary text-white";
                          default:
                            return "bg-light text-dark";
                        }
                      };
                    
                      const handleJobAssign = (selectedIds, assignTo) => {
                    
                        const payload = {
                          id: selectedIds,
                          assign: assignTo,
                        };
                        console.log("Assignment Payload:", payload);
                        dispatch(UpdateJobAssign(payload))
                          .then(() => {
                            // Swal.fire("Success!", "Jobs assigned successfully", "success");
                            dispatch(fetchjobs());
                          })
                          .catch(() => {
                            Swal.fire("Error!", "Something went wrong", "error");
                          });
                      };
                    
                      return (
                        <div className="card">
                          <div className="card-header d-flex align-content-center justify-content-between mt-3">
                            <h5 className="card-title mb-0">Jobs List</h5>
                            <div className="text-end">
                              {/* ✅ Assign Button always enabled, shows error if none selected */}
                              <Button
                                id="All_btn"
                                className="m-2"
                                variant="primary"
                                onClick={() => {
                                  const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                                  if (selectedJobIds.length === 0) {
                                    setErrorMessage("Please select at least 1 job to assign.");
                                    setTimeout(() => setErrorMessage(""), 3000);
                                  } else {
                                    handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                                    setShowAssignModal(true);
                                  }
                                }}
                              >
                                Assign
                              </Button>
                    
                    
                              <label className="btn btn-success m-2">
                                <i className="bi bi-upload"></i> Import CSV
                                <input
                                  type="file"
                                  accept=".csv"
                                  onChange={handleCSVImport}
                                  hidden
                                />
                              </label>
                    
                              <Link to={"/AddJobTracker"}>
                                <button id='All_btn' className="btn btn-primary">
                                  <i className="bi bi-plus"></i> Add New
                                </button>
                              </Link>
                            </div>
                          </div>
                    
                          <div className="card-body">
                            {/* ✅ Error message block */}
                            {errorMessage && (
                              <div className="alert alert-danger py-2" role="alert">
                                {errorMessage}
                              </div>
                            )}
                    
                            <div className="table-responsive">
                              <table className="table table-hover">
                                <thead>
                                  <tr>
                                    <th>
                                      <input
                                        type="checkbox"
                                        onChange={(e) => {
                                          const checked = e.target.checked;
                                          const newSelectedJobs = {};
                                          job?.jobs?.forEach((job) => {
                                            newSelectedJobs[job._id] = checked;
                                          });
                                          setSelectedJobs(newSelectedJobs);
                                        }}
                                        checked={
                                          job?.jobs?.length > 0 &&
                                          job?.jobs?.every((j) => selectedJobs[j._id])
                                        }
                                      />
                                    </th>
                    
                                    <th>JobsNo</th>
                                    <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                                    <th>Brand</th>
                                    <th>SubBrand</th>
                                    <th>Flavour</th>
                                    <th>PackType</th>
                                    <th>PackSize</th>
                                    <th>Priority</th>
                                    <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                                    <th>Assing</th>
                                    <th>TotalTime</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {job?.jobs?.slice().reverse().map((job, index) => (
                                    <tr key={job._id}>
                                      <td>
                                        <input
                                          type="checkbox"
                                          checked={selectedJobs[job._id] || false}
                                          onChange={() => handleCheckboxChange(job._id)}
                                        />
                                      </td>
                                      <td>
                                        <Link>
                                          {String(index + 1).padStart(4, '0')}
                                        </Link>
                                      </td>
                                      <td>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                                      <td>{job.brandName}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                                      <td>{job.packType}</td>
                                      <td>{job.packSize}</td>
                                      <td>
                                        <span className={getPriorityClass(job.priority)}>
                                          {job.priority}
                                        </span>
                                      </td>
                                      <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                                      <td>{job.assign}</td>
                                      <td>{job.totalTime}</td>
                                      {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                                      <td>
                                        <span
                                          className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                                        >
                                          {job.Status}
                                        </span>
                                      </td>
                                      <td className="d-flex">
                                        <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                                          <i className="bi bi-eye"></i> View
                                        </button>
                                        <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                                          <i className="bi bi-pencil"></i> Edit
                                        </button>
                                        <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                                          <i className="bi bi-trash"></i> Delete
                                        </button>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </div>
                    
                          {/* ✅ Job Assignment Modal */}
                          <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
                            <Modal.Header closeButton>
                              <Modal.Title>Assign Job</Modal.Title>
                            </Modal.Header>
                            <Modal.Body>
                              <Form>
                                <Form.Group className="mb-3">
                                  <Form.Label>Select Designer</Form.Label>
                                  <Form.Select
                                    value={selectedDesigner}
                                    onChange={(e) => setSelectedDesigner(e.target.value)}
                                  >
                                    <option value="">-- Select --</option>
                                    <option value="Production">Production</option>
                                    <option value="Designer">Designer</option>
                                  </Form.Select>
                                </Form.Group>
                    
                                <Form.Group className="mb-3">
                                  <Form.Label>Description</Form.Label>
                                  <Form.Control
                                    as="textarea"
                                    rows={3}
                                    value={assignmentDescription}
                                    onChange={(e) => setAssignmentDescription(e.target.value)}
                                    placeholder="Enter assignment details or instructions..."
                                  />
                                </Form.Group>
                              </Form>
                            </Modal.Body>
                            <Modal.Footer>
                              <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
                                Cancel
                              </Button>
                              <Button variant="primary" onClick={handleSubmitAssignment}>
                                Assign
                              </Button>
                            </Modal.Footer>
                          </Modal>
                    
                        </div>
                      );
                    }
                    
                    export default ProjectJobsTab;
                    




























                    // import axios from 'axios';
                    // import React, { useState } from 'react';
                    // import Base_Url from '../../ApiUrl/ApiUrl';
                    // import { useNavigate } from 'react-router-dom';
                    // import { toast, ToastContainer } from 'react-toastify';
                    // import 'react-toastify/dist/ReactToastify.css';
                    // function AddClientManagement() {
                    //   const navigate = useNavigate();
                    //   const [formData, setFormData] = useState({
                    //     clientName: '',
                    //     industry: '',
                    //     clientWebsite: '',
                    //     clientAddress: '',
                    //     vatNumber: '',
                    //     csrCode: '',
                    //     clientStatus: 'active',
                    //     contactNumber: '',
                    //     jobTitle: '',
                    //     email: '',
                    //     phone: '',
                    //     department: '',
                    //     salesRepresentative: '',
                    //     billingAddress: '',
                    //     billingContact: '',
                    //     billingEmail: '',
                    //     billingPhone: '',
                    //     currency: 'USD',
                    //     paymentMethod: 'bank_transfer',
                    //     shippingAddress: '',
                    //     shippingContact: '',
                    //     shippingEmail: '',
                    //     shippingPhone: '',
                    //     shippingMethod: 'standard',
                    //     specialInstruction: '',
                    //     annualRevenue: '',
                    //     creditRating: '',
                    //     bankName: '',
                    //     accountNumber: '',
                    //     fiscalYearEnd: '',
                    //     financialContact: '',
                    //     accountCode: '',
                    //     accountType: 'receivable',
                    //     openingBalance: '',
                    //     balanceDate: '',
                    //     taxCategory: 'standard',
                    //     costCenter: '',
                    //     paymentTerms: 'net30',
                    //     creditLimit: '',
                    //     notes: ''
                    //   });
                    
                    //   const handleChange = (e) => {
                    //     const { name, value } = e.target;
                    //     setFormData((prev) => ({ ...prev, [name]: value }));
                    //   };
                    
                    //   const handleSubmit = async (e) => {
                    //     e.preventDefault();
                    //     try {
                    //       const res = await axios.post(`${Base_Url}/client/createClient`, formData);
                    //       console.log('Client Submitted:', res.data);
                      
                    //       toast.success('Client created successfully!'); // optional toast
                      
                    //       // Reset the form
                    //       setFormData({
                    //         clientName: '',
                    //         industry: '',
                    //         clientWebsite: '',
                    //         clientAddress: '',
                    //         vatNumber: '',
                    //         csrCode: '',
                    //         clientStatus: 'active',
                    //         contactNumber: '',
                    //         jobTitle: '',
                    //         email: '',
                    //         phone: '',
                    //         department: '',
                    //         salesRepresentative: '',
                    //         billingAddress: '',
                    //         billingContact: '',
                    //         billingEmail: '',
                    //         billingPhone: '',
                    //         currency: 'USD',
                    //         paymentMethod: 'bank_transfer',
                    //         shippingAddress: '',
                    //         shippingContact: '',
                    //         shippingEmail: '',
                    //         shippingPhone: '',
                    //         shippingMethod: 'standard',
                    //         specialInstruction: '',
                    //         annualRevenue: '',
                    //         creditRating: '',
                    //         bankName: '',
                    //         accountNumber: '',
                    //         fiscalYearEnd: '',
                    //         financialContact: '',
                    //         accountCode: '',
                    //         accountType: 'receivable',
                    //         openingBalance: '',
                    //         balanceDate: '',
                    //         taxCategory: 'standard',
                    //         costCenter: '',
                    //         paymentTerms: 'net30',
                    //         creditLimit: '',
                    //         notes: ''
                    //       });
                      
                    //       // Navigate to clientManagement page after delay (optional)
                    //       setTimeout(() => {
                    //         navigate('/clientManagement');
                    //       }, 1000); // delay for smoother transition
                    //     } catch (err) {
                    //       console.error('Submit Error:', err);
                    //       toast.error('Failed to create client.');
                    //     }
                    //   };
                    
                    //   return (
                    //     <>
                    //     <ToastContainer/>
                    //     <div className="container mt-5">
                    //       <div className="card shadow-sm">
                    //         <div className="card-body">
                    //           <h1 className="card-title h4 mb-4">Add Company</h1>   
                    //           <form className="row g-3" onSubmit={handleSubmit}>
                    //           <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
                    //            <div className='col-md-3'>
                               
                               
                    //               <select className="form-select" name="industry" value={formData.industry} onChange={handleChange}>
                                
                    //                 <option value="Client">Client</option>
                    //                 <option value="Sup">Suppliers</option>
                    //                 <option value="Other">Other</option>
                    //               </select></div>  <div className="col-md-6"></div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Name</label>
                    //               <input type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Industry</label>
                    //               <select className="form-select" name="industry" value={formData.industry} onChange={handleChange}>
                    //                 <option value="">Select industry</option>
                    //                 <option value="manufacturing">Manufacturing</option>
                    //                 <option value="tech">Technology</option>
                    //                 <option value="retail">Retail</option>
                    //               </select>
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Website</label>
                    //               <input type="url" name="clientWebsite" value={formData.clientWebsite} onChange={handleChange} className="form-control" placeholder="https://" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Client Address</label>
                    //               <textarea className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
                    //             </div>  
                    //             <div className="col-md-6">
                    //               <label className="form-label">Tax ID/VAT Number</label>
                    //               <input type="text" name="vatNumber" value={formData.vatNumber} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">CSR Code</label>
                    //               <input type="text" name="csrCode" value={formData.csrCode} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Status</label>
                    //               <select className="form-select" name="clientStatus" value={formData.clientStatus} onChange={handleChange}>
                    //                 <option value="active">Active</option>
                    //                 <option value="inactive">Inactive</option>
                    //               </select>
                    //             </div>
                    
                    //             <h5 className="mb-3 mt-4">Primary Contact</h5>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Contact Name</label>
                    //               <input type="text" name="contactNumber" value={formData.contactNumber} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Job Title</label>
                    //               <input type="text" name="jobTitle" value={formData.jobTitle} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Email</label>
                    //               <input type="email" name="email" value={formData.email} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Phone</label>
                    //               <input type="tel" name="phone" value={formData.phone} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Department</label>
                    //               <input type="text" name="department" value={formData.department} onChange={handleChange} className="form-control" />
                    //             </div>
                    //             <div className="col-md-6">
                    //               <label className="form-label">Sales Representative</label>
                    //               <input type="text" name="salesRepresentative" value={formData.salesRepresentative} onChange={handleChange} className="form-control" />
                    //             </div>
                    //   {/* Billing Information */}
                    // <h5 className="mb-3 mt-4">Billing Information</h5>
                    // <div className="col-md-12">
                    //   <label className="form-label">Billing Address</label>
                    //   <textarea className="form-control" rows="3" name="billingAddress" value={formData.billingAddress} onChange={handleChange}></textarea>
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Billing Contact Name</label>
                    //   <input type="text" className="form-control" name="billingContact" value={formData.billingContact} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Billing Email</label>
                    //   <input type="email" className="form-control" name="billingEmail" value={formData.billingEmail} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Billing Phone</label>
                    //   <input type="tel" className="form-control" name="billingPhone" value={formData.billingPhone} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Currency</label>
                    //   <select className="form-select" name="currency" value={formData.currency} onChange={handleChange}>
                    //     <option value="USD">USD</option>
                    //     <option value="EUR">EUR</option>
                    //     <option value="GBP">GBP</option>
                    //   </select>
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Preferred Payment Method</label>
                    //   <select className="form-select" name="paymentMethod" value={formData.paymentMethod} onChange={handleChange}>
                    //     <option value="bank_transfer">Bank Transfer</option>
                    //     <option value="credit_card">Credit Card</option>
                    //     <option value="check">Check</option>
                    //   </select>
                    // </div>
                    
                    // {/* Shipping Information */}
                    // <h5 className="mb-3 mt-4">Shipping Information</h5>
                    // <div className="col-md-12">
                    //   <label className="form-label">Shipping Address</label>
                    //   <textarea className="form-control" rows="3" name="shippingAddress" value={formData.shippingAddress} onChange={handleChange}></textarea>
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Shipping Contact Name</label>
                    //   <input type="text" className="form-control" name="shippingContact" value={formData.shippingContact} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Shipping Email</label>
                    //   <input type="email" className="form-control" name="shippingEmail" value={formData.shippingEmail} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Shipping Phone</label>
                    //   <input type="tel" className="form-control" name="shippingPhone" value={formData.shippingPhone} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Preferred Shipping Method</label>
                    //   <select className="form-select" name="shippingMethod" value={formData.shippingMethod} onChange={handleChange}>
                    //     <option value="standard">Standard Ground</option>
                    //     <option value="express">Express</option>
                    //     <option value="overnight">Overnight</option>
                    //   </select>
                    // </div>
                    // <div className="col-md-12">
                    //   <label className="form-label">Special Instructions</label>
                    //   <textarea className="form-control" rows="3" name="specialInstruction" value={formData.specialInstruction} onChange={handleChange}></textarea>
                    // </div>
                    
                    // {/* Financial Information */}
                    // <h5 className="mb-3 mt-4">Financial Information</h5>
                    // <div className="col-md-6">
                    //   <label className="form-label">Annual Revenue</label>
                    //   <input type="number" className="form-control" name="annualRevenue" value={formData.annualRevenue} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Credit Rating</label>
                    //   <input type="text" className="form-control" name="creditRating" value={formData.creditRating} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Bank Name</label>
                    //   <input type="text" className="form-control" name="bankName" value={formData.bankName} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Account Number</label>
                    //   <input type="text" className="form-control" name="accountNumber" value={formData.accountNumber} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Fiscal Year End</label>
                    //   <input type="date" className="form-control" name="fiscalYearEnd" value={formData.fiscalYearEnd} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Financial Contact</label>
                    //   <input type="text" className="form-control" name="financialContact" value={formData.financialContact} onChange={handleChange} />
                    // </div>
                    
                    // {/* Ledger Information */}
                    // <h5 className="mb-3 mt-4">Ledger Information</h5>
                    // <div className="col-md-6">
                    //   <label className="form-label">Account Code</label>
                    //   <input type="text" className="form-control" name="accountCode" value={formData.accountCode} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Account Type</label>
                    //   <select className="form-select" name="accountType" value={formData.accountType} onChange={handleChange}>
                    //     <option value="receivable">Accounts Receivable</option>
                    //     <option value="payable">Accounts Payable</option>
                    //   </select>
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Opening Balance</label>
                    //   <input type="number" className="form-control" name="openingBalance" value={formData.openingBalance} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Balance Date</label>
                    //   <input type="date" className="form-control" name="balanceDate" value={formData.balanceDate} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Tax Category</label>
                    //   <select className="form-select" name="taxCategory" value={formData.taxCategory} onChange={handleChange}>
                    //     <option value="standard">Standard Rate</option>
                    //     <option value="reduced">Reduced Rate</option>
                    //     <option value="zero">Zero Rate</option>
                    //   </select>
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Cost Center</label>
                    //   <input type="text" className="form-control" name="costCenter" value={formData.costCenter} onChange={handleChange} />
                    // </div>
                    
                    // {/* Additional Information */}
                    // <h5 className="mb-3 mt-4">Additional Information</h5>
                    // <div className="col-md-6">
                    //   <label className="form-label">Payment Terms</label>
                    //   <select className="form-select" name="paymentTerms" value={formData.paymentTerms} onChange={handleChange}>
                    //     <option value="net30">Net 30</option>
                    //     <option value="net60">Net 60</option>
                    //     <option value="net90">Net 90</option>
                    //   </select>
                    // </div>
                    // <div className="col-md-6">
                    //   <label className="form-label">Credit Limit</label>
                    //   <input type="number" className="form-control" name="creditLimit" value={formData.creditLimit} onChange={handleChange} />
                    // </div>
                    // <div className="col-md-12">
                    //   <label className="form-label">Notes</label>
                    //   <textarea className="form-control" rows="3" name="notes" value={formData.notes} onChange={handleChange} placeholder="Additional notes"></textarea>
                    // </div>
                    
                    
                    //             <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                    //               <button type="button" className="btn btn-outline-secondary">Cancel</button>
                    //               <button type="submit" id="btn-All" className="btn btn-dark">Create </button>
                    //             </div>
                    //           </form>
                    //         </div>
                    //       </div>
                    //     </div>
                    //     </>
                       
                    //   );
                    // }
                    
                    // export default AddClientManagement;
                    
                    





                    // ////////////
                    import React, { useState } from 'react';
                    import Base_Url from '../../ApiUrl/ApiUrl';
                    import { useLocation, useNavigate, useParams } from 'react-router-dom';
                    import { toast, ToastContainer } from 'react-toastify';
                    import 'react-toastify/dist/ReactToastify.css';
                    import { useDispatch } from 'react-redux';
                    import { createClients } from '../../../redux/slices/ClientSlice';
                    import "react-toastify/dist/ReactToastify.css";
                    
                    
                    function AddClientManagement() {
                      const navigate = useNavigate();
                      const dispatch = useDispatch();
                      const { id } = useParams(); // for edit mode
                      const location = useLocation();
                      const { client } = location.state || {};
                      console.log(client);
                    
                      // Initial form state
                      const [formData, setFormData] = useState({
                        clientName: '',
                        industry: '',
                        website: '',
                        clientAddress: '',
                        TaxID_VATNumber: '',
                        CSRCode: '',
                        Status: 'Active'
                      });
                    
                      // Contact persons state
                      const [contactPersons, setContactPersons] = useState([
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    
                      // Billing information state
                      const [billingInformation, setBillingInformation] = useState([
                        {
                          billingAddress: '',
                          billingContactName: '',
                          billingEmail: '',
                          billingPhone: '',
                          currency: '',
                          preferredPaymentMethod: ''
                        }
                      ]);
                      // Shipping information state
                      const [shippingInformation, setShippingInformation] = useState([
                        {
                          shippingAddress: '',
                          shippingContactName: '',
                          shippingEmail: '',
                          shippingPhone: '',
                          preferredShippingMethod: '',
                          specialInstructions: ''
                        }
                      ]);
                      // Financial information state
                      const [financialInformation, setFinancialInformation] = useState([
                        {
                          annualRevenue: '',
                          creditRating: '',
                          bankName: '',
                          accountNumber: '',
                          fiscalYearEnd: '',
                          financialContact: ''
                        }
                      ]);
                    
                      // Ledger information state
                      const [ledgerInformation, setLedgerInformation] = useState([
                        {
                          accountCode: '',
                          accountType: '',
                          openingBalance: '',
                          balanceDate: '',
                          taxCategory: '',
                          costCenter: ''
                        }
                      ]);
                    
                      // Additional information state
                      const [additionalInformation, setAdditionalInformation] = useState({
                        paymentTerms: '',
                        creditLimit: '',
                        notes: ''
                      });
                    
                    
                    
                      
                      // Handle basic form field changes
                      const handleChange = (e) => {
                        const { name, value } = e.target;
                        setFormData(prev => ({
                          ...prev,
                          [name]: value
                        }));
                      };
                    
                      // Handle contact person changes
                      const handleContactChange = (index, e) => {
                        const { name, value } = e.target;
                        const updatedContacts = [...contactPersons];
                        updatedContacts[index] = {
                          ...updatedContacts[index],
                          [name]: value
                        };
                        setContactPersons(updatedContacts);
                      };
                    
                      // Handle billing information changes
                      const handleBillingChange = (index, e) => {
                        const { name, value } = e.target;
                        const updatedBilling = [...billingInformation];
                        updatedBilling[index] = {
                          ...updatedBilling[index],
                          [name]: value
                        };
                        setBillingInformation(updatedBilling);
                      };
                    
                      // Handle shipping information changes
                      const handleShippingChange = (index, e) => {
                        const { name, value } = e.target;
                        const updatedShipping = [...shippingInformation];
                        updatedShipping[index] = {
                          ...updatedShipping[index],
                          [name]: value
                        };
                        setShippingInformation(updatedShipping);
                      };
                    
                      // Handle financial information changes
                      const handleFinancialChange = (index, e) => {
                        const { name, value } = e.target;
                        const updatedFinancial = [...financialInformation];
                        updatedFinancial[index] = {
                          ...updatedFinancial[index],
                          [name]: value
                        };
                        setFinancialInformation(updatedFinancial);
                      };
                    
                      // Handle ledger information changes
                      const handleLedgerChange = (index, e) => {
                        const { name, value } = e.target;
                        const updatedLedger = [...ledgerInformation];
                        updatedLedger[index] = {
                          ...updatedLedger[index],
                          [name]: value
                        };
                        setLedgerInformation(updatedLedger);
                      };
                    
                    
                      const handleAdditionalChange = (e) => {
                        const { name, value } = e.target;
                        setAdditionalInformation(prev => ({
                          ...prev,
                          [name]: value
                        }));
                      };
                    
                      // Handle form submission
                    //   const handleSubmit = async (e) => {
                    //     e.preventDefault();
                    
                    //     const fullData = {
                    //       ...formData,
                    //       contactPersons,
                    //       billingInformation,
                    //       shippingInformation,
                    //       financialInformation,
                    //       ledgerInformation,
                    //       additionalInformation
                    //     };
                    
                    //     console.log('Full Data Object:', fullData);
                    //  dispatch(createClients(fullData))
                    //     if (id) {
                    //       dispatch(createClients(fullData))
                    //         .unwrap()
                    //         .then(() => {
                    //           toast.success("Project updated successfully!");
                    //           // navigate("/plantMachinery");
                    //         })
                    //         .catch(() => {
                    //           toast.error("Failed to update project!");
                    //         });
                    //     } else {
                    //           dispatch(createClients(fullData))
                    //         .unwrap()
                    //         .then(() => {
                    //           toast.success("Project created successfully!");
                    //           // navigate("/projectList");
                    //         })
                    //         .catch(() => {
                    //           toast.error("Error creating project");
                    //         });
                    //     }
                    //   };
                    
                    
                    
                      const handleSubmit = async (e) => {
                        e.preventDefault();
                    
                        const fullData = {
                          ...formData,
                          contactPersons,
                          billingInformation,
                          shippingInformation,
                          financialInformation,
                          ledgerInformation,
                          additionalInformation
                        };
                              dispatch(createClients(fullData))
                            .unwrap()
                            .then(() => {
                              toast.success("Project created successfully!");
                              navigate("/clientManagement");
                            })
                            .catch(() => {
                              toast.error("Error creating project");
                            });
                        
                      };
                    
                    
                      return (
                        <>
                          <ToastContainer />
                          <div className="container mt-5">
                            <div className="card shadow-sm">
                              <div className="card-body">
                                <h1 className="card-title h4 mb-4">Add Company</h1>
                                <form className="row g-3" onSubmit={handleSubmit}>
                                  <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
                                  <div className="col-md-6"></div>
                                  <div className="col-md-6">
                                    <label className="form-label">Name</label>
                                    <input type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
                                  </div>
                                  <div className="col-md-6">
                                    <label className="form-label">Industry</label>
                                    <select className="form-select" name="industry" value={formData.industry} onChange={handleChange}>
                                      <option value="">Select industry</option>
                                      <option value="manufacturing">Manufacturing</option>
                                      <option value="tech">Technology</option>
                                      <option value="retail">Retail</option>
                                    </select>
                                  </div>
                                  <div className="col-md-6">
                                    <label className="form-label">Website</label>
                                    <input type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
                                  </div>
                                  <div className="col-md-6">
                                    <label className="form-label">Client Address</label>
                                    <textarea className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
                                  </div>
                                  <div className="col-md-6">
                                    <label className="form-label">Tax ID/VAT Number</label>
                                    <input type="text" name="TaxID_VATNumber" value={formData.TaxID_VATNumber} onChange={handleChange} className="form-control" />
                                  </div>
                                  <div className="col-md-6">
                                    <label className="form-label">CSR Code</label>
                                    <input type="text" name="CSRCode" value={formData.CSRCode} onChange={handleChange} className="form-control" />
                                  </div>
                                  <div className="col-md-6">
                                    <label className="form-label">Status</label>
                                    <select className="form-select" name="Status" value={formData.Status} onChange={handleChange}>
                                      <option value="active">Active</option>
                                      <option value="inactive">Inactive</option>
                                    </select>
                                  </div>
                                  <div className='col-md-12 row'>
                                    <h5 className="mb-3 mt-4">Contact Persons</h5>
                    
                                    {contactPersons.map((contact, index) => (
                                      <div className="border p-3 mb-3" key={index}>
                                        <div className="row">
                                          <div className="col-md-6">
                                            <label className="form-label">Contact Name</label>
                                            <input
                                              type="text"
                                              name="contactName"
                                              value={contact.contactName}
                                              onChange={(e) => handleContactChange(index, e)}
                                              className="form-control"
                                              placeholder="Enter Contact Name"
                                            />
                                          </div>
                    
                                          <div className="col-md-6">
                                            <label className="form-label">Job Title</label>
                                            <input
                                              type="text"
                                              name="jobTitle"
                                              value={contact.jobTitle}
                                              onChange={(e) => handleContactChange(index, e)}
                                              className="form-control"
                                              placeholder="Enter Job Title"
                                            />
                                          </div>
                    
                                          <div className="col-md-6">
                                            <label className="form-label">Email</label>
                                            <input
                                              type="email"
                                              name="email"
                                              value={contact.email}
                                              onChange={(e) => handleContactChange(index, e)}
                                              className="form-control"
                                              placeholder="Enter Email"
                                            />
                                          </div>
                    
                                          <div className="col-md-6">
                                            <label className="form-label">Phone</label>
                                            <input
                                              type="tel"
                                              name="phone"
                                              value={contact.phone}
                                              onChange={(e) => handleContactChange(index, e)}
                                              className="form-control"
                                              placeholder="Enter Phone"
                                            />
                                          </div>
                    
                                          <div className="col-md-6">
                                            <label className="form-label">Department</label>
                                            <input
                                              type="text"
                                              name="department"
                                              value={contact.department}
                                              onChange={(e) => handleContactChange(index, e)}
                                              className="form-control"
                                              placeholder="Enter Department"
                                            />
                                          </div>
                    
                                          <div className="col-md-6">
                                            <label className="form-label">Sales Representative</label>
                                            <input
                                              type="text"
                                              name="salesRepresentative"
                                              value={contact.salesRepresentative}
                                              onChange={(e) => handleContactChange(index, e)}
                                              className="form-control"
                                              placeholder="Enter Sales Representative"
                                            />
                                          </div>
                    
                                          <div className="col-md-12 mt-2 d-flex justify-content-end">
                                            {contactPersons.length > 1 && (
                                              <button
                                                type="button"
                                                className="btn btn-danger btn-sm"
                                                onClick={() => {
                                                  const updatedContacts = [...contactPersons];
                                                  updatedContacts.splice(index, 1);
                                                  setContactPersons(updatedContacts);
                                                }}
                                              >
                                                Remove
                                              </button>
                                            )}
                                          </div>
                                        </div>
                                      </div>
                                    ))}
                    
                                    {/* Add More Button */}
                                    <div className="mb-3">
                                      <button
                                        type="button"
                                        className="btn btn-primary"
                                        onClick={() => {
                                          setContactPersons([
                                            ...contactPersons,
                                            {
                                              contactName: '',
                                              jobTitle: '',
                                              email: '',
                                              phone: '',
                                              department: '',
                                              salesRepresentative: ''
                                            }
                                          ]);
                                        }}
                                      >
                                        + Add Another Contact
                                      </button>
                                    </div>
                                  </div>
                    
                                  {/* Billing Information */}
                                  <div className='col-md-12 row'>
                                    <h5 className="mb-3 mt-4">Billing Information</h5>
                                    <div className="col-md-12">
                                      <label className="form-label">Billing Address</label>
                                      <textarea className="form-control" rows="3" name="billingAddress" value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Billing Contact Name</label>
                                      <input type="text" className="form-control" name="billingContactName" value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Billing Email</label>
                                      <input type="email" className="form-control" name="billingEmail" value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Billing Phone</label>
                                      <input type="tel" className="form-control" name="billingPhone" value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Currency</label>
                                      <select className="form-select" name="currency" value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                                        <option value="USD">USD</option>
                                        <option value="EUR">EUR</option>
                                        <option value="GBP">GBP</option>
                                      </select>
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Preferred Payment Method</label>
                                      <select className="form-select" name="preferredPaymentMethod" value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                                        <option value="">Select Payment Method</option>
                                        <option value="BankTransfer">BankTransfer</option>
                                        <option value="CreditCard">CreditCard</option>
                                        <option value="Check">Check</option>
                                      </select>
                                    </div>
                    
                                    {/* Shipping Information */}
                                    <h5 className="mb-3 mt-4">Shipping Information</h5>
                                    <div className="col-md-12">
                                      <label className="form-label">Shipping Address</label>
                                      <textarea className="form-control" rows="3" name="shippingAddress" value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Shipping Contact Name</label>
                                      <input type="text" className="form-control" name="shippingContactName" value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Shipping Email</label>
                                      <input type="email" className="form-control" name="shippingEmail" value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Shipping Phone</label>
                                      <input type="tel" className="form-control" name="shippingPhone" value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Preferred Shipping Method</label>
                                      <select className="form-select" name="preferredShippingMethod" value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                                        <option value="">Select Shipping Method</option>
                                        <option value="Standard">Standard</option>
                                        <option value="Express">Express</option>
                                        <option value="Overnight">Overnight</option>
                                        <option value="Ground">Ground</option>
                                      </select>
                                    </div>
                                    <div className="col-md-12">
                                      <label className="form-label">Special Instructions</label>
                                      <textarea className="form-control" rows="3" name="specialInstructions" value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                                    </div>
                    
                                    {/* Financial Information */}
                                    <h5 className="mb-3 mt-4">Financial Information</h5>
                                    <div className="col-md-6">
                                      <label className="form-label">Annual Revenue</label>
                                      <input type="number" className="form-control" name="annualRevenue" value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Credit Rating</label>
                                      <input type="text" className="form-control" name="creditRating" value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Bank Name</label>
                                      <input type="text" className="form-control" name="bankName" value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Account Number</label>
                                      <input type="text" className="form-control" name="accountNumber" value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Fiscal Year End</label>
                                      <input type="date" className="form-control" name="fiscalYearEnd" value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Financial Contact</label>
                                      <input type="text" className="form-control" name="financialContact" value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                                    </div>
                    
                                    {/* Ledger Information */}
                                    <h5 className="mb-3 mt-4">Ledger Information</h5>
                                    <div className="col-md-6">
                                      <label className="form-label">Account Code</label>
                                      <input type="text" className="form-control" name="accountCode" value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Account Type</label>
                                      <select className="form-select" name="accountType" value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                                        <option value="">Select Account Type</option>
                                        <option value="AccountsReceivable">AccountsReceivable</option>
                                        <option value="AccountsPayable">AccountsPayable</option>
                                      </select>
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Opening Balance</label>
                                      <input type="number" className="form-control" name="openingBalance" value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Balance Date</label>
                                      <input type="date" className="form-control" name="balanceDate" value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Tax Category</label>
                                      <select className="form-select" name="taxCategory" value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                                        <option value="standard">Standard Rate</option>
                                        <option value="reduced">Reduced Rate</option>
                                        <option value="zero">Zero Rate</option>
                                      </select>
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Cost Center</label>
                                      <input type="text" className="form-control" name="costCenter" value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                                    </div>
                    
                                    {/* Additional Information */}
                                    <h5 className="mb-3 mt-4">Additional Information</h5>
                                    <div className="col-md-6">
                                      <label className="form-label">Payment Terms</label>
                                      <select className="form-select" name="paymentTerms" value={additionalInformation.paymentTerms} onChange={handleAdditionalChange}>
                                        <option value="net30">Net 30</option>
                                        <option value="net60">Net 60</option>
                                        <option value="net90">Net 90</option>
                                      </select>
                                    </div>
                                    <div className="col-md-6">
                                      <label className="form-label">Credit Limit</label>
                                      <input type="number" className="form-control" name="creditLimit" value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                                    </div>
                                  </div>
                                  <div className="col-md-12">
                                    <label className="form-label">Notes</label>
                                    <textarea className="form-control" rows="3" name="notes" value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
                                  </div>
                    
                    
                                  <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                                    <button type="button" className="btn btn-outline-secondary">Cancel</button>
                                    <button type="submit" id="btn-All" className="btn btn-dark">Create </button>
                                  </div>
                                </form>
                              </div>
                            </div>
                          </div>
                        </>
                    
                      );
                    }
                    
                    export default AddClientManagement;
                    
                    
                    















                    
// Api complete code api working rol ok 
// import React, { useState } from "react";
// import { useDispatch } from "react-redux";
// import { Link, useNavigate } from "react-router-dom";
// import { usersLogin } from "../../redux/slices/userSlice";
// import axios from "axios";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";

// const Login = () => {
//   const navigate = useNavigate();
//   const dispatch = useDispatch();

//   const [formData, setFormData] = useState({
//     email: "",
//     password: "",
//   });

//   const [loading, setLoading] = useState(false);

//   const handleChange = (e) => {
//     setFormData({
//       ...formData,
//       [e.target.name]: e.target.value,
//     });
//   };

//   const handleLogin = async (e) => {
//     e.preventDefault();
//     const { email, password } = formData;

//     try {
//       setLoading(true);
//       const res = await axios.post("https://xt2cpwt7-8000.inc1.devtunnels.ms/api/user/login", { email, password });
//       console.log("API Response:", res.data);

//       const { role, token } = res.data.user;
//       // if (!role) {
//       //   alert("Role is undefined in the response.");
//       //   return;
//       // }
//       localStorage.setItem("authToken", token);
//       localStorage.setItem("userRole", role);
        
//           toast.success("Project created successfully!");
//       if (role === "admin") {
//         navigate("/admin/dashboard");
//       } else if (role === "productionManager") {
//         navigate("/production/dashboard");
//       } else if (role === "employee") {
//         navigate("/employee/tasks");
//       } else if (role === "client") {
//         navigate("/client/overview");
//       } else {
//         navigate("/dashboard");
//       }
//     } catch (error) {
//        toast.error(res.data.message ||"Error Login");
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <div className="auth-container d-flex justify-content-center align-items-center min-vh-100 bg-light">
//       <main className="w-100" style={{ maxWidth: "550px" }}>
//         <div className="login-container bg-white p-4 rounded shadow-sm">
//           <h4 className="text-center mb-4">Welcome Back</h4>

//           <form onSubmit={handleLogin}>
//             <div className="form-floating mb-3">
//               <input
//                 type="email"
//                 name="email"
//                 className="form-control"
//                 id="email"
//                 value={formData.email}
//                 onChange={handleChange}
//                 required
//               />
//               <label htmlFor="email">Email address</label>
//             </div>

//             <div className="form-floating mb-3">
//               <input
//                 type="password"
//                 name="password"
//                 className="form-control"
//                 id="password"
//                 placeholder="Password"
//                 value={formData.password}
//                 onChange={handleChange}
//                 autoComplete="off"
//                 required
//               />
//               <label htmlFor="password">Password</label>
//             </div>

//             <div className="d-flex justify-content-between mb-4">
//               <div className="form-check">
//                 <input className="form-check-input" type="checkbox" id="remember" />
//                 <label className="form-check-label text-secondary" htmlFor="remember">
//                   Remember me
//                 </label>
//               </div>
//               <a href="#" className="text-decoration-none text-secondary">
//                 Forgot password?
//               </a>
//             </div>

//             <button
//               type="submit"
//               className="btn w-100 text-white"
//               id="All_btn"
//               style={{ padding: "10px", borderRadius: "5px" }}
//               disabled={loading}
//             >
//               {loading ? "Logging in..." : "Log In"}
//             </button>

//             <p className="text-center mt-3 mb-0">
//               <span className="text-secondary">Don't have an account?</span>
//               <Link to="/signup" className="text-decoration-none ms-1">
//                 Sign up
//               </Link>
//             </p>

//             <button
//               className="social-signup btn w-100 mb-3 d-flex align-items-center justify-content-center"
//               style={{
//                 backgroundColor: "#ffffff",
//                 color: "#5F6368",
//                 border: "1px solid #dadce0",
//                 fontSize: "14px",
//                 fontWeight: "500",
//                 padding: "10px 0",
//                 borderRadius: "4px",
//                 transition: "all 0.3s ease",
//                 marginTop: "20px",
//               }}
//               type="button"
//             >
//               <i className="fab fa-google me-2" style={{ fontSize: "18px", color: "#4285F4" }} />
//               Continue with Google
//             </button>
//           </form>
//         </div>
//       </main>
//     </div>
//   );
// };

// export default Login;

                    
                    
                    
                    
                    
                    














                    import React, { useState } from 'react';
                    import UserRoleModal from './UserRoleModal';
                    import { FaEdit, FaTrashAlt } from 'react-icons/fa';
                    import { Link } from 'react-router-dom';
                    
                    function UserRoles() {
                      const [users, setUsers] = useState([
                        {
                          id: 1,
                          name: 'John Smith',
                          email: 'john.smith@example.com',
                          role: 'Admin',
                          status: 'Active',
                          permissions: 'Full Access'
                        },
                        {
                          id: 2,
                          name: 'Sarah Johnson',
                          email: 'sarah.j@example.com',
                          role: 'Manager',
                          status: 'Active',
                          permissions: 'Limited Access'
                        },
                        {
                          id: 3,
                          name: 'Michael Brown',
                          email: 'm.brown@example.com',
                          role: 'Designer',
                          status: 'Pending',
                          permissions: 'Design Tools Only'
                        }
                      ]);
                    
                      const [searchTerm, setSearchTerm] = useState('');
                      const [currentPage, setCurrentPage] = useState(1);
                      const itemsPerPage = 12;
                    
                      // Filter users based on search term
                      const filteredUsers = users.filter(user =>
                        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                        user.email.toLowerCase().includes(searchTerm.toLowerCase())
                      );
                    
                      // Calculate pagination
                      const indexOfLastItem = currentPage * itemsPerPage;
                      const indexOfFirstItem = indexOfLastItem - itemsPerPage;
                      const currentUsers = filteredUsers.slice(indexOfFirstItem, indexOfLastItem);
                      const totalPages = Math.ceil(filteredUsers.length / itemsPerPage);
                    
                      const handleSearch = (e) => {
                        setSearchTerm(e.target.value);
                        setCurrentPage(1);
                      };
                    
                      const handlePageChange = (pageNumber) => {
                        setCurrentPage(pageNumber);
                      };
                    
                      const [showModal, setShowModal] = useState(false);
                      const [editingUser, setEditingUser] = useState(null);
                    
                      const handleEditUser = (userId) => {
                        const userToEdit = users.find(user => user.id === userId);
                        setEditingUser(userToEdit);
                        setShowModal(true);
                      };
                    
                      const handleDeleteUser = (userId) => {
                        if (window.confirm('Are you sure you want to delete this user?')) {
                          setUsers(users.filter(user => user.id !== userId));
                        }
                      };
                    
                    
                      return (
                        <div className=" p-4 m-3" style={{backgroundColor:"white",borderRadius:"10px",}}>
                          <div className="d-flex justify-content-between align-items-center mb-4">
                            <div className="d-flex gap-2 align-items-center">
                              <input
                                type="text"
                                className="form-control"
                                placeholder="Search users..."
                                value={searchTerm}
                                onChange={handleSearch}
                                style={{ width: '200px' }}
                              />
                              <button className="btn btn-outline-secondary">All Roles</button>
                            </div>
                           <Link to={"/UserRoleModal"}> <button id="All_btn" className="btn btn-dark">
                              + Add User
                            </button></Link>
                          </div>
                    
                          <div className="card shadow-sm">
                            <div className="card-body p-0">
                              <div className="table-responsive">
                                <table className="table table-hover mb-0">
                                  <thead>
                                    <tr>
                                      <th>User</th>
                                      <th>Role</th>
                                      <th>Status</th>
                                      <th>Permissions</th>
                                      <th>Actions</th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    {currentUsers.map(user => (
                                      <tr key={user.id}>
                                        <td>
                                          <div className="d-flex align-items-center">
                                            <div className="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center me-2" style={{ width: '32px', height: '32px' }}>
                                              {user.name.charAt(0)}
                                            </div>
                                            <div>
                                              <div className="fw-semibold">{user.name}</div>
                                              <div className="text-muted small">{user.email}</div>
                                            </div>
                                          </div>
                                        </td>
                                        <td>
                                          <span className={`badge ${user.role === 'Admin' ? 'text-bg-dark' : user.role === 'Manager' ? 'text-bg-primary' : 'text-bg-info'}`}>
                                            {user.role}
                                          </span>
                                        </td>
                                        <td>
                                          <span className={`badge ${user.status === 'Active' ? 'text-bg-success' : 'text-bg-warning'}`}>
                                            {user.status}
                                          </span>
                                        </td>
                                        <td>{user.permissions}</td>
                                        <td>
                                          <div className="d-flex gap-2">
                                            <button
                                              className="btn btn-sm btn-outline-secondary"
                                              onClick={() => handleEditUser(user.id)}
                                            >
                                              <FaEdit />
                                            </button>
                                            <button
                                              className="btn btn-sm btn-outline-danger"
                                              onClick={() => handleDeleteUser(user.id)}
                                            >
                                              <FaTrashAlt />
                                            </button>
                                          </div>
                                        </td>
                                      </tr>
                                    ))}
                                  </tbody>
                                </table>
                              </div>
                            </div>
                          </div>
                    
                          <div className="d-flex justify-content-between align-items-center mt-3">
                            <div className="text-muted small">
                              Showing {indexOfFirstItem + 1} to {Math.min(indexOfLastItem, filteredUsers.length)} of {filteredUsers.length} entries
                            </div>
                            <nav>
                              <ul className="pagination mb-0">
                                <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                                  <button className="page-link" onClick={() => handlePageChange(currentPage - 1)}>Previous</button>
                                </li>
                                {Array.from({ length: totalPages }, (_, i) => i + 1).map(number => (
                                  <li key={number} className={`page-item ${currentPage === number ? 'active' : ''}`}>
                                    <button className="page-link" onClick={() => handlePageChange(number)}>{number}</button>
                                  </li>
                                ))}
                                <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                                  <button className="page-link" onClick={() => handlePageChange(currentPage + 1)}>Next</button>
                                </li>
                              </ul>
                            </nav>
                          </div>
                    
                    
                     
                        </div>
                      );
                    }
                    
                    export default UserRoles;
                    














                    import React, { useEffect, useState } from 'react';
                    import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
                    import { Modal, Form, Button } from 'react-bootstrap';
                    import { useDispatch, useSelector } from 'react-redux';
                    import { deletejob, fetchjobs, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
                    import Swal from 'sweetalert2';
                    
                    function ProjectJobsTab() {
                      const location = useLocation();
                      const params = useParams();
                      const id = location.state?.id || params.id;
                      console.log("hello me project id", id);
                    
                    
                    
                      const [selectedProduction, setSelectedProduction] = useState('');
                      const [selectedAdditional, setSelectedAdditional] = useState('');
                      const [selectedJob, setSelectedJob] = useState(null);
                      const [attachedFile, setAttachedFile] = useState(null);
                      const [selectedJobs, setSelectedJobs] = useState({});
                      const [errorMessage, setErrorMessage] = useState('');
                    
                      const [showAssignModal, setShowAssignModal] = useState(false);
                      const [selectedDesigner, setSelectedDesigner] = useState('');
                      const [assignmentDescription, setAssignmentDescription] = useState('');
                    
                      const jobs = [
                        {
                          id: "00001",
                          brandName: "Brand1",
                          subBrand: "SubBrand1",
                          flavour: "Flavour1",
                          packType: "Type1",
                          packSize: "Size 1ml",
                          packCode: "Code1",
                          deadline: "2024/01/20",
                          brief: "ViewBrief",
                          status: "Pending Upload",
                          statusVariant: "warning",
                        },
                        {
                          id: "00002",
                          brandName: "Brand2",
                          subBrand: "SubBrand2",
                          flavour: "Flavour2",
                          packType: "Type2",
                          packSize: "Size 2ml",
                          packCode: "Code2",
                          deadline: "2024/01/25",
                          brief: "ViewBrief",
                          status: "In Progress",
                          statusVariant: "info",
                        },
                        {
                          id: "00003",
                          brandName: "Brand3",
                          subBrand: "SubBrand3",
                          flavour: "Flavour3",
                          packType: "Type3",
                          packSize: "Size 3ml",
                          packCode: "Code3",
                          deadline: "2024/02/01",
                          brief: "ViewBrief",
                          status: "DraftSaved",
                          statusVariant: "secondary",
                        },
                      ];
                    
                      const handleCheckboxChange = (jobId) => {
                        setSelectedJobs((prev) => ({
                          ...prev,
                          [jobId]: !prev[jobId],
                        }));
                      };
                    
                      const handleSubmitAssignment = () => {
                        const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                    
                        if (selectedJobIds.length === 0) {
                          setErrorMessage("Please select at least 1 job to assign.");
                          setTimeout(() => setErrorMessage(""), 3000);
                          return;
                        }
                    
                        if (!selectedDesigner) {
                          setErrorMessage("Please select a designer.");
                          setTimeout(() => setErrorMessage(""), 3000);
                          return;
                        }
                    
                        // ✅ Now send data to handleJobAssign
                        handleJobAssign(selectedJobIds, selectedDesigner);
                    
                        // Reset state and close modal
                        setShowAssignModal(false);
                        setSelectedProduction('');
                        setSelectedAdditional('');
                        setSelectedJob(null);
                        setSelectedDesigner('');
                        setAssignmentDescription('');
                      };
                    
                      const handleCSVImport = (event) => {
                        const file = event.target.files[0];
                        if (file) {
                          console.log("CSV file selected:", file.name);
                        }
                      };
                    
                      const getPriorityClass = (priority) => {
                        switch (priority.toLowerCase()) {
                          case "high":
                            return "text-danger";
                          case "medium":
                            return "text-warning";
                          case "low":
                            return "text-success";
                          default:
                            return "";
                        }
                      };
                      // ////////////////////////////////////////
                      const navigate = useNavigate();
                      const dispatch = useDispatch();
                      // const location = useLocation();
                      // const params = useParams();
                      // const id = location.state?.id || params.id;
                      useEffect(() => {
                        console.log("Project ID:", id);
                      }, [id]);
                    
                    
                      // ///
                      const { job } = useSelector((state) => state.jobs);
                      console.log(job.jobs, "all jobs");
                    
                      useEffect(() => {
                        dispatch(fetchjobs());
                      }, [dispatch]);
                    
                    
                      const handleDelete = (_id) => {
                        console.log(_id);
                        Swal.fire({
                          title: "Are you sure?",
                          text: "You won't be able to revert this!",
                          icon: "warning",
                          showCancelButton: true,
                          confirmButtonColor: "#3085d6",
                          cancelButtonColor: "#d33",
                          confirmButtonText: "Yes, delete it!",
                        }).then((result) => {
                          if (result.isConfirmed) {
                            dispatch(deletejob(_id))
                              .then(() => {
                                Swal.fire("Deleted!", "The document has been deleted.", "success");
                                dispatch(fetchjobs());
                              })
                              .catch(() => {
                                Swal.fire("Error!", "Something went wrong.", "error");
                              });
                          }
                        });
                      }
                    
                    
                      const handleUpdate = (job) => {
                        navigate(`/AddJobTracker`, { state: { job } });
                      };
                    
                      const JobDetails = (job) => {
                        navigate(`/OvervieJobsTracker`, { state: { job } });
                      }
                    
                    
                    const getStatusClass = (status) => {
                      switch (status.toLowerCase().trim()) {
                        case "in progress":
                        case "in_progress":
                          return "bg-warning text-dark";
                        case "review":
                          return "bg-info text-dark";
                        case "not started":
                          return "bg-secondary text-white";
                        case "completed":
                          return "bg-success text-white";
                        case "open":
                          return "bg-primary text-white";
                        case "cancelled":
                          return "bg-dark text-white";
                        default:
                          return "bg-light text-dark";
                      }
                    };
                    
                      const handleJobAssign = (selectedIds, assignTo) => {
                    
                        const payload = {
                          id: selectedIds,
                          assign: assignTo,
                        };
                        console.log("Assignment Payload:", payload);
                        dispatch(UpdateJobAssign(payload))
                          .then(() => {
                            // Swal.fire("Success!", "Jobs assigned successfully", "success");
                            dispatch(fetchjobs());
                          })
                          .catch(() => {
                            Swal.fire("Error!", "Something went wrong", "error");
                          });
                      };
                    
                      return (
                        <div className="card">
                          <div className="card-header d-flex align-content-center justify-content-between mt-3">
                            <h5 className="card-title mb-0">Jobs List</h5>
                            <div className="text-end">
                              {/* ✅ Assign Button always enabled, shows error if none selected */}
                              <Button
                                id="All_btn"
                                className="m-2"
                                variant="primary"
                                onClick={() => {
                                  const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                                  if (selectedJobIds.length === 0) {
                                    setErrorMessage("Please select at least 1 job to assign.");
                                    setTimeout(() => setErrorMessage(""), 3000);
                                  } else {
                                    handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                                    setShowAssignModal(true);
                                  }
                                }}
                              >
                                Assign
                              </Button>
                    
                    
                              <label className="btn btn-success m-2">
                                <i className="bi bi-upload"></i> Import CSV
                                <input
                                  type="file"
                                  accept=".csv"
                                  onChange={handleCSVImport}
                                  hidden
                                />
                              </label>
                    
                              <Link
                                to="/AddJobTracker"
                                state={{ id }} // ID pass kar rahe hain yahan
                              >
                                <button id="All_btn" className="btn btn-primary">
                                  <i className="bi bi-plus"></i> Add Job
                                </button>
                              </Link>
                            </div>
                          </div>
                    
                          <div className="card-body">
                            {/* ✅ Error message block */}
                            {errorMessage && (
                              <div className="alert alert-danger py-2" role="alert">
                                {errorMessage}
                              </div>
                            )}
                    
                            <div className="table-responsive">
                              <table className="table table-hover">
                                <thead>
                                  <tr>
                                    <th>
                                      <input
                                        type="checkbox"
                                        onChange={(e) => {
                                          const checked = e.target.checked;
                                          const newSelectedJobs = {};
                                          job?.jobs?.forEach((job) => {
                                            newSelectedJobs[job._id] = checked;
                                          });
                                          setSelectedJobs(newSelectedJobs);
                                        }}
                                        checked={
                                          job?.jobs?.length > 0 &&
                                          job?.jobs?.every((j) => selectedJobs[j._id])
                                        }
                                      />
                                    </th>
                                    <th>JobsNo</th>
                                    <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                                    <th>Brand</th>
                                    <th>SubBrand</th>
                                    <th>Flavour</th>
                                    <th>PackType</th>
                                    <th>PackSize</th>
                                    <th>Priority</th>
                                    <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                                    <th>Assing</th>
                                    <th>TotalTime</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {job?.jobs?.slice().reverse().map((job, index) => (
                                    <tr key={job._id}>
                                      <td>
                                        <input
                                          type="checkbox"
                                          checked={selectedJobs[job._id] || false}
                                          onChange={() => handleCheckboxChange(job._id)}
                                        />
                                      </td>
                                      <td>
                                        <Link>
                                          {String(index + 1).padStart(4, '0')}
                                        </Link>
                                      </td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.brandName}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.packType}</td>
                                      <td style={{ whiteSpace: 'nowrap' }}>{job.packSize}</td>
                                      <td>
                                        <span className={getPriorityClass(job.priority)}>
                                          {job.priority}
                                        </span>
                                      </td>
                                      <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                                      <td>{job.assign}</td>
                                      <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                                      {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                                      <td>
                                        <span
                                          className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                                        >
                                          {job.Status}
                                        </span>
                                      </td>
                                      <td className="d-flex">
                                        <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                                          <i className="bi bi-eye"></i> View
                                        </button>
                                        <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                                          <i className="bi bi-pencil"></i> Edit
                                        </button>
                                        <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                                          <i className="bi bi-trash"></i> Remove 
                                        </button>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </table>
                            </div>
                          </div>
                    
                          {/* ✅ Job Assignment Modal */}
                          <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
                            <Modal.Header closeButton>
                              <Modal.Title>Assign Job</Modal.Title>
                            </Modal.Header>
                            <Modal.Body>
                              <Form>
                                <Form.Group className="mb-3">
                                  <Form.Label>Select Designer</Form.Label>
                                  <Form.Select
                                    value={selectedDesigner}
                                    onChange={(e) => setSelectedDesigner(e.target.value)}
                                  >
                                    <option value="">-- Select --</option>
                                    <option value="Production">Production</option>
                                    <option value="Designer">Designer</option>
                                  </Form.Select>
                                </Form.Group>
                    
                                <Form.Group className="mb-3">
                                  <Form.Label>Description</Form.Label>
                                  <Form.Control
                                    as="textarea"
                                    rows={3}
                                    value={assignmentDescription}
                                    onChange={(e) => setAssignmentDescription(e.target.value)}
                                    placeholder="Enter assignment details or instructions..."
                                  />
                                </Form.Group>
                              </Form>
                            </Modal.Body>
                            <Modal.Footer>
                              <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
                                Cancel
                              </Button>
                              <Button variant="primary" onClick={handleSubmitAssignment}>
                                Assign
                              </Button>
                            </Modal.Footer>
                          </Modal>
                    
                        </div>
                      );
                    }
                    
                    export default ProjectJobsTab;
                    























                    import React, { useState, useEffect } from 'react';

import { useLocation, useNavigate, useParams } from 'react-router-dom';

function UserRoleModal() {
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const {user} = location.state || {};
  const userId = location.state?.id;
console.log("hhhhhhhhhh",user);

  const [formData, setFormData] = useState({
    roleName: '',
    roleDescription: '',
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: 'fullAccess'
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
 useEffect(() => {
  if (user) {
    setFormData(prev => ({
      ...prev,
      roleName: user.roleName || '',
      roleDescription: user.roleDescription || '',
      permissions: {
        ...prev.permissions,
        ...user.permissions
      },
      accessLevel: user.accessLevel || 'fullAccess'
    }));
  }
}, [user]);


  const handlePermissionChange = (e) => {
    const { name, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      permissions: {
        ...prev.permissions,
        [name]: checked
      }
    }));
  };

  const handleAccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };

 const handleSubmit = (e) => {
    e.preventDefault();

    // Wrap projectsId as array
    const payload = {
      ...formData,
      projectsId: [formData.projectsId],  // convert to array
    };

    if (id) {
      dispatch(updatejob({ id, data: payload }))
        .unwrap()
        .then(() => {
          toast.success("Job updated successfully!");
          navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
          dispatch(fetchProject());
        })
        .catch(() => {
          toast.error("Failed to update job!");
        });
    } else {
      dispatch(createjob(payload))  // send payload with array
        .unwrap()
        .then(() => {
          toast.success("Job created successfully!");
          navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
          dispatch(fetchProject());
        })
        .catch(() => {
          toast.error("Error creating job");
        });
    }
  };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New Role</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Role Name</label>
              <input type="text"
                className="form-control"
                name="roleName"
                value={formData.roleName}
                onChange={handleInputChange}
                placeholder="Enter role name"
                required/>
            </div>

            <div className="mb-3">
              <label className="form-label">Role Description</label>
              <textarea
                className="form-control"
                name="roleDescription"
                value={formData.roleDescription}
                onChange={handleInputChange}
                placeholder="Brief description of the role"
                rows="3" />
            </div>

            <div className="mb-4">
              <label className="form-label">Permissions</label>
              <div className="row g-3">
                <div className="col-md-6">
                  <div className="form-check">
                    <input type="checkbox"  className="form-check-input"
                      name="dashboardAccess"
                      checked={formData.permissions.dashboardAccess}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">Dashboard Access</label>
                  </div>
                  <div className="form-check">
                    <input type="checkbox" className="form-check-input"
                      name="clientManagement"
                      checked={formData.permissions.clientManagement}
                      onChange={handlePermissionChange}/>
                    <label className="form-check-label">Client Management</label>
                  </div>
                  <div className="form-check">
                    <input type="checkbox"
                      className="form-check-input"
                      name="projectManagement"
                      checked={formData.permissions.projectManagement}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">Project Management</label>
                  </div>
                  <div className="form-check">
                    <input
                      type="checkbox"
                      className="form-check-input"
                      name="designTools"
                      checked={formData.permissions.designTools}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">Design Tools</label>
                  </div>
                </div>
                <div className="col-md-6">
                  <div className="form-check">
                    <input
                      type="checkbox"
                      className="form-check-input"
                      name="financialManagement"
                      checked={formData.permissions.financialManagement}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">Financial Management</label>
                  </div>
                  <div className="form-check">
                    <input
                      type="checkbox"
                      className="form-check-input"
                      name="userManagement"
                      checked={formData.permissions.userManagement}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">User Management</label>
                  </div>
                  <div className="form-check">
                    <input
                      type="checkbox"
                      className="form-check-input"
                      name="reportGeneration"
                      checked={formData.permissions.reportGeneration}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">Report Generation</label>
                  </div>
                  <div className="form-check">
                    <input type="checkbox"
                      className="form-check-input"
                      name="systemSettings"
                      checked={formData.permissions.systemSettings}
                      onChange={handlePermissionChange}
                    />
                    <label className="form-check-label">System Settings</label>
                  </div>
                </div>
              </div>
            </div>


            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                <div className="form-check">
                  <input
                    type="radio"
                    className="form-check-input"
                    name="accessLevel"
                    value="fullAccess"
                    checked={formData.accessLevel === 'fullAccess'}
                    onChange={handleAccessLevelChange}
                  />
                  <label className="form-check-label">Full Access</label>
                </div>
                <div className="form-check">
                  <input
                     type="radio"
                    className="form-check-input"
                    name="accessLevel"
                    value="limitedAccess"
                    checked={formData.accessLevel === 'limitedAccess'}
                    onChange={handleAccessLevelChange}
                  />
                  <label className="form-check-label">Limited Access</label>
                </div>
                <div className="form-check">
                  <input
                    type="radio"
                    className="form-check-input"
                    name="accessLevel"
                    value="viewOnly"
                    checked={formData.accessLevel === 'viewOnly'}
                    onChange={handleAccessLevelChange}
                  />
                  <label className="form-check-label">View Only</label>
                </div>
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create Role</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;







import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch } from 'react-redux';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const { user } = location.state || {};
  const userId = location.state?.id;
  console.log("hhhhhhhhhh", user);

  const [formData, setFormData] = useState({
    roleName: '',
    roleDescription: '',
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: 'fullAccess'
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  useEffect(() => {
    if (job && project?.data?.length) {
      let projectId = '';

      // Safely extract project ID from nested projectsId array
      if (Array.isArray(job.projectId) && job.projectId.length > 0) {
        projectId = job.projectId[0]._id;
      } else if (Array.isArray(job.projectsId) && job.projectsId.length > 0) {
        projectId = typeof job.projectsId[0] === 'object'
          ? job.projectsId[0]._id
          : job.projectsId[0];
      }

      setFormData((prev) => ({
        ...prev,
        ...job,
        projectsId: projectId,
      }));
    }
  }, [job, project?.data]);

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedPermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );

    setFormData(prev => ({
      ...prev,
      permissions: updatedPermissions
    }));
  };

  const handleAccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };




   const handleSubmit = (e) => {
      e.preventDefault();
  
    const filteredPermissions = Object.fromEntries(
      Object.entries(formData.permissions).filter(([_, value]) => value === true)
    );

    const payload = {
      roleName: formData.roleName,
      roleDescription: formData.roleDescription,
      permissions: filteredPermissions,
      accessLevel: formData.accessLevel
    };

    console.log('Payload to be sent:', payload);
    
      // Wrap projectsId as array
      // const payload = {
      //   ...formData,
      //   projectsId: [formData.projectsId],  
      // };
  
      if (id) {
        dispatch(updatejob({ id, data: payload }))
          .unwrap()
          .then(() => {
            toast.success("Job updated successfully!");
            navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
            dispatch(fetchProject());
          })
          .catch(() => {
            toast.error("Failed to update job!");
          });
      } else {
        dispatch(createjob(payload))  // send payload with array
          .unwrap()
          .then(() => {
            toast.success("Job created successfully!");
            navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
            dispatch(fetchProject());
          })
          .catch(() => {
            toast.error("Error creating job");
          });
      }
    };
  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const filteredPermissions = Object.fromEntries(
  //     Object.entries(formData.permissions).filter(([_, value]) => value === true)
  //   );

  //   const payload = {
  //     roleName: formData.roleName,
  //     roleDescription: formData.roleDescription,
  //     permissions: filteredPermissions,
  //     accessLevel: formData.accessLevel
  //   };

  //   console.log('Payload to be sent:', payload);
  //   try {
  //     await axios.post('/api/roles', payload);
  //     navigate(-1);
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('Failed to create role. Please try again.');
  //   }
  // };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New Role</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Role Name</label>
              <select
                className="form-select"
                name="roleName"
                value={formData.roleName}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a role</option>
                <option value="Admin">Admin</option>
                <option value="Client">Client</option>
                <option value="Production">Production</option>
                <option value="Employee">Employee</option>
              </select>
            </div>


            <div className="mb-3">
              <label className="form-label">Role Description</label>
              <textarea
                className="form-control"
                name="roleDescription"
                value={formData.roleDescription}
                onChange={handleInputChange}
                placeholder="Brief description of the role"
                rows="3" />
            </div>

            <div className="mb-4">
              <label className="form-label">Permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleAccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create Role</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;






// ////////////////////////////////////////////
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch } from 'react-redux';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const { user } = location.state || {};
  const userId = location.state?.id;
  console.log("hhhhhhhhhh", user);

  
  const [formData, setFormData] = useState({
    roleName: '',
    roleDescription: '',
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: 'fullAccess'
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  useEffect(() => {
    if (user && project?.data?.length) {
      let userId = '';

      // Safely extract project ID from nested projectsId array
      if (Array.isArray(user.userId) && user.userId.length > 0) {
        userId = user.userId[0]._id;
      } else if (Array.isArray(user.projectsId) && user.projectsId.length > 0) {
        userId = typeof user.projectsId[0] === 'object'
          ? user.projectsId[0]._id
          : user.projectsId[0];
      }

      setFormData((prev) => ({
        ...prev,
        ...user,
        projectsId: userId,
      }));
    }
  }, [user, project?.data]);

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedPermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );

    setFormData(prev => ({
      ...prev,
      permissions: updatedPermissions
    }));
  };

  const handleAccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };




   const handleSubmit = (e) => {
      e.preventDefault();
  
    const filteredPermissions = Object.fromEntries(
      Object.entries(formData.permissions).filter(([_, value]) => value === true)
    );

    const payload = {
      roleName: formData.roleName,
      roleDescription: formData.roleDescription,
      permissions: filteredPermissions,
      accessLevel: formData.accessLevel
    };

    console.log('Payload to be sent:', payload);
    
      // Wrap projectsId as array
      // const payload = {
      //   ...formData,
      //   projectsId: [formData.projectsId],  
      // };
  
      if (id) {
        dispatch(updateuser({ id, data: payload }))
          .unwrap()
          .then(() => {
            toast.success("user updated successfully!");
            navigate('/ProjectOverview', { state: { openTab: 'users' } });
            dispatch(fetchProject());
          })
          .catch(() => {
            toast.error("Failed to update user!");
          });
      } else {
        dispatch(createuser(payload))  // send payload with array
          .unwrap()
          .then(() => {
            toast.success("user created successfully!");
            navigate('/ProjectOverview', { state: { openTab: 'users' } });
            dispatch(fetchProject());
          })
          .catch(() => {
            toast.error("Error creating user");
          });
      }
    };
  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const filteredPermissions = Object.fromEntries(
  //     Object.entries(formData.permissions).filter(([_, value]) => value === true)
  //   );

  //   const payload = {
  //     roleName: formData.roleName,
  //     roleDescription: formData.roleDescription,
  //     permissions: filteredPermissions,
  //     accessLevel: formData.accessLevel
  //   };

  //   console.log('Payload to be sent:', payload);
  //   try {
  //     await axios.post('/api/roles', payload);
  //     navigate(-1);
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('Failed to create role. Please try again.');
  //   }
  // };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New Role</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Role Name</label>
              <select
                className="form-select"
                name="roleName"
                value={formData.roleName}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a role</option>
                <option value="Admin">Admin</option>
                <option value="Client">Client</option>
                <option value="Production">Production</option>
                <option value="Employee">Employee</option>
              </select>
            </div>


            <div className="mb-3">
              <label className="form-label">Role Description</label>
              <textarea
                className="form-control"
                name="roleDescription"
                value={formData.roleDescription}
                onChange={handleInputChange}
                placeholder="Brief description of the role"
                rows="3" />
            </div>

            <div className="mb-4">
              <label className="form-label">Permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleAccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create Role</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;









////////////////////////////
import React, { useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch } from 'react-redux';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const {user} = location.state || {};
  const userId = location.state?.id;
  console.log("hhhhhhhhhh",user);
  
  const [formData, setFormData] = useState({
    roleName: '',
    roleDescription: '',
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: 'fullAccess'
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedPermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );

    setFormData(prev => ({
      ...prev,
      permissions: updatedPermissions
    }));
  };

  const handleAccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const filteredPermissions = Object.fromEntries(
      Object.entries(formData.permissions).filter(([_, value]) => value === true)
    );

    const payload = {
      roleName: formData.roleName,
      roleDescription: formData.roleDescription,
      permissions: filteredPermissions,
      accessLevel: formData.accessLevel
    };

    console.log('Payload to be sent:', payload);
    try {
      await axios.post('/api/roles', payload);
      navigate(-1);
    } catch (error) {
      console.error('Error submitting form:', error);
      alert('Failed to create role. Please try again.');
    }
  };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New Role</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Role Name</label>
              <select
                className="form-select"
                name="roleName"
                value={formData.roleName}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a role</option>
                <option value="Admin">Admin</option>
                <option value="Client">Client</option>
                <option value="Production">Production</option>
                <option value="Employee">Employee</option>
              </select>
            </div>


            <div className="mb-3">
              <label className="form-label">Role Description</label>
              <textarea
                className="form-control"
                name="roleDescription"
                value={formData.roleDescription}
                onChange={handleInputChange}
                placeholder="Brief description of the role"
                rows="3" />
            </div>

            <div className="mb-4">
              <label className="form-label">Permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleAccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create Role</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;




















// 
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch } from "react-redux";
import { createCostEstimate } from "../../../redux/slices/costEstimatesSlice";

const currencies = [
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];

const poStatuses = ["Pending", "Approved", "Rejected"];
const statuses = ["Active", "Inactive", "Completed"];

function AddCostEstimates() {
const navigate = useNavigate();
const dispatch = useDispatch()

  const [clients, setClients] = useState([]);
  const [items, setItems] = useState([
    { description: "", quantity: 0, rate: 0, amount: 0 },
  ]);

  const [formData, setFormData] = useState({
    clientId: ["6821a7b537e654e25af3da1d"],
    projectsId: ["681f1eb87397dc2b7e25eba2"],
    projectName: "681f1eb87397dc2b7e25eba2",
    estimateDate: "",
    validUntil: "",
    Notes: "",
    currency: "USD",
    POStatus: "Pending",
    Status: "Active",
  });

  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(
      newItems[index].quantity,
      newItems[index].rate
    );
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
    
  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };
  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        ...formData,
        VATRate: taxRate * 100,
        lineItems: items,
      };
      console.log("Submitted Data:", payload);
      dispatch(createCostEstimate(payload))
    } catch (err) {
      console.error("Submit Error:", err);
      toast.error("Failed to create estimate!");
    }
  };

  return (
    <>
      <ToastContainer />
      <div className="container py-4">
        <h5 className="fw-bold mb-4">Cost Estimates</h5>
        <div className="bg-white border rounded-3 p-4 shadow-sm">
          <h6 className="fw-semibold mb-4">Create New Estimate</h6>

          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId}
                onChange={handleFormChange}
              >
                <option value="">Select Client</option>
                {clients.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project Number</label>
              <input
                type="text"
                className="form-control"
                name="projectsId"
                value={formData.projectsId}
                // onChange={handleProjectNumberChange}
                placeholder="Enter project number"
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project Name</label>
              <input
                type="text"
                className="form-control"
                name="projectName"
                value={formData.projectName}
                readOnly
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Estimate Date</label>
              <input
                type="date"
                className="form-control"
                name="estimateDate"
                value={formData.estimateDate}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Valid Until</label>
              <input
                type="date"
                className="form-control"
                name="validUntil"
                value={formData.validUntil}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
              >
                {currencies.map((curr) => (
                  <option key={curr.value} value={curr.value}>
                    {curr.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">PO Status</label>
              <select
                className="form-select"
                name="POStatus"
                value={formData.POStatus}
                onChange={handleFormChange}
              >
                {poStatuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="Status"
                value={formData.Status}
                onChange={handleFormChange}
              >
                {statuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
          {/* Line Items UI (Same as before) */}
          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  value={item.description}
                  onChange={(e) =>
                    handleItemChange(index, "description", e.target.value)
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.rate}
                  onChange={(e) =>
                    handleItemChange(index, "rate", parseFloat(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="row mt-4">
            <div className="col-md-6">
              <label className="form-label">VAT Rate (%)</label>
              <input
                type="number"
                className="form-control"
                value={(taxRate * 100).toFixed(2)}
                onChange={(e) =>
                  setTaxRate(isNaN(parseFloat(e.target.value)) ? 0 : parseFloat(e.target.value) / 100)
                }
              />
              <div className="mt-3">
                Subtotal: {formData.currency} {subtotal.toFixed(2)}<br />
                VAT: {formData.currency} {tax.toFixed(2)}<br />
                <strong>Total: {formData.currency} {total.toFixed(2)}</strong>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Notes</label>
              <textarea
                className="form-control"
                rows="4"
                name="Notes"
                value={formData.Notes}
                onChange={handleFormChange}
              ></textarea>
            </div>
          </div>

          <div className="text-end mt-4">
            <Link to="/CostEstimates">
              <button className="btn btn-light me-2">Cancel</button>
            </Link>
            <button className="btn btn-dark" onClick={handleSubmit}>
              Create Estimate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddCostEstimates;






















import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch } from "react-redux";
import { createCostEstimate } from "../../../redux/slices/costEstimatesSlice";

const currencies = [
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];

const poStatuses = ["Pending", "Approved", "Rejected"];
const statuses = ["Active", "Inactive", "Completed"];

function AddCostEstimates() {
const navigate = useNavigate();
const dispatch = useDispatch()

  const [clients, setClients] = useState([]);
  const [items, setItems] = useState([
    { description: "", quantity: 0, rate: 0, amount: 0 },
  ]);

  const [formData, setFormData] = useState({
    clientId: ["6821a7b537e654e25af3da1d"],
    projectsId: ["681f1eb87397dc2b7e25eba2"],
    projectName: "681f1eb87397dc2b7e25eba2",
    estimateDate: "",
    validUntil: "",
    Notes: "",
    currency: "USD",
    POStatus: "Pending",
    Status: "Active",
  });

  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(
      newItems[index].quantity,
      newItems[index].rate
    );
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
    
  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };
  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        ...formData,
        VATRate: taxRate * 100,
        lineItems: items,
      };
      console.log("Submitted Data:", payload);
      dispatch(createCostEstimate(payload))
    } catch (err) {
      console.error("Submit Error:", err);
      toast.error("Failed to create estimate!");
    }
  };

  return (
    <>
      <ToastContainer />
      <div className="container py-4">
        <h5 className="fw-bold mb-4">Cost Estimates</h5>
        <div className="bg-white border rounded-3 p-4 shadow-sm">
          <h6 className="fw-semibold mb-4">Create New Estimate</h6>

          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId}
                onChange={handleFormChange}
              >
                <option value="">Select Client</option>
                {clients.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project Number</label>
              <input
                type="text"
                className="form-control"
                name="projectsId"
                value={formData.projectsId}
                // onChange={handleProjectNumberChange}
                placeholder="Enter project number"
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project Name</label>
              <input
                type="text"
                className="form-control"
                name="projectName"
                value={formData.projectName}
                readOnly
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Estimate Date</label>
              <input
                type="date"
                className="form-control"
                name="estimateDate"
                value={formData.estimateDate}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Valid Until</label>
              <input
                type="date"
                className="form-control"
                name="validUntil"
                value={formData.validUntil}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
              >
                {currencies.map((curr) => (
                  <option key={curr.value} value={curr.value}>
                    {curr.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">PO Status</label>
              <select
                className="form-select"
                name="POStatus"
                value={formData.POStatus}
                onChange={handleFormChange}
              >
                {poStatuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="Status"
                value={formData.Status}
                onChange={handleFormChange}
              >
                {statuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
           <div className="row fw-semibold text-muted mb-2 px-2">
            <div className="col-md-5">Description</div>
            <div className="col-md-2">Quantity</div>
            <div className="col-md-2">Rate</div>
            <div className="col-md-2">Amount</div>
            <div className="col-md-1 text-end"></div>
          </div>
          {/* Line Items UI (Same as before) */}
          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  value={item.description}
                  onChange={(e) =>
                    handleItemChange(index, "description", e.target.value)
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.rate}
                  onChange={(e) =>
                    handleItemChange(index, "rate", parseFloat(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="row mt-4">
            <div className="col-md-6">
              <label className="form-label">VAT Rate (%)</label>
              <input
                type="number"
                className="form-control"
                value={(taxRate * 100).toFixed(2)}
                onChange={(e) =>
                  setTaxRate(isNaN(parseFloat(e.target.value)) ? 0 : parseFloat(e.target.value) / 100)
                }
              />
              <div className="mt-3">
                Subtotal: {formData.currency} {subtotal.toFixed(2)}<br />
                VAT: {formData.currency} {tax.toFixed(2)}<br />
                <strong>Total: {formData.currency} {total.toFixed(2)}</strong>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Notes</label>
              <textarea
                className="form-control"
                rows="4"
                name="Notes"
                value={formData.Notes}
                onChange={handleFormChange}
              ></textarea>
            </div>
          </div>

          <div className="text-end mt-4">
            <Link to="/CostEstimates">
              <button className="btn btn-light me-2">Cancel</button>
            </Link>
            <button className="btn btn-dark" onClick={handleSubmit}>
              Create Estimate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddCostEstimates;




























import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch, useSelector } from "react-redux";
import { createCostEstimate } from "../../../redux/slices/costEstimatesSlice";
import { fetchProject } from "../../../redux/slices/ProjectsSlice";

const currencies = [
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];

const poStatuses = ["Pending", "Approved", "Rejected"];
const statuses = ["Active", "Inactive", "Completed"];

function AddCostEstimates() {

const navigate = useNavigate();
const dispatch = useDispatch()

// Projects al lis name   
const { project, loading, error } = useSelector((state) => state.projects);

  const selectedProjectName = project?.data?.find(p => p._id === formData.projectsId)?.projectName || "";

  const reversedProjectList = project?.data?.slice().reverse() || [];
    useEffect(() => {
      dispatch(fetchProject());
    }, [dispatch]);

  

    // /////
  const [clients, setClients] = useState([]);
  const [items, setItems] = useState([
    { description: "", quantity: 0, rate: 0, amount: 0 },
  ]);

  const [formData, setFormData] = useState({
    clientId: ["6821a7b537e654e25af3da1d"],
    projectsId: ["681f1eb87397dc2b7e25eba2"],
    projectName: "681f1eb87397dc2b7e25eba2",
    estimateDate: "",
    validUntil: "",
    Notes: "",
    currency: "USD",
    POStatus: "Pending",
    Status: "Active",
  });

  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(
      newItems[index].quantity,
      newItems[index].rate
    );
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
    
  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };
  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        ...formData,
        VATRate: taxRate * 100,
        lineItems: items,
      };
      console.log("Submitted Data:", payload);
      dispatch(createCostEstimate(payload))
    } catch (err) {
      console.error("Submit Error:", err);
      toast.error("Failed to create estimate!");
    }
  };

  return (
    <>
      <ToastContainer />
      <div className="container py-4">
        <h5 className="fw-bold mb-4">Cost Estimates</h5>
        <div className="bg-white border rounded-3 p-4 shadow-sm">
          <h6 className="fw-semibold mb-4">Create New Estimate</h6>

          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId}
                onChange={handleFormChange}
              >
                <option value="">Select Client</option>
                {clients.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project Number</label>
              <input
                type="text"
                className="form-control"
                name="projectsId"
                value={formData.projectsId}
                // onChange={handleProjectNumberChange}
                placeholder="Enter project number"
              />
                 <option value={selectedProjectName}>
                    {selectedProjectName}
                  </option>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project Name</label>
              <input
                type="text"
                className="form-control"
                name="projectName"
                value={formData.projectName}
                readOnly
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Estimate Date</label>
              <input
                type="date"
                className="form-control"
                name="estimateDate"
                value={formData.estimateDate}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Valid Until</label>
              <input
                type="date"
                className="form-control"
                name="validUntil"
                value={formData.validUntil}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
              >
                {currencies.map((curr) => (
                  <option key={curr.value} value={curr.value}>
                    {curr.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">PO Status</label>
              <select
                className="form-select"
                name="POStatus"
                value={formData.POStatus}
                onChange={handleFormChange}
              >
                {poStatuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="Status"
                value={formData.Status}
                onChange={handleFormChange}
              >
                {statuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
           <div className="row fw-semibold text-muted mb-2 px-2">
            <div className="col-md-5">Description</div>
            <div className="col-md-2">Quantity</div>
            <div className="col-md-2">Rate</div>
            <div className="col-md-2">Amount</div>
            <div className="col-md-1 text-end"></div>
          </div>
          {/* Line Items UI (Same as before) */}
          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  value={item.description}
                  onChange={(e) =>
                    handleItemChange(index, "description", e.target.value)
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.rate}
                  onChange={(e) =>
                    handleItemChange(index, "rate", parseFloat(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="row mt-4">
            <div className="col-md-6">
              <label className="form-label">VAT Rate (%)</label>
              <input
                type="number"
                className="form-control"
                value={(taxRate * 100).toFixed(2)}
                onChange={(e) =>
                  setTaxRate(isNaN(parseFloat(e.target.value)) ? 0 : parseFloat(e.target.value) / 100)
                }
              />
              <div className="mt-3">
                Subtotal: {formData.currency} {subtotal.toFixed(2)}<br />
                VAT: {formData.currency} {tax.toFixed(2)}<br />
                <strong>Total: {formData.currency} {total.toFixed(2)}</strong>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Notes</label>
              <textarea
                className="form-control"
                rows="4"
                name="Notes"
                value={formData.Notes}
                onChange={handleFormChange}
              ></textarea>
            </div>
          </div>

          <div className="text-end mt-4">
            <Link to="/CostEstimates">
              <button className="btn btn-light me-2">Cancel</button>
            </Link>
            <button className="btn btn-dark" onClick={handleSubmit}>
              Create Estimate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddCostEstimates;















import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch, useSelector } from "react-redux";
import { createCostEstimate } from "../../../redux/slices/costEstimatesSlice";
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";

const currencies = [
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];
const poStatuses = ["Pending", "Approved", "Rejected"];
const statuses = ["Active", "Inactive", "Completed"];


function AddCostEstimates() {
  const location = useLocation();
  const po = location.state?.po;
  const id = po?._id;
  console.log("ID from PO", po);



  const navigate = useNavigate();
  const dispatch = useDispatch()

  // Projects al lis name   
  const { project, loading, error } = useSelector((state) => state.projects);
  useEffect(() => {
    dispatch(fetchProject());
  }, [dispatch]);
  const reversedProjectList = project?.data?.slice().reverse() || [];

  //  all client 
  const { Clients } = useSelector((state) => state.client);
  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === Clients);
      if (foundProject) {
        setFormData(prev => ({
          ...prev,
          projectsId: foundProject._id,
        }));
      }
    }
  }, [Clients, project]);

  useEffect(() => {
    dispatch(fetchClient());
  }, [dispatch]);



  // /////
  const [items, setItems] = useState([
    { description: "", quantity: 0, rate: 0, amount: 0 },
  ]);

  const [formData, setFormData] = useState({
    clientId: [""],
    projectsId: [""],
    estimateDate: "",
    validUntil: "",
    Notes: "",
    currency: "USD",
    POStatus: "Pending",
    Status: "Active",
  });
  useEffect(() => {
    if (job && project?.data?.length) {
      let projectId = '';
      if (Array.isArray(job.projectId) && job.projectId.length > 0) {
        projectId = job.projectId[0]._id;
      } else if (Array.isArray(job.projectsId) && job.projectsId.length > 0) {
        projectId = typeof job.projectsId[0] === 'object'
          ? job.projectsId[0]._id
          : job.projectsId[0];
      }
      setFormData((prev) => ({
        ...prev,
        ...job,
        projectsId: projectId,
      }));
    }
  }, [job, project?.data]);

  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(
      newItems[index].quantity,
      newItems[index].rate
    );
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };
  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

  const handleSubmit = async (e) => {
    e.preventDefault();

    const payload = {
      ...formData,
      VATRate: taxRate * 100,
      lineItems: items,
    };
  
    if (id) {
      dispatch(({ id, data: payload }))
        .unwrap()
        .then(() => {
          toast.success("Job updated successfully!");
          navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
          // dispatch(fetchProject());
        })
        .catch(() => {
          toast.error("Failed to update job!");
        });
    } else {
     dispatch(createCostEstimate(payload))
        .unwrap()
        .then(() => {
          toast.success("Job created successfully!");
          navigate('/ProjectOverview', { state: { openTab: 'jobs' } });
          // dispatch(fetchProject());
        })
        .catch(() => {
          toast.error("Error creating job");
        });
    }
  };

  return (
    <>
      <ToastContainer />
      <div className="container py-4">
        <h5 className="fw-bold mb-4">Cost Estimates</h5>
        <div className="bg-white border rounded-3 p-4 shadow-sm">
          <h6 className="fw-semibold mb-4">Create New Estimate</h6>

          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId[0] || ""}
                onChange={(e) => {
                  const selectedClientId = e.target.value;
                  setFormData({
                    ...formData,
                    clientId: [selectedClientId], // value as array
                  });
                }}
                required
              >
                <option value="">Select Client</option>
                {Clients?.data?.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.clientName}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project</label>
              <select
                className="form-select"
                name="projectsId"
                value={formData.projectsId[0] || ""}
                onChange={(e) => {
                  const selectedId = e.target.value;
                  const selectedProject = project?.data?.find(p => p._id === selectedId);
                  setFormData({
                    ...formData,
                    projectsId: [selectedId],
                    projectName: selectedProject?.projectName || "",
                  });
                }}
              >
                <option value="">Select a project</option>
                {reversedProjectList.map((proj) => (
                  <option key={proj._id} value={proj._id}>
                    {proj.projectName}
                  </option>
                ))}
              </select>

            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Estimate Date</label>
              <input
                type="date"
                className="form-control"
                name="estimateDate"
                value={formData.estimateDate}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Valid Until</label>
              <input
                type="date"
                className="form-control"
                name="validUntil"
                value={formData.validUntil}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
              >
                {currencies.map((curr) => (
                  <option key={curr.value} value={curr.value}>
                    {curr.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">PO Status</label>
              <select
                className="form-select"
                name="POStatus"
                value={formData.POStatus}
                onChange={handleFormChange}
              >
                {poStatuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="Status"
                value={formData.Status}
                onChange={handleFormChange}
              >
                {statuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
          <div className="row fw-semibold text-muted mb-2 px-2">
            <div className="col-md-5">Description</div>
            <div className="col-md-2">Quantity</div>
            <div className="col-md-2">Rate</div>
            <div className="col-md-2">Amount</div>
            <div className="col-md-1 text-end"></div>
          </div>
          {/* Line Items UI (Same as before) */}
          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  value={item.description}
                  onChange={(e) =>
                    handleItemChange(index, "description", e.target.value)
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.rate}
                  onChange={(e) =>
                    handleItemChange(index, "rate", parseFloat(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="row mt-4">
            <div className="col-md-6">
              <label className="form-label">VAT Rate (%)</label>
              <input
                type="number"
                className="form-control"
                value={(taxRate * 100).toFixed(2)}
                onChange={(e) =>
                  setTaxRate(isNaN(parseFloat(e.target.value)) ? 0 : parseFloat(e.target.value) / 100)
                }
              />
              <div className="mt-3">
                Subtotal: {formData.currency} {subtotal.toFixed(2)}<br />
                VAT: {formData.currency} {tax.toFixed(2)}<br />
                <strong>Total: {formData.currency} {total.toFixed(2)}</strong>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Notes</label>
              <textarea
                className="form-control"
                rows="4"
                name="Notes"
                value={formData.Notes}
                onChange={handleFormChange}
              ></textarea>
            </div>
          </div>

          <div className="text-end mt-4">
            <Link to="/CostEstimates">
              <button className="btn btn-light me-2">Cancel</button>
            </Link>
            <button className="btn btn-dark" onClick={handleSubmit}>
              Create Estimate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddCostEstimates;


























import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch, useSelector } from "react-redux";
import { createCostEstimate, updateCostEstimate } from "../../../redux/slices/costEstimatesSlice";
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";

const currencies = [
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];

const poStatuses = ["Pending", "Approved", "Rejected"];
const statuses = ["Active", "Inactive", "Completed"];

function AddCostEstimates() {
  const location = useLocation();
  const po = location.state?.po;
  const id = po?._id;
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { project } = useSelector((state) => state.projects);
  useEffect(() => {
    dispatch(fetchProject());
  }, [dispatch]);
  const reversedProjectList = project?.data?.slice().reverse() || [];

  const { Clients } = useSelector((state) => state.client);
  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === Clients);
      if (foundProject) {
        setFormData(prev => ({
          ...prev,
          projectsId: foundProject._id,
        }));
      }
    }
  }, [Clients, project]);

  useEffect(() => {
    dispatch(fetchClient());
  }, [dispatch]);

  const [items, setItems] = useState([
    { description: "", quantity: 0, rate: 0, amount: 0 },
  ]);

  const [formData, setFormData] = useState({
    clientId: [""],
    projectsId: [""],
    estimateDate: "",
    validUntil: "",
    Notes: "",
    currency: "USD",
    POStatus: "Pending",
    Status: "Active",
  });

 useEffect(() => {
  if (po && project?.data?.length) {
    let projectId = '';
    if (Array.isArray(po.projectId) && po.projectId.length > 0) {
      projectId = po.projectId[0]._id;
    } else if (Array.isArray(po.projects) && po.projects.length > 0) {
      projectId = typeof po.projects[0] === 'object'
        ? po.projects[0]._id
        : po.projects[0];
    }

    const clientId = Array.isArray(po.clients) && po.clients.length > 0
      ? po.clients[0]._id
      : "";

    setFormData((prev) => ({
      ...prev,
      ...po,
      projectsId: projectId ? [projectId] : [""],
      clientId: clientId ? [clientId] : [""],
      Notes: po.Notes || "",
      currency: po.currency || "USD",
      estimateDate: po.estimateDate ? po.estimateDate.substring(0, 10) : "",
      validUntil: po.validUntil ? po.validUntil.substring(0, 10) : "",
    }));

    if (Array.isArray(po.lineItems) && po.lineItems.length > 0) {
      setItems(po.lineItems);
    }
  }
}, [po, project?.data]);

  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(
      newItems[index].quantity,
      newItems[index].rate
    );
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };

  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

 const handleSubmit = async (e) => {
  e.preventDefault();
  const payload = {
    ...formData,
    VATRate: taxRate * 100,
    lineItems: items,
  };

  const isDuplicate = location.state?.isDuplicate;
  if (isDuplicate || !id) {
    dispatch(createCostEstimate(payload))
      .unwrap()
      .then(() => {
        toast.success("Estimates created successfully!");
        navigate('/CostEstimates', { state: { openTab: 'jobs' } });
      })
      .catch(() => {
        toast.error("Failed to create estimates");
      });
  } else {
    dispatch(updateCostEstimate({ id, data: payload }))
      .unwrap()
      .then(() => {
        toast.success("Estimates updated successfully!");
        navigate('/CostEstimates', { state: { openTab: 'jobs' } });
      })
      .catch(() => {
        toast.error("Failed to update estimates");
      });
  }
};

  return (
    <>
      <ToastContainer />
      <div className="container py-4">
        <h5 className="fw-bold mb-4">Cost Estimates</h5>
        <div className="bg-white border rounded-3 p-4 shadow-sm">
          <h6 className="fw-semibold mb-4">Create New Estimate</h6>

          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId[0] || ""}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    clientId: [e.target.value],
                  })
                }
              >
                <option value="">Select Client</option>
                {Clients?.data?.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.clientName}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project</label>
              <select
                className="form-select"
                name="projectsId"
                value={formData.projectsId[0] || ""}
                onChange={(e) => {
                  const selectedId = e.target.value;
                  const selectedProject = project?.data?.find(p => p._id === selectedId);
                  setFormData({
                    ...formData,
                    projectsId: [selectedId],
                    projectName: selectedProject?.projectName || "",
                  });
                }}
              >
                <option value="">Select a project</option>
                {reversedProjectList.map((proj) => (
                  <option key={proj._id} value={proj._id}>
                    {proj.projectName}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Estimate Date</label>
              <input
                type="date"
                className="form-control"
                name="estimateDate"
                value={formData.estimateDate}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Valid Until</label>
              <input
                type="date"
                className="form-control"
                name="validUntil"
                value={formData.validUntil}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
              >
                {currencies.map((curr) => (
                  <option key={curr.value} value={curr.value}>
                    {curr.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">PO Status</label>
              <select
                className="form-select"
                name="POStatus"
                value={formData.POStatus}
                onChange={handleFormChange}
              >
                {poStatuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="Status"
                value={formData.Status}
                onChange={handleFormChange}
              >
                {statuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
          <div className="row fw-semibold text-muted mb-2 px-2">
            <div className="col-md-5">Description</div>
            <div className="col-md-2">Quantity</div>
            <div className="col-md-2">Rate</div>
            <div className="col-md-2">Amount</div>
            <div className="col-md-1 text-end"></div>
          </div>

          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  value={item.description}
                  onChange={(e) =>
                    handleItemChange(index, "description", e.target.value)
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.rate}
                  onChange={(e) =>
                    handleItemChange(index, "rate", parseFloat(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="row mt-4">
            <div className="col-md-6">
              <label className="form-label">VAT Rate (%)</label>
              <input
                type="number"
                className="form-control"
                value={(taxRate * 100).toFixed(2)}
                onChange={(e) =>
                  setTaxRate(isNaN(parseFloat(e.target.value)) ? 0 : parseFloat(e.target.value) / 100)
                }
              />
              <div className="mt-3">
                Subtotal: {formData.currency} {subtotal.toFixed(2)}<br />
                VAT: {formData.currency} {tax.toFixed(2)}<br />
                <strong>Total: {formData.currency} {total.toFixed(2)}</strong>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Notes</label>
              <textarea
                className="form-control"
                rows="4"
                name="Notes"
                value={formData.Notes}
                onChange={handleFormChange}
              ></textarea>
            </div>
          </div>

          <div className="text-end mt-4">
            <Link to="/CostEstimates">
              <button className="btn btn-light me-2">Cancel</button>
            </Link>
            <button className="btn btn-dark" onClick={handleSubmit}>
              Create Estimate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddCostEstimates;



















     {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, filteredProjects?.length || 0)} of {filteredProjects?.length || 0} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                Previous
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                Next
              </button>
            </li>
          </ul>
        </div>
      )}






















import React, { useEffect, useState } from "react";
import { Modal, Form, Table, Badge, Dropdown, Button } from "react-bootstrap";
import { BsPlusLg, BsPencil, BsTrash, BsUpload } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import { deleteCostEstimate, fetchCostEstimates } from "../../../redux/slices/costEstimatesSlice";
import { useDispatch, useSelector } from "react-redux";
import { FaTrash } from "react-icons/fa";
import Swal from 'sweetalert2';
import { fetchClient } from "../../../redux/slices/ClientSlice";

function CostEstimates() {
  const dispatch = useDispatch()
  const navigate = useNavigate()

  const projects = [
    { _id: "681f1f187397dc2b7e25ebaa", name: "Project 1", clientId: "client1" },
    { _id: "681f1f187397dc2b7e25ebab", name: "Project 2", clientId: "client2" },
    // ...
  ];
  const statuses = ["Pending", "Received", "Cancelled", "Completed"];
  const onSave = () => {
    // Your save logic here
    console.log("Saving data...");
  };

  const initialPurchaseOrders = [
    {
      poNumber: "PO/2024/001",
      client: "AcmeCorp",
      project: "PackageRedesign",
      projectNo: "P789",
      projectName: "New Building Construction",
      estimateRef: "CE-00001",
      status: "Pending",
      receivedDate: "2024/01/15",
      amount: 3000.0,
    },
    {
      poNumber: "PO/2024/002",
      client: "TechStartInc",
      project: "BrandIdentity",
      projectNo: "P789",
      projectName: "New Building Construction",
      estimateRef: "CE-00002",
      status: "received",
      receivedDate: "2024/01/14",
      amount: 3500.0,
    },
    {
      poNumber: "PO/2024/003",
      client: "GlobalFoods",
      project: "LabelDesign",
      projectNo: "P789",
      projectName: "New Building Construction",
      estimateRef: "CE-00003",
      status: "Pending",
      receivedDate: "2024/01/13",
      amount: 2800.0,
    },
  ];




  const [purchaseOrders, setPurchaseOrders] = useState(initialPurchaseOrders);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState("asc");

  // const getStatusBadgeVariant = (status) => {
  //   switch (status.toLowerCase()) {
  //     case "pending":
  //       return "warning";
  //     case "received ":
  //       return "success";
  //     default:
  //       return "secondary";
  //   }
  // };

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = initialPurchaseOrders.filter(
      (po) =>
        po.poNumber.toLowerCase().includes(query) ||
        po.client.toLowerCase().includes(query) ||
        po.project.toLowerCase().includes(query) ||
        po.estimateRef.toLowerCase().includes(query)
    );
    setPurchaseOrders(filtered);
  };

  const [showAddPOModal, setShowAddPOModal] = useState(false);

  const handleSort = (field) => {
    const isAsc = sortField === field && sortDirection === "asc";
    setSortDirection(isAsc ? "desc" : "asc");
    setSortField(field);

    const sorted = [...purchaseOrders].sort((a, b) => {
      if (field === "amount") {
        return isAsc ? a[field] - b[field] : b[field] - a[field];
      }
      return isAsc
        ? b[field].localeCompare(a[field])
        : a[field].localeCompare(b[field]);
    });
    setPurchaseOrders(sorted);
  };


  const CreatJobs = (projectId) => {
    console.log("Create job for project", projectId);
  };

  // const pendingPOs = purchaseOrders.filter(
  //   (po) => po.status === "Pending"
  // ).length;

  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [selectedPO, setSelectedPO] = useState(null);

  const handleConvertToInvoice = (po) => {
    setSelectedPO(po);
    setShowInvoiceModal(true);
  };

  const calculateTax = (amount) => amount * 0.1;
  const calculateTotal = (amount) => amount + calculateTax(amount);

  // PO Add Form
  const [poNumber, setPONumber] = useState("");
  const [poDate, setPODate] = useState("");
  const [poAmount, setPOAmount] = useState("");
  const [poDocument, setPODocument] = useState(null);

  // New fields
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [projectsId, setProjectsId] = useState(["681f1f187397dc2b7e25ebaa"]);
  const [clientId, setClientId] = useState("68219d6f83c4ebb3fa347e79");
  const [status, setStatus] = useState("Received");
  const [receivedDate, setReceivedDate] = useState("2025-05-24");
  const [amount, setAmount] = useState(12500);

  const handleFileUpload = (e) => {
    setPODocument(e.target.files[0]);
  };

  const handleSavePO = () => {
    console.log("PO Number:", poNumber);
    console.log("PO Date:", poDate);
    console.log("PO Amount:", poAmount);
    console.log("PO Document:", poDocument);

    // New fields
    console.log("ProjectsId:", projectsId);
    console.log("ClientId:", clientId);
    console.log("Status:", status);
    console.log("ReceivedDate:", receivedDate);
    console.log("Amount:", amount);

    // Close modal
    setShowAddPOModal(false);
  };



    const { project } = useSelector((state) => state.projects);
    useEffect(() => {
      dispatch(fetchProject());
    }, [dispatch]);
    const reversedProjectList = project?.data?.slice().reverse() || [];
  
   
     const { Clients } = useSelector((state) => state.client);
     useEffect(() => {
       if (Clients && project?.data?.length) {
         const foundProject = project.data.find(p => p._id === Clients);
         if (foundProject) {
           setFormData(prev => ({
             ...prev,
             projectsId: foundProject._id,
           }));
         }
       }
     }, [Clients, project]);
   
     useEffect(() => {
       dispatch(fetchClient());
     }, [dispatch]);
// ///////////////////////////////////////////////////////////////////

  // const [purchaseOrders, setPurchaseOrders] = useState(
  //   initialPurchaseOrders.map(po => ({ ...po, invoiceStatus: 'Active' }))
  // );
  const updateInvoiceStatus = (index, newStatus) => {
    const updatedPOs = [...purchaseOrders];
    updatedPOs[index].invoiceStatus = newStatus;
    setPurchaseOrders(updatedPOs);
  };


  const { estimates, loading, error } = useSelector((state) => state.costEstimates);
  console.log("Cost Estimates:", estimates.costEstimates);

  useEffect(() => {
    dispatch(fetchCostEstimates());
  }, [dispatch]);



  const Duplicate = (po) => {
    navigate(`/AddCostEstimates`, {
      state: {
        po,
        isDuplicate: true
      }
    });
  }
  const UpdateEstimate = (po) => {
    navigate(`/AddCostEstimates`, {
      state: {
        po,
      }
    });
  }
  //     const Duplicate =(po)=>{    
  //  navigate(`/duplicate/AddCostEstimates/${po._id}`, { state: { po}});
  //   }

  const getStatusClass = (status) => {
    switch ((status || "").toLowerCase().trim()) {
      case "active":
      case "active project":
      case "open":
        return "bg-primary text-white";
      case "inactive":
        return "bg-secondary text-white";
      case "in progress":
      case "pending":
        return "bg-warning text-dark";
      case "completed":
        return "bg-success text-white";
      case "closed":
        return "bg-dark text-white";
      case "cancelled":
        return "bg-danger text-white";
      case "on hold":
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteCostEstimate(_id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchCostEstimates());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }

  // PAGINATION SETUP FOR ESTIMATES
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;

  const totalItems = estimates?.costEstimates?.length || 0;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const paginatedEstimates = estimates?.costEstimates
    ?.slice()
    .reverse()
    .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  return (
    <div
      className="p-4 m-3"
      style={{ backgroundColor: "white", borderRadius: "10px" }}
    >
      <h2 className="fw-semibold mb-3">Cost Estimates</h2>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="filters d-flex flex-wrap gap-1 mb-4">
          <div className="search-container flex-grow-1">
            <Form.Control
              type="search"
              placeholder="Search by Job #, Brand Name, Sub Brand, Flavour, Pack Type, Pack Size..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="designer-dropdown"
              className="custom-dropdown"
            >
              Sort by Client
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Sort by Client</Dropdown.Item>
              <Dropdown.Item>John Smith</Dropdown.Item>
              <Dropdown.Item>Sarah Johnson</Dropdown.Item>
              <Dropdown.Item>Unassigned</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          {/* <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="priority-dropdown" className="custom-dropdown">
              All Priorities
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>All Priorities</Dropdown.Item>
              <Dropdown.Item>High</Dropdown.Item>
              <Dropdown.Item>Medium</Dropdown.Item>
              <Dropdown.Item>Low</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown> */}

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="viewall-dropdown"
              className="custom-dropdown"
            >
              View All
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoiced</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="status-dropdown"
              className="custom-dropdown"
            >
              All Status
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoice</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Link to={"/AddCostEstimates"}>
            <button id="btn-All" className=" btn-dark" style={{ border: "none", borderRadius: "10px" }}>
              <BsPlusLg className="me-2" /> New Estimate
            </button>
          </Link>
        </div>
      </div>

      <div className="table-responsive" style={{ maxHeight: "900px", overflowY: "auto" }}>
        <Table hover className="align-middle sticky-header">
          <thead style={{ backgroundColor: "#f8f9fa", position: "sticky", top: 0, zIndex: 1 }}>
            <tr>
              <th><input type="checkbox" /></th>
              <th>CENo</th>
              <th>Date</th>
              <th>Client</th>
              <th>ProjectNo</th>
              <th>ProjectName</th>
              <th>Amount</th>
              <th>POStatus</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedEstimates?.map((po, index) => (

              <tr style={{ whiteSpace: "nowrap" }} key={po.poNumber}>
                <td><input type="checkbox" /></td>
                <td onClick={() => CreatJobs(po.projectId)}>
                  <Link style={{ textDecoration: 'none', border: 'none', color: 'inherit' }}>
                    CE-{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                  </Link>
                </td>
                <td>{new Date(po.estimateDate).toLocaleDateString("en-GB").slice(0, 8)}</td>
                <td>
                  {
                    Array.isArray(po.clientId)
                      ? po.clientId.map((client, i) => `${String(i + 1).padStart(4, '0')} (${client._id})`).join(", ")
                      : po.clientId
                        ? `${String(1).padStart(4, '0')} `
                        : "N/A"
                  }
                </td>
                <td>
                  {po.projectId?.map((project, i) => `${String(i + 1).padStart(4, '0')}`).join(", ")}
                </td>
                <td>
                  {po.projectId?.map((project) => project.projectName || project.name).join(", ")}
                </td>
                <td>
                  {po.lineItems?.reduce((total, item) => total + (item.amount || 0), 0).toFixed(2)}
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.POStatus}
                  </span>
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td>
                <td>
                  <div className="d-flex gap-2">
                    <button className="btn btn-sm btn-primary" onClick={() => Duplicate(po)}>Duplicate</button>
                    <button className="btn btn-sm btn-primary" onClick={() => handleConvertToInvoice(po)}>ConvertInvoice</button>
                    <button className="btn btn-sm btn-success" onClick={() => setShowAddPOModal(true)}>AddPO</button>
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateEstimate(po)}><BsPencil /></button>
                    {/* <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(po._id)}>
                          <FaTrash />
                        </button> */}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>


      {/* Modal for converting to invoice */}
      <Modal
        show={showInvoiceModal}
        onHide={() => setShowInvoiceModal(false)}
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>Convert Estimate to Invoice</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Number</Form.Label>
              {/* <Form.Control
                type="text"
                defaultValue={
                  selectedPO
                    ? `INV-${selectedPO.estimateRef.split("-")[1]}`
                    : ""
                }
                disabled
              /> */}
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Client</Form.Label>
              <Form.Control
                type="text"
                defaultValue={selectedPO?.client}
                readOnly
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Due Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <hr />
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control type="text" defaultValue="Web Design Services" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Quantity</Form.Label>
              <Form.Control type="number" defaultValue="1" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Rate</Form.Label>
              <Form.Control type="number" defaultValue={selectedPO?.amount} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Amount</Form.Label>
              <Form.Control
                type="text"
                // value={`$${selectedPO?.amount.toFixed(2)}`}
                disabled
              />
            </Form.Group>
            <hr />
            <div className="d-flex justify-content-between">
              <div>
                <strong>Subtotal:</strong>
                {/* <span> ${selectedPO?.amount.toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Tax (10%):</strong>
                {/* <span> ${calculateTax(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Total:</strong>
                {/* <span> ${calculateTotal(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => setShowInvoiceModal(false)}
          >
            Cancel
          </Button>
          <Button variant="primary">Create Invoice</Button>
        </Modal.Footer>
      </Modal>



      {/* Modal for Add Purchase Order */}
<Modal show={showAddPOModal} onHide={() => setShowAddPOModal(false)} size="lg" >   {/*size="md" */}
      <Modal.Header closeButton>
        <Modal.Title>Add Purchase Order</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Select Project</Form.Label>
            <Form.Select
              value={selectedProjectId}
              onChange={(e) => setSelectedProjectId(e.target.value)}
              className="form-control-sm"
            >
              <option value="">-- Select Project --</option>
              {projects.map((project) => (
                <option key={project._id} value={project._id}>
                  {project.name}
                </option>
              ))}
            </Form.Select>
          </Form.Group>



          {/* Assuming you want to select Client separately, 
          you might want a different state instead of selectedProjectId */}
         <Form.Group className="mb-3">
  <Form.Label>Select Client</Form.Label>
  <Form.Select
    name="clientId"
    value={selectedProjectId}  // <-- This should ideally be different state for client
              onChange={(e) => setSelectedProjectId(e.target.value)}
    className="form-control-sm"
  >
    <option value="">-- Select Client --</option>
    {Clients?.data?.map((client) => (
      <option key={client._id} value={client._id}>
        {client.clientName}
      </option>
    ))}
  </Form.Select>
</Form.Group>


          <Form.Group className="mb-3">
            <Form.Label>PO Date</Form.Label>
            <Form.Control
              type="date"
              value={poDate}
              onChange={(e) => setPODate(e.target.value)}
              className="form-control-sm"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Status</Form.Label>
            <Form.Select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
              className="form-control-sm"
            >
              <option value="">-- Select Status --</option>
              {statuses.map((s) => (
                <option key={s} value={s}>
                  {s}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Amount</Form.Label>
            <Form.Control
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="form-control-sm"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Upload PO Document</Form.Label>
            <div className="file-upload">
              <input
                type="file"
                accept=".pdf,.doc,.docx"
                onChange={handleFileUpload}
                className="form-control-sm"
              />
              <div className="upload-info">
                <BsUpload className="me-2" /> Upload a file (PDF, DOC up to 10MB)
              </div>
            </div>
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={() => setShowAddPOModal(false)}>
          Cancel
        </Button>
        <Button variant="primary" onClick={handleSavePO}>
          Save PO
        </Button>
      </Modal.Footer>
    </Modal>


      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mt-3">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                Previous
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                Next
              </button>
            </li>
          </ul>
        </div>

      )}

    </div>
  );
}

export default CostEstimates;































import React, { useEffect, useState } from "react";
import { Modal, Form, Table, Badge, Dropdown, Button } from "react-bootstrap";
import { BsPlusLg, BsPencil, BsTrash, BsUpload } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import { deleteCostEstimate, fetchCostEstimates } from "../../../redux/slices/costEstimatesSlice";
import { useDispatch, useSelector } from "react-redux";
import { FaTrash } from "react-icons/fa";
import Swal from 'sweetalert2';
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";

function CostEstimates() {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  // State declarations
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState("asc");
  const [showAddPOModal, setShowAddPOModal] = useState(false);
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [selectedPO, setSelectedPO] = useState(null);
  
  // PO Form states
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [selectedClientId, setSelectedClientId] = useState("");
  const [poDate, setPODate] = useState("");
  const [status, setStatus] = useState("");
  const [amount, setAmount] = useState("");
  const [poDocument, setPODocument] = useState(null);

  // Redux selectors
  const { project } = useSelector((state) => state.projects);
  const { Clients } = useSelector((state) => state.client);
  const { estimates, loading, error } = useSelector((state) => state.costEstimates);

  // Status options
  const statuses = ["Pending", "Received", "Cancelled", "Completed"];

  // Effects
  useEffect(() => {
    dispatch(fetchProject());
    dispatch(fetchClient());
    dispatch(fetchCostEstimates());
  }, [dispatch]);

  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === selectedClientId);
      if (foundProject) {
        setSelectedProjectId(foundProject._id);
      }
    }
  }, [Clients, project, selectedClientId]);

  // File upload handler
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        Swal.fire({
          icon: 'error',
          title: 'File too large',
          text: 'Please upload a file smaller than 10MB'
        });
        return;
      }
      setPODocument(file);
    }
  };

  // Save PO handler
  const handleSavePO = () => {
    if (!selectedProjectId || !selectedClientId || !poDate || !status || !amount) {
      Swal.fire({
        icon: 'error',
        title: 'Required Fields Missing',
        text: 'Please fill all required fields'
      });
      return;
    }

    const newPO = {
      projectId: selectedProjectId,
      clientId: selectedClientId,
      poDate,
      status,
      amount: parseFloat(amount),
      document: poDocument
    };

    console.log('Saving PO:', newPO);

    // Reset form fields
    setSelectedProjectId("");
    setSelectedClientId("");
    setPODate("");
    setStatus("");
    setAmount("");
    setPODocument(null);
    setShowAddPOModal(false);

    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: 'Purchase Order saved successfully'
    });
  };

  // Add PO Modal
  const renderAddPOModal = () => (
    <Modal show={showAddPOModal} onHide={() => setShowAddPOModal(false)} size="lg">
      <Modal.Header closeButton>
        <Modal.Title>Add Purchase Order</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Select Project <span className="text-danger">*</span></Form.Label>
            <Form.Select
              value={selectedProjectId}
              onChange={(e) => setSelectedProjectId(e.target.value)}
              className="form-control"
              required
            >
              <option value="">-- Select Project --</option>
              {project?.data?.map((proj) => (
                <option key={proj._id} value={proj._id}>
                  {proj.projectName || proj.name}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Select Client <span className="text-danger">*</span></Form.Label>
            <Form.Select
              value={selectedClientId}
              onChange={(e) => setSelectedClientId(e.target.value)}
              className="form-control"
              required
            >
              <option value="">-- Select Client --</option>
              {Clients?.data?.map((client) => (
                <option key={client._id} value={client._id}>
                  {client.clientName}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Date <span className="text-danger">*</span></Form.Label>
            <Form.Control
              type="date"
              value={poDate}
              onChange={(e) => setPODate(e.target.value)}
              className="form-control"
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Status <span className="text-danger">*</span></Form.Label>
            <Form.Select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
              className="form-control"
              required
            >
              <option value="">-- Select Status --</option>
              {statuses.map((s) => (
                <option key={s} value={s}>{s}</option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Amount <span className="text-danger">*</span></Form.Label>
            <Form.Control
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="form-control"
              placeholder="Enter amount"
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Upload PO Document</Form.Label>
            <div className="file-upload">
              <Form.Control
                type="file"
                accept=".pdf,.doc,.docx"
                onChange={handleFileUpload}
                className="form-control"
              />
              <small className="text-muted d-flex align-items-center mt-1">
                <BsUpload className="me-2" /> Upload a file (PDF, DOC up to 10MB)
              </small>
            </div>
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer className="d-flex justify-content-end gap-2">
        <Button variant="secondary" onClick={() => setShowAddPOModal(false)}>Cancel</Button>
        <Button variant="primary" onClick={handleSavePO}>Save PO</Button>
      </Modal.Footer>
    </Modal>
  );

  // Render component
  return (
    <div className="p-4 m-3" style={{ backgroundColor: "white", borderRadius: "10px" }}>
      <h2 className="fw-semibold mb-3">Cost Estimates</h2>
      
      {/* Search and filters */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="filters d-flex flex-wrap gap-1 mb-4">
          <div className="search-container flex-grow-1">
            <Form.Control
              type="search"
              placeholder="Search by Job #, Brand Name, Sub Brand, Flavour, Pack Type, Pack Size..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="designer-dropdown" className="custom-dropdown">
              Sort by Client
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Sort by Client</Dropdown.Item>
              <Dropdown.Item>John Smith</Dropdown.Item>
              <Dropdown.Item>Sarah Johnson</Dropdown.Item>
              <Dropdown.Item>Unassigned</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="viewall-dropdown" className="custom-dropdown">
              View All
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoiced</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="status-dropdown" className="custom-dropdown">
              All Status
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoice</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Link to={"/AddCostEstimates"}>
            <button id="btn-All" className="btn-dark" style={{ border: "none", borderRadius: "10px" }}>
              <BsPlusLg className="me-2" /> New Estimate
            </button>
          </Link>
        </div>
      </div>

      {/* Estimates Table */}
      <div className="table-responsive" style={{ maxHeight: "900px", overflowY: "auto" }}>
        <Table hover className="align-middle sticky-header">
          <thead style={{ backgroundColor: "#f8f9fa", position: "sticky", top: 0, zIndex: 1 }}>
            <tr>
              <th><input type="checkbox" /></th>
              <th>CENo</th>
              <th>Date</th>
              <th>Client</th>
              <th>ProjectNo</th>
              <th>ProjectName</th>
              <th>Amount</th>
              <th>POStatus</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {estimates?.costEstimates?.slice().reverse().map((po, index) => (
              <tr key={po._id || index} style={{ whiteSpace: "nowrap" }}>
                <td><input type="checkbox" /></td>
                <td>
                  <Link style={{ textDecoration: 'none', color: 'inherit' }}>
                    CE-{String(index + 1).padStart(4, '0')}
                  </Link>
                </td>
                <td>{new Date(po.estimateDate).toLocaleDateString("en-GB").slice(0, 8)}</td>
                <td>
                  {Array.isArray(po.clientId)
                    ? po.clientId.map((client, i) => `${String(i + 1).padStart(4, '0')} (${client._id})`).join(", ")
                    : po.clientId
                      ? `${String(1).padStart(4, '0')} `
                      : "N/A"}
                </td>
                <td>
                  {po.projectId?.map((project, i) => `${String(i + 1).padStart(4, '0')}`).join(", ")}
                </td>
                <td>
                  {po.projectId?.map((project) => project.projectName || project.name).join(", ")}
                </td>
                <td>
                  {po.lineItems?.reduce((total, item) => total + (item.amount || 0), 0).toFixed(2)}
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.POStatus}
                  </span>
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td>
                <td>
                  <div className="d-flex gap-2">
                    <button className="btn btn-sm btn-primary" onClick={() => Duplicate(po)}>Duplicate</button>
                    <button className="btn btn-sm btn-primary" onClick={() => handleConvertToInvoice(po)}>Convert Invoice</button>
                    <button className="btn btn-sm btn-success" onClick={() => setShowAddPOModal(true)}>Add PO</button>
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateEstimate(po)}><BsPencil /></button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Modals */}
      {renderAddPOModal()}
    </div>
  );
}

export default CostEstimates;


// Status badge styling helper
const getStatusClass = (status) => {
  switch ((status || "").toLowerCase().trim()) {
    case "active":
    case "active project":
    case "open":
      return "bg-primary text-white";
    case "inactive":
      return "bg-secondary text-white";
    case "in progress":
    case "pending":
      return "bg-warning text-dark";
    case "completed":
      return "bg-success text-white";
    case "closed":
      return "bg-dark text-white";
    case "cancelled":
      return "bg-danger text-white";
    case "on hold":
    case "review":
      return "bg-info text-dark";
    case "not started":
      return "bg-secondary text-white";
    default:
      return "bg-light text-dark";
  }
};


      




















import React, { useEffect, useState } from "react";
import { Modal, Form, Table, Badge, Dropdown, Button } from "react-bootstrap";
import { BsPlusLg, BsPencil, BsTrash, BsUpload } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import { deleteCostEstimate, fetchCostEstimates } from "../../../redux/slices/costEstimatesSlice";
import { useDispatch, useSelector } from "react-redux";
import { FaTrash } from "react-icons/fa";
import Swal from 'sweetalert2';
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";

function CostEstimates() {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  // State declarations
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState("asc");
  const [showAddPOModal, setShowAddPOModal] = useState(false);
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [selectedPO, setSelectedPO] = useState(null);
  
  // PO Form states
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [selectedClientId, setSelectedClientId] = useState("");
  const [poDate, setPODate] = useState("");
  const [status, setStatus] = useState("");
  const [amount, setAmount] = useState("");
  const [poDocument, setPODocument] = useState(null);

  // Redux selectors
  const { project } = useSelector((state) => state.projects);
  const { Clients } = useSelector((state) => state.client);
  const { estimates, loading, error } = useSelector((state) => state.costEstimates);

  // Status options
  const statuses = ["Pending", "Received", "Cancelled", "Completed"];

  // Effects
  useEffect(() => {
    dispatch(fetchProject());
    dispatch(fetchClient());
    dispatch(fetchCostEstimates());
  }, [dispatch]);

  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === selectedClientId);
      if (foundProject) {
        setSelectedProjectId(foundProject._id);
      }
    }
  }, [Clients, project, selectedClientId]);

  // File upload handler
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) { // 10MB limit
        Swal.fire({
          icon: 'error',
          title: 'File too large',
          text: 'Please upload a file smaller than 10MB'
        });
        return;
      }
      setPODocument(file);
    }
  };

  // Save PO handler
  const handleSavePO = () => {
    if (!selectedProjectId || !selectedClientId || !poDate || !status || !amount) {
      Swal.fire({
        icon: 'error',
        title: 'Required Fields Missing',
        text: 'Please fill all required fields'
      });
      return;
    }

    const newPO = {
      projectId: selectedProjectId,
      clientId: selectedClientId,
      poDate,
      status,
      amount: parseFloat(amount),
      document: poDocument
    };

    console.log('Saving PO:', newPO);

    // Reset form fields
    setSelectedProjectId("");
    setSelectedClientId("");
    setPODate("");
    setStatus("");
    setAmount("");
    setPODocument(null);
    setShowAddPOModal(false);

    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: 'Purchase Order saved successfully'
    });
  };

  // Add PO Modal
  const renderAddPOModal = () => (
    <Modal show={showAddPOModal} onHide={() => setShowAddPOModal(false)} size="lg">
      <Modal.Header closeButton>
        <Modal.Title>Add Purchase Order</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Select Project <span className="text-danger">*</span></Form.Label>
            <Form.Select
              value={selectedProjectId}
              onChange={(e) => setSelectedProjectId(e.target.value)}
              className="form-control"
              required
            >
              <option value="">-- Select Project --</option>
              {project?.data?.map((proj) => (
                <option key={proj._id} value={proj._id}>
                  {proj.projectName || proj.name}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Select Client <span className="text-danger">*</span></Form.Label>
            <Form.Select
              value={selectedClientId}
              onChange={(e) => setSelectedClientId(e.target.value)}
              className="form-control"
              required
            >
              <option value="">-- Select Client --</option>
              {Clients?.data?.map((client) => (
                <option key={client._id} value={client._id}>
                  {client.clientName}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Date <span className="text-danger">*</span></Form.Label>
            <Form.Control
              type="date"
              value={poDate}
              onChange={(e) => setPODate(e.target.value)}
              className="form-control"
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Status <span className="text-danger">*</span></Form.Label>
            <Form.Select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
              className="form-control"
              required
            >
              <option value="">-- Select Status --</option>
              {statuses.map((s) => (
                <option key={s} value={s}>{s}</option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Amount <span className="text-danger">*</span></Form.Label>
            <Form.Control
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="form-control"
              placeholder="Enter amount"
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Upload PO Document</Form.Label>
            <div className="file-upload">
              <Form.Control
                type="file"
                accept=".pdf,.doc,.docx"
                onChange={handleFileUpload}
                className="form-control"
              />
              <small className="text-muted d-flex align-items-center mt-1">
                <BsUpload className="me-2" /> Upload a file (PDF, DOC up to 10MB)
              </small>
            </div>
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer className="d-flex justify-content-end gap-2">
        <Button variant="secondary" onClick={() => setShowAddPOModal(false)}>Cancel</Button>
        <Button variant="primary" onClick={handleSavePO}>Save PO</Button>
      </Modal.Footer>
    </Modal>
  );

  // Render component
  return (
    <div className="p-4 m-3" style={{ backgroundColor: "white", borderRadius: "10px" }}>
      <h2 className="fw-semibold mb-3">Cost Estimates</h2>
      
      {/* Search and filters */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="filters d-flex flex-wrap gap-1 mb-4">
          <div className="search-container flex-grow-1">
            <Form.Control
              type="search"
              placeholder="Search by Job #, Brand Name, Sub Brand, Flavour, Pack Type, Pack Size..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="designer-dropdown" className="custom-dropdown">
              Sort by Client
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Sort by Client</Dropdown.Item>
              <Dropdown.Item>John Smith</Dropdown.Item>
              <Dropdown.Item>Sarah Johnson</Dropdown.Item>
              <Dropdown.Item>Unassigned</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="viewall-dropdown" className="custom-dropdown">
              View All
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoiced</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="status-dropdown" className="custom-dropdown">
              All Status
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoice</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Link to={"/AddCostEstimates"}>
            <button id="btn-All" className="btn-dark" style={{ border: "none", borderRadius: "10px" }}>
              <BsPlusLg className="me-2" /> New Estimate
            </button>
          </Link>
        </div>
      </div>

      {/* Estimates Table */}
      <div className="table-responsive" style={{ maxHeight: "900px", overflowY: "auto" }}>
        <Table hover className="align-middle sticky-header">
          <thead style={{ backgroundColor: "#f8f9fa", position: "sticky", top: 0, zIndex: 1 }}>
            <tr>
              <th><input type="checkbox" /></th>
              <th>CENo</th>
              <th>Date</th>
              <th>Client</th>
              <th>ProjectNo</th>
              <th>ProjectName</th>
              <th>Amount</th>
              <th>POStatus</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {estimates?.costEstimates?.slice().reverse().map((po, index) => (
              <tr key={po._id || index} style={{ whiteSpace: "nowrap" }}>
                <td><input type="checkbox" /></td>
                <td>
                  <Link style={{ textDecoration: 'none', color: 'inherit' }}>
                    CE-{String(index + 1).padStart(4, '0')}
                  </Link>
                </td>
                <td>{new Date(po.estimateDate).toLocaleDateString("en-GB").slice(0, 8)}</td>
                <td>
                  {Array.isArray(po.clientId)
                    ? po.clientId.map((client, i) => `${String(i + 1).padStart(4, '0')} (${client._id})`).join(", ")
                    : po.clientId
                      ? `${String(1).padStart(4, '0')} `
                      : "N/A"}
                </td>
                <td>
                  {po.projectId?.map((project, i) => `${String(i + 1).padStart(4, '0')}`).join(", ")}
                </td>
                <td>
                  {po.projectId?.map((project) => project.projectName || project.name).join(", ")}
                </td>
                <td>
                  {po.lineItems?.reduce((total, item) => total + (item.amount || 0), 0).toFixed(2)}
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.POStatus}
                  </span>
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td>
                <td>
                  <div className="d-flex gap-2">
                    <button className="btn btn-sm btn-primary" onClick={() => Duplicate(po)}>Duplicate</button>
                    <button className="btn btn-sm btn-primary" onClick={() => handleConvertToInvoice(po)}>Convert Invoice</button>
                    <button className="btn btn-sm btn-success" onClick={() => setShowAddPOModal(true)}>Add PO</button>
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateEstimate(po)}><BsPencil /></button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Modals */}
      {renderAddPOModal()}
    </div>
  );
}

export default CostEstimates;


// Status badge styling helper
const getStatusClass = (status) => {
  switch ((status || "").toLowerCase().trim()) {
    case "active":
    case "active project":
    case "open":
      return "bg-primary text-white";
    case "inactive":
      return "bg-secondary text-white";
    case "in progress":
    case "pending":
      return "bg-warning text-dark";
    case "completed":
      return "bg-success text-white";
    case "closed":
      return "bg-dark text-white";
    case "cancelled":
      return "bg-danger text-white";
    case "on hold":
    case "review":
      return "bg-info text-dark";
    case "not started":
      return "bg-secondary text-white";
    default:
      return "bg-light text-dark";
  }
};

































// \\\\\\\\\\\\\\\\\
import React, { useEffect, useState } from "react";
import { Modal, Form, Table, Badge, Dropdown, Button } from "react-bootstrap";
import { BsPlusLg, BsPencil, BsTrash, BsUpload } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import { deleteCostEstimate, fetchCostEstimates } from "../../../redux/slices/costEstimatesSlice";
import { useDispatch, useSelector } from "react-redux";
import { FaTrash } from "react-icons/fa";
import Swal from 'sweetalert2';

function CostEstimates() {
  const dispatch = useDispatch()
  const navigate = useNavigate()

  const projects = [
    { _id: "681f1f187397dc2b7e25ebaa", name: "Project 1", clientId: "client1" },
    { _id: "681f1f187397dc2b7e25ebab", name: "Project 2", clientId: "client2" },
    // ...
  ];
  const statuses = ["Pending", "Received", "Cancelled", "Completed"];
  const onSave = () => {
    // Your save logic here
    console.log("Saving data...");
  };

  const initialPurchaseOrders = [
    {
      poNumber: "PO/2024/001",
      client: "AcmeCorp",
      project: "PackageRedesign",
      projectNo: "P789",
      projectName: "New Building Construction",
      estimateRef: "CE-00001",
      status: "Pending",
      receivedDate: "2024/01/15",
      amount: 3000.0,
    },
    {
      poNumber: "PO/2024/002",
      client: "TechStartInc",
      project: "BrandIdentity",
      projectNo: "P789",
      projectName: "New Building Construction",
      estimateRef: "CE-00002",
      status: "received",
      receivedDate: "2024/01/14",
      amount: 3500.0,
    },
    {
      poNumber: "PO/2024/003",
      client: "GlobalFoods",
      project: "LabelDesign",
      projectNo: "P789",
      projectName: "New Building Construction",
      estimateRef: "CE-00003",
      status: "Pending",
      receivedDate: "2024/01/13",
      amount: 2800.0,
    },
  ];




  const [purchaseOrders, setPurchaseOrders] = useState(initialPurchaseOrders);
  const [searchQuery, setSearchQuery] = useState("");
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState("asc");

  // const getStatusBadgeVariant = (status) => {
  //   switch (status.toLowerCase()) {
  //     case "pending":
  //       return "warning";
  //     case "received ":
  //       return "success";
  //     default:
  //       return "secondary";
  //   }
  // };

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = initialPurchaseOrders.filter(
      (po) =>
        po.poNumber.toLowerCase().includes(query) ||
        po.client.toLowerCase().includes(query) ||
        po.project.toLowerCase().includes(query) ||
        po.estimateRef.toLowerCase().includes(query)
    );
    setPurchaseOrders(filtered);
  };

  const [showAddPOModal, setShowAddPOModal] = useState(false);

  const handleSort = (field) => {
    const isAsc = sortField === field && sortDirection === "asc";
    setSortDirection(isAsc ? "desc" : "asc");
    setSortField(field);

    const sorted = [...purchaseOrders].sort((a, b) => {
      if (field === "amount") {
        return isAsc ? a[field] - b[field] : b[field] - a[field];
      }
      return isAsc
        ? b[field].localeCompare(a[field])
        : a[field].localeCompare(b[field]);
    });
    setPurchaseOrders(sorted);
  };


  const CreatJobs = (projectId) => {
    console.log("Create job for project", projectId);
  };

  // const pendingPOs = purchaseOrders.filter(
  //   (po) => po.status === "Pending"
  // ).length;

  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [selectedPO, setSelectedPO] = useState(null);

  const handleConvertToInvoice = (po) => {
    setSelectedPO(po);
    setShowInvoiceModal(true);
  };

  const calculateTax = (amount) => amount * 0.1;
  const calculateTotal = (amount) => amount + calculateTax(amount);

  // PO Add Form
  const [poNumber, setPONumber] = useState("");
  const [poDate, setPODate] = useState("");
  const [poAmount, setPOAmount] = useState("");
  const [poDocument, setPODocument] = useState(null);

  // New fields
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [projectsId, setProjectsId] = useState(["681f1f187397dc2b7e25ebaa"]);
  const [clientId, setClientId] = useState("68219d6f83c4ebb3fa347e79");
  const [status, setStatus] = useState("Received");
  const [receivedDate, setReceivedDate] = useState("2025-05-24");
  const [amount, setAmount] = useState(12500);

  const handleFileUpload = (e) => {
    setPODocument(e.target.files[0]);
  };

  const handleSavePO = () => {
    console.log("PO Number:", poNumber);
    console.log("PO Date:", poDate);
    console.log("PO Amount:", poAmount);
    console.log("PO Document:", poDocument);

    // New fields
    console.log("ProjectsId:", projectsId);
    console.log("ClientId:", clientId);
    console.log("Status:", status);
    console.log("ReceivedDate:", receivedDate);
    console.log("Amount:", amount);

    // Close modal
    setShowAddPOModal(false);
  };





  // const [purchaseOrders, setPurchaseOrders] = useState(
  //   initialPurchaseOrders.map(po => ({ ...po, invoiceStatus: 'Active' }))
  // );
  const updateInvoiceStatus = (index, newStatus) => {
    const updatedPOs = [...purchaseOrders];
    updatedPOs[index].invoiceStatus = newStatus;
    setPurchaseOrders(updatedPOs);
  };


  const { estimates, loading, error } = useSelector((state) => state.costEstimates);
  console.log("Cost Estimates:", estimates.costEstimates);

  useEffect(() => {
    dispatch(fetchCostEstimates());
  }, [dispatch]);



  const Duplicate = (po) => {
    navigate(`/AddCostEstimates`, {
      state: {
        po,
        isDuplicate: true
      }
    });
  }
  const UpdateEstimate = (po) => {
    navigate(`/AddCostEstimates`, {
      state: {
        po,
      }
    });
  }
  //     const Duplicate =(po)=>{    
  //  navigate(`/duplicate/AddCostEstimates/${po._id}`, { state: { po}});
  //   }

  const getStatusClass = (status) => {
    switch ((status || "").toLowerCase().trim()) {
      case "active":
      case "active project":
      case "open":
        return "bg-primary text-white";
      case "inactive":
        return "bg-secondary text-white";
      case "in progress":
      case "pending":
        return "bg-warning text-dark";
      case "completed":
        return "bg-success text-white";
      case "closed":
        return "bg-dark text-white";
      case "cancelled":
        return "bg-danger text-white";
      case "on hold":
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteCostEstimate(_id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchCostEstimates());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }

  // PAGINATION SETUP FOR ESTIMATES
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;

  const totalItems = estimates?.costEstimates?.length || 0;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const paginatedEstimates = estimates?.costEstimates
    ?.slice()
    .reverse()
    .slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  return (
    <div
      className="p-4 m-3"
      style={{ backgroundColor: "white", borderRadius: "10px" }}
    >
      <h2 className="fw-semibold mb-3">Cost Estimates</h2>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="filters d-flex flex-wrap gap-1 mb-4">
          <div className="search-container flex-grow-1">
            <Form.Control
              type="search"
              placeholder="Search by Job #, Brand Name, Sub Brand, Flavour, Pack Type, Pack Size..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="designer-dropdown"
              className="custom-dropdown"
            >
              Sort by Client
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Sort by Client</Dropdown.Item>
              <Dropdown.Item>John Smith</Dropdown.Item>
              <Dropdown.Item>Sarah Johnson</Dropdown.Item>
              <Dropdown.Item>Unassigned</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          {/* <Dropdown className="filter-dropdown">
            <Dropdown.Toggle variant="light" id="priority-dropdown" className="custom-dropdown">
              All Priorities
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>All Priorities</Dropdown.Item>
              <Dropdown.Item>High</Dropdown.Item>
              <Dropdown.Item>Medium</Dropdown.Item>
              <Dropdown.Item>Low</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown> */}

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="viewall-dropdown"
              className="custom-dropdown"
            >
              View All
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoiced</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="status-dropdown"
              className="custom-dropdown"
            >
              All Status
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item>Active</Dropdown.Item>
              <Dropdown.Item>Invoice</Dropdown.Item>
              <Dropdown.Item>Cancelled</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Link to={"/AddCostEstimates"}>
            <button id="btn-All" className=" btn-dark" style={{ border: "none", borderRadius: "10px" }}>
              <BsPlusLg className="me-2" /> New Estimate
            </button>
          </Link>
        </div>
      </div>

      <div className="table-responsive" style={{ maxHeight: "900px", overflowY: "auto" }}>
        <Table hover className="align-middle sticky-header">
          <thead style={{ backgroundColor: "#f8f9fa", position: "sticky", top: 0, zIndex: 1 }}>
            <tr>
              <th><input type="checkbox" /></th>
              <th>CENo</th>
              <th>Date</th>
              <th>Client</th>
              <th>ProjectNo</th>
              <th>ProjectName</th>
              <th>Amount</th>
              <th>POStatus</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedEstimates?.map((po, index) => (

              <tr style={{ whiteSpace: "nowrap" }} key={po.poNumber}>
                <td><input type="checkbox" /></td>
                <td onClick={() => CreatJobs(po.projectId)}>
                  <Link style={{ textDecoration: 'none', border: 'none', color: 'inherit' }}>
                    CE-{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                  </Link>
                </td>
                <td>{new Date(po.estimateDate).toLocaleDateString("en-GB").slice(0, 8)}</td>
                <td>
                  {
                    Array.isArray(po.clientId)
                      ? po.clientId.map((client, i) => `${String(i + 1).padStart(4, '0')} (${client._id})`).join(", ")
                      : po.clientId
                        ? `${String(1).padStart(4, '0')} `
                        : "N/A"
                  }
                </td>
                <td>
                  {po.projectId?.map((project, i) => `${String(i + 1).padStart(4, '0')}`).join(", ")}
                </td>
                <td>
                  {po.projectId?.map((project) => project.projectName || project.name).join(", ")}
                </td>
                <td>
                  {po.lineItems?.reduce((total, item) => total + (item.amount || 0), 0).toFixed(2)}
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.POStatus}
                  </span>
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td>
                <td>
                  <div className="d-flex gap-2">
                    <button className="btn btn-sm btn-primary" onClick={() => Duplicate(po)}>Duplicate</button>
                    <button className="btn btn-sm btn-primary" onClick={() => handleConvertToInvoice(po)}>ConvertInvoice</button>
                    <button className="btn btn-sm btn-success" onClick={() => setShowAddPOModal(true)}>AddPO</button>
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateEstimate(po)}><BsPencil /></button>
                    {/* <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(po._id)}>
                          <FaTrash />
                        </button> */}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>


      {/* Modal for converting to invoice */}
      <Modal
        show={showInvoiceModal}
        onHide={() => setShowInvoiceModal(false)}
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>Convert Estimate to Invoice</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Number</Form.Label>
              {/* <Form.Control
                type="text"
                defaultValue={
                  selectedPO
                    ? `INV-${selectedPO.estimateRef.split("-")[1]}`
                    : ""
                }
                disabled
              /> */}
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Client</Form.Label>
              <Form.Control
                type="text"
                defaultValue={selectedPO?.client}
                readOnly
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Due Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <hr />
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control type="text" defaultValue="Web Design Services" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Quantity</Form.Label>
              <Form.Control type="number" defaultValue="1" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Rate</Form.Label>
              <Form.Control type="number" defaultValue={selectedPO?.amount} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Amount</Form.Label>
              <Form.Control
                type="text"
                // value={`$${selectedPO?.amount.toFixed(2)}`}
                disabled
              />
            </Form.Group>
            <hr />
            <div className="d-flex justify-content-between">
              <div>
                <strong>Subtotal:</strong>
                {/* <span> ${selectedPO?.amount.toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Tax (10%):</strong>
                {/* <span> ${calculateTax(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Total:</strong>
                {/* <span> ${calculateTotal(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => setShowInvoiceModal(false)}
          >
            Cancel
          </Button>
          <Button variant="primary">Create Invoice</Button>
        </Modal.Footer>
      </Modal>

      {/* Modal for Add Purchase Order */}
<Modal show={showAddPOModal} onHide={() => setShowAddPOModal(false)} size="md" > 
      <Modal.Header closeButton>
        <Modal.Title>Add Purchase Order</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-3">
            <Form.Label>Select Project</Form.Label>
            <Form.Select
              value={selectedProjectId}
              onChange={(e) => setSelectedProjectId(e.target.value)}
              className="form-control-sm"
            >
              <option value="">-- Select Project --</option>
              {projects.map((project) => (
                <option key={project._id} value={project._id}>
                  {project.name}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          {/* Assuming you want to select Client separately, 
          you might want a different state instead of selectedProjectId */}
          <Form.Group className="mb-3">
            <Form.Label>Select Client</Form.Label>
            <Form.Select
              value={selectedProjectId}  // <-- This should ideally be different state for client
              onChange={(e) => setSelectedProjectId(e.target.value)}
              className="form-control-sm"
            >
              <option value="">-- Select Client --</option>
              {projects.map((project) => (
                <option key={project._id} value={project._id}>
                  {project.name}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Date</Form.Label>
            <Form.Control
              type="date"
              value={poDate}
              onChange={(e) => setPODate(e.target.value)}
              className="form-control-sm"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Status</Form.Label>
            <Form.Select
              value={status}
              onChange={(e) => setStatus(e.target.value)}
              className="form-control-sm"
            >
              <option value="">-- Select Status --</option>
              {statuses.map((s) => (
                <option key={s} value={s}>
                  {s}
                </option>
              ))}
            </Form.Select>
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>PO Amount</Form.Label>
            <Form.Control
              type="number"
              value={amount}
              onChange={(e) => setAmount(e.target.value)}
              className="form-control-sm"
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Upload PO Document</Form.Label>
            <div className="file-upload">
              <input
                type="file"
                accept=".pdf,.doc,.docx"
                onChange={handleFileUpload}
                className="form-control-sm"
              />
              <div className="upload-info">
                <BsUpload className="me-2" /> Upload a file (PDF, DOC up to 10MB)
              </div>
            </div>
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={() => setShowAddPOModal(false)}>
          Cancel
        </Button>
        <Button variant="primary" onClick={handleSavePO}>
          Save PO
        </Button>
      </Modal.Footer>
    </Modal>


      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mt-3">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                Previous
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                Next
              </button>
            </li>
          </ul>
        </div>

      )}

    </div>
  );
}

export default CostEstimates;































import React, { useState, useMemo, useEffect } from 'react';
import { FaSearch, FaCalendarAlt, FaPencilAlt, FaTrashAlt, FaPlus } from 'react-icons/fa';
import AddTimeLog from './AddTimeLog';
import Extrahr from './Extrahr';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchTimeLogss } from '../../../redux/slices/TimeLogsSlice';
import { Button } from 'react-bootstrap';

function TimeLogs() {
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingLog, setEditingLog] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedProject, setSelectedProject] = useState('All Projects');

  const dispatch = useDispatch();

  const [timeLogs, setTimeLogs] = useState([
    {
      date: '2024/01/19',
      jobId: '#JOB102',
      project: 'Holiday Package',
      hours: 4.5,
      taskNotes: 'Initial concept development and sketching',
      day: 14,
      ExtraHours: "12"
    },
    {
      date: '2024/01/19',
      jobId: '#JOB101',
      project: 'ProductCatalog',
      hours: 6.0,
      taskNotes: 'Layout design and photo editing',
      day: "16",
      ExtraHours: "25"
    },
    {
      date: '2024/01/18',
      jobId: '#JOB102',
      project: 'HolidaywPackage ',
      hours: 5.5,
      taskNotes: 'Color palette selection and mockups',
      day: "22",
      ExtraHours: "9.5"
    },
    {
      date: '2024/01/18',
      jobId: '#JOB100',
      project: 'BrandGuidelines',
      hours: 8,
      taskNotes: 'Typography system and logo variations',
      day: "28",
    }
  ]);

  // const itemsPerPage = 4;
  // const totalPages = Math.ceil(timeLogs.length / itemsPerPage);

  // const filteredLogs = useMemo(() => {
  //   return timeLogs.filter(log => {
  //     const matchesSearch = searchQuery.toLowerCase() === '' ||
  //       log.project.toLowerCase().includes(searchQuery.toLowerCase()) ||
  //       log.jobId.toLowerCase().includes(searchQuery.toLowerCase()) ||
  //       log.taskNotes.toLowerCase().includes(searchQuery.toLowerCase());

  //     const matchesDate = selectedDate === '' || log.date === selectedDate;

  //     const matchesProject = selectedProject === 'All Projects' ||
  //       log.project === selectedProject;

  //     return matchesSearch && matchesDate && matchesProject;
  //   });
  // }, [timeLogs, searchQuery, selectedDate, selectedProject]);

  // const paginatedLogs = useMemo(() => {
  //   const startIndex = (currentPage - 1) * itemsPerPage;
  //   return filteredLogs.slice(startIndex, startIndex + itemsPerPage);
  // }, [filteredLogs, currentPage]);

  // const totalHours = filteredLogs.reduce((sum, log) => sum + log.hours, 0);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleAddTimeLog = () => {
    setShowAddModal(true);
  };

  const handleEdit = (jobId) => {
    const logToEdit = timeLogs.find(log => log.jobId === jobId);
    setEditingLog(logToEdit);
    setShowAddModal(true);
  };

  const handleDelete = (jobId) => {
    if (window.confirm('Are you sure you want to delete this time log?')) {
      setTimeLogs(prev => prev.filter(log => log.jobId !== jobId));
    }
  };

  const handleAddOrUpdate = (formData) => {
    if (editingLog) {
      setTimeLogs(prev =>
        prev.map(log =>
          log.jobId === editingLog.jobId ? { ...formData } : log
        )
      );
      setEditingLog(null);
    } else {
      setTimeLogs(prev => [...prev, formData]);
    }
  };

  const handleCloseModal = () => {
    setShowAddModal(false);
    setEditingLog(null);
  };

  //  all client
  const { timelogs, error, loading } = useSelector((state) => state.TimeLogss);
  console.log(timelogs.TimeLogss);

  useEffect(() => {
    dispatch(fetchTimeLogss());
  }, [dispatch]);

  const itemsPerPage = 7;
  const totalPages = Math.ceil((timelogs.TimeLogss?.length || 0) / itemsPerPage);
  const paginatedTimeLogss = timelogs.TimeLogss?.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );


  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h4 className="mb-0">Time Logs</h4>
        <div className="d-flex gap-3">

          <Link to={"/AddTimelog"} className="text-decoration-none">
            <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
              <FaPlus /> Add Time Log
            </button>
          </Link>
        </div>
      </div>

      <div className="row g-3 mb-4">
        <div className="col-md-4">
          {/* <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaSearch className="text-muted" />
            </span>
            <input
              type="text"
              className="form-control border-start-0"
              placeholder="Search time logs..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div> */}
        </div>
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaCalendarAlt className="text-muted" />
            </span>
            <input
              type="date"
              className="form-control border-start-0"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <select
            className="form-select"
            value={selectedProject}
            onChange={(e) => setSelectedProject(e.target.value)}
          >
            <option>All Projects</option>
            <option>Holiday Package Design</option>
            <option>Product Catalog</option>
            <option>Brand Guidelines</option>
          </select>
        </div>
      </div>

      <div className="card shadow-sm">
        <div className="card-body p-0">
          <div className="table-responsive">
            <table className="table table-hover mb-0">
              <thead className="bg-light">
                <tr>
                  <th>Date</th>
                  <th>JobID</th>
                  <th>Project</th>
                  <th style={{ whiteSpace: 'nowrap' }}>Extra Hours</th>
                  <th>Hours</th>
                  <th>Task Notes</th>
                  <th className="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                {paginatedTimeLogss?.map((log, index) => {
                  const isDiscrepant = log.hours < 8;
                  return (
                    <tr key={index}>
                      <td>{new Date(log.date).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>

                      <td className="no-border-bottom">
                        #JOB{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                      </td>
                      <td style={{ whiteSpace: 'nowrap' }} key={index}>
                        {log.projectId?.[0]?.projectName || 'No Project Name'}
                      </td>
                      <td >{log.extraHours}</td>
                      <td>{log.hours}</td>

                      <td style={{ whiteSpace: 'nowrap' }}>{log.taskNotes}</td>

                      <td className="text-end" style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>

                        <Link to={"/Extrahr"} className="text-decoration-none">
                          <Button
                            className="btn d-flex align-items-center gap-2"
                            size="sm"
                            id='All_btn'
                            variant="dark"
                            onClick={() => handleLogTime(job.id)}
                          >
                            <FaPlus /> ExtraTime
                          </Button>
                        </Link>


                        <button
                          className="btn btn-link text-dark p-0 me-3"
                          onClick={() => handleEdit(log.jobId)}
                        >
                          <FaPencilAlt />
                        </button>
                        <button
                          className="btn btn-link text-danger p-0"
                          onClick={() => handleDelete(log.jobId)}
                        >
                          <FaTrashAlt />
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* <div className="d-flex justify-content-between align-items-center mt-3">
        <div className="text-muted small">
          Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, filteredLogs.length)} of {filteredLogs.length} entries
        </div>
        <div className="d-flex align-items-center">
          <div className="me-3">
            <strong>Total Hours: {totalHours.toFixed(1)}</strong>
          </div>
          <nav>
            <ul className="pagination mb-0">
              <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                <button
                  className="page-link"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  Previous
                </button>
              </li>
              {[...Array(totalPages)].map((_, i) => (
                <li key={i} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                  <button
                    className="page-link"
                    onClick={() => handlePageChange(i + 1)}
                  >
                    {i + 1}
                  </button>
                </li>
              ))}
              <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                <button
                  className="page-link"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  Next
                </button>
              </li>
            </ul>
          </nav>
        </div>
      </div> */}

      {/* {showAddModal && (
        <AddTimeLog
          onClose={handleCloseModal}
          onAdd={handleAddOrUpdate}
          editData={editingLog}
        />
      )} */}

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing 1 to {paginatedTimeLogss?.length || 0} of {timelogs.TimeLogss?.length || 0} entries
          </div>

          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                Previous
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                Next
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default TimeLogs;






































import React, { useState, useMemo, useEffect } from 'react';
import { FaSearch, FaCalendarAlt, FaPencilAlt, FaTrashAlt, FaPlus } from 'react-icons/fa';
import AddTimeLog from './AddTimeLog';
import Extrahr from './Extrahr';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchTimeLogss } from '../../../redux/slices/TimeLogsSlice';
import { Button } from 'react-bootstrap';

function TimeLogs() {
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingLog, setEditingLog] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedProject, setSelectedProject] = useState('All Projects');

  const dispatch = useDispatch();

  const [timeLogs, setTimeLogs] = useState([
    {
      date: '2024/01/19',
      jobId: '#JOB102',
      project: 'Holiday Package',
      hours: 4.5,
      taskNotes: 'Initial concept development and sketching',
      day: 14,
      ExtraHours: "12"
    },
    {
      date: '2024/01/19',
      jobId: '#JOB101',
      project: 'ProductCatalog',
      hours: 6.0,
      taskNotes: 'Layout design and photo editing',
      day: "16",
      ExtraHours: "25"
    },
    {
      date: '2024/01/18',
      jobId: '#JOB102',
      project: 'HolidaywPackage ',
      hours: 5.5,
      taskNotes: 'Color palette selection and mockups',
      day: "22",
      ExtraHours: "9.5"
    },
    {
      date: '2024/01/18',
      jobId: '#JOB100',
      project: 'BrandGuidelines',
      hours: 8,
      taskNotes: 'Typography system and logo variations',
      day: "28",
    }
  ]);

  // const itemsPerPage = 4;
  // const totalPages = Math.ceil(timeLogs.length / itemsPerPage);

  // const filteredLogs = useMemo(() => {
  //   return timeLogs.filter(log => {
  //     const matchesSearch = searchQuery.toLowerCase() === '' ||
  //       log.project.toLowerCase().includes(searchQuery.toLowerCase()) ||
  //       log.jobId.toLowerCase().includes(searchQuery.toLowerCase()) ||
  //       log.taskNotes.toLowerCase().includes(searchQuery.toLowerCase());

  //     const matchesDate = selectedDate === '' || log.date === selectedDate;

  //     const matchesProject = selectedProject === 'All Projects' ||
  //       log.project === selectedProject;

  //     return matchesSearch && matchesDate && matchesProject;
  //   });
  // }, [timeLogs, searchQuery, selectedDate, selectedProject]);

  // const paginatedLogs = useMemo(() => {
  //   const startIndex = (currentPage - 1) * itemsPerPage;
  //   return filteredLogs.slice(startIndex, startIndex + itemsPerPage);
  // }, [filteredLogs, currentPage]);

  // const totalHours = filteredLogs.reduce((sum, log) => sum + log.hours, 0);

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleAddTimeLog = () => {
    setShowAddModal(true);
  };

  const handleEdit = (jobId) => {
    const logToEdit = timeLogs.find(log => log.jobId === jobId);
    setEditingLog(logToEdit);
    setShowAddModal(true);
  };

  const handleDelete = (jobId) => {
    if (window.confirm('Are you sure you want to delete this time log?')) {
      setTimeLogs(prev => prev.filter(log => log.jobId !== jobId));
    }
  };

  const handleAddOrUpdate = (formData) => {
    if (editingLog) {
      setTimeLogs(prev =>
        prev.map(log =>
          log.jobId === editingLog.jobId ? { ...formData } : log
        )
      );
      setEditingLog(null);
    } else {
      setTimeLogs(prev => [...prev, formData]);
    }
  };

  const handleCloseModal = () => {
    setShowAddModal(false);
    setEditingLog(null);
  };

  //  all client
  const { timelogs, error, loading } = useSelector((state) => state.TimeLogss);
  console.log(timelogs.TimeLogss);

  useEffect(() => {
    dispatch(fetchTimeLogss());
  }, [dispatch]);

  const itemsPerPage = 7;
  const totalPages = Math.ceil((timelogs.TimeLogss?.length || 0) / itemsPerPage);
  const paginatedTimeLogss = timelogs.TimeLogss?.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );


  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h4 className="mb-0">Time Logs</h4>
        <div className="d-flex gap-3">

          <Link to={"/AddTimelog"} className="text-decoration-none">
            <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
              <FaPlus /> Add Time Log
            </button>
          </Link>
        </div>
      </div>

     <div className="row g-3 mb-4">
             <div className="col-md-4">
               <div className="input-group">
                 <span className="input-group-text bg-white border-end-0">
                   <FaSearch className="text-muted" />
                 </span>
                 <input
                   type="text"
                   className="form-control border-start-0"
                   placeholder="Search time logs..."
                   value={searchQuery}
                   onChange={(e) => setSearchQuery(e.target.value)}
                 />
               </div>
             </div>
             <div className="col-md-4">
               <div className="input-group">
                 <span className="input-group-text bg-white border-end-0">
                   <FaCalendarAlt className="text-muted" />
                 </span>
                 <input
                   type="date"
                   className="form-control border-start-0"
                   value={selectedDate}
                   onChange={(e) => setSelectedDate(e.target.value)}
                 />
               </div>
             </div>
             <div className="col-md-4">
               <select
                 className="form-select"
                 value={selectedProject}
                 onChange={(e) => setSelectedProject(e.target.value)}
               >
                 <option>All Projects</option>
                 <option>Holiday Package Design</option>
                 <option>Product Catalog</option>
                 <option>Brand Guidelines</option>
               </select>
             </div>
           </div>

      <div className="card shadow-sm">
        <div className="card-body p-0">
          <div className="table-responsive">
            <table className="table table-hover mb-0">
              <thead className="bg-light">
                <tr>
                  <th>Date</th>
                  <th>JobID</th>
                  <th>Project</th>
                  <th style={{ whiteSpace: 'nowrap' }}>Extra Hours</th>
                  <th>Hours</th>
                  <th>Task Notes</th>
                  <th className="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                {paginatedTimeLogss?.map((log, index) => {
                  const isDiscrepant = log.hours < 8;
                  return (
                    <tr key={index}>
                      <td>{new Date(log.date).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>

                      <td className="no-border-bottom">
                        #JOB{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                      </td>
                      <td style={{ whiteSpace: 'nowrap' }} key={index}>
                        {log.projectId?.[0]?.projectName || 'No Project Name'}
                      </td>
                      <td >{log.extraHours}</td>
                      <td>{log.hours}</td>

                      <td style={{ whiteSpace: 'nowrap' }}>{log.taskNotes}</td>

                      <td className="text-end" style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>

                        <Link to={"/Extrahr"} className="text-decoration-none">
                          <Button
                            className="btn d-flex align-items-center gap-2"
                            size="sm"
                            id='All_btn'
                            variant="dark"
                            onClick={() => handleLogTime(job.id)}
                          >
                            <FaPlus /> ExtraTime
                          </Button>
                        </Link>


                        <button
                          className="btn btn-link text-dark p-0 me-3"
                          onClick={() => handleEdit(log.jobId)}
                        >
                          <FaPencilAlt />
                        </button>
                        <button
                          className="btn btn-link text-danger p-0"
                          onClick={() => handleDelete(log.jobId)}
                        >
                          <FaTrashAlt />
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* <div className="d-flex justify-content-between align-items-center mt-3">
        <div className="text-muted small">
          Showing {((currentPage - 1) * itemsPerPage) + 1} to {Math.min(currentPage * itemsPerPage, filteredLogs.length)} of {filteredLogs.length} entries
        </div>
        <div className="d-flex align-items-center">
          <div className="me-3">
            <strong>Total Hours: {totalHours.toFixed(1)}</strong>
          </div>
          <nav>
            <ul className="pagination mb-0">
              <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                <button
                  className="page-link"
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  Previous
                </button>
              </li>
              {[...Array(totalPages)].map((_, i) => (
                <li key={i} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                  <button
                    className="page-link"
                    onClick={() => handlePageChange(i + 1)}
                  >
                    {i + 1}
                  </button>
                </li>
              ))}
              <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                <button
                  className="page-link"
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  Next
                </button>
              </li>
            </ul>
          </nav>
        </div>
      </div> */}

      {/* {showAddModal && (
        <AddTimeLog
          onClose={handleCloseModal}
          onAdd={handleAddOrUpdate}
          editData={editingLog}
        />
      )} */}

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing 1 to {paginatedTimeLogss?.length || 0} of {timelogs.TimeLogss?.length || 0} entries
          </div>

          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                Previous
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                Next
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default TimeLogs;





<td style={{ color: isDiscrepant ? 'red' : 'inherit', fontWeight: isDiscrepant ? 'bold' : 'normal' }}>
                        {log.hours}
                      </td>




















                      import React, { useState, useEffect } from 'react';
                      import { FaSearch, FaCalendarAlt, FaPencilAlt, FaTrashAlt, FaPlus } from 'react-icons/fa';
                      import { Link } from 'react-router-dom';
                      import { useDispatch, useSelector } from 'react-redux';
                      import { fetchTimeLogss } from '../../../redux/slices/TimeLogsSlice';
                      import { Button, Form, Modal } from "react-bootstrap";
                      
                      function TimeLogs() {
                        const dispatch = useDispatch();
                      
                        const [showAssignModal, setShowAssignModal] = useState(false);
                        const [selectedDesigner, setSelectedDesigner] = useState('');
                        const [assignmentDescription, setAssignmentDescription] = useState('');
                        const [selectedJobs, setSelectedJobs] = useState({});
                        const [errorMessage, setErrorMessage] = useState('');
                        const [currentPage, setCurrentPage] = useState(1);
                        const [searchQuery, setSearchQuery] = useState('');
                        const [selectedDate, setSelectedDate] = useState('');
                        const [selectedProject, setSelectedProject] = useState('All Projects');
                      
                        const { timelogs, error, loading } = useSelector((state) => state.TimeLogss);
                      
                        useEffect(() => {
                          dispatch(fetchTimeLogss());
                        }, [dispatch]);
                      
                        const itemsPerPage = 7;
                        const totalPages = Math.ceil((timelogs.TimeLogss?.length || 0) / itemsPerPage);
                        const paginatedTimeLogss = timelogs.TimeLogss?.slice(
                          (currentPage - 1) * itemsPerPage,
                          currentPage * itemsPerPage
                        );
                      
                        const handleCheckboxChange = (jobId) => {
                          setSelectedJobs((prev) => ({
                            ...prev,
                            [jobId]: !prev[jobId],
                          }));
                        };
                      
                        const handleSubmitAssignment = () => {
                          const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                          if (selectedJobIds.length === 0) {
                            setErrorMessage("Please select at least 1 job to assign.");
                            setTimeout(() => setErrorMessage(""), 3000);
                            return;
                          }
                      
                          if (!selectedDesigner) {
                            setErrorMessage("Please select a designer.");
                            setTimeout(() => setErrorMessage(""), 3000);
                            return;
                          }
                      
                          const payload = {
                            id: selectedJobIds,
                            assign: selectedDesigner,
                            description: assignmentDescription
                          };
                      
                          console.log("Assignment Payload:", payload);
                          // dispatch(UpdateJobAssign(payload)); // Uncomment when action is ready
                      
                          setShowAssignModal(false);
                          setSelectedDesigner('');
                          setAssignmentDescription('');
                        };
                      
                        return (
                          <div className="container py-4">
                            <div className="d-flex justify-content-between align-items-center mb-4">
                              <h4 className="mb-0">Time Logs</h4>
                              <div className="d-flex gap-3">
                                <Button
                                  className="m-2"
                                  variant="primary"
                                  onClick={() => {
                                    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                                    if (selectedJobIds.length === 0) {
                                      setErrorMessage("Please select at least 1 job to assign.");
                                      setTimeout(() => setErrorMessage(""), 3000);
                                    } else {
                                      setShowAssignModal(true);
                                    }
                                  }}
                                >
                                  Assign
                                </Button>
                                <Link to={"/AddTimelog"} className="text-decoration-none">
                                  <button className="btn btn-dark d-flex align-items-center gap-2">
                                    <FaPlus /> Add Time Log
                                  </button>
                                </Link>
                              </div>
                            </div>
                      
                            {errorMessage && <div className="alert alert-danger">{errorMessage}</div>}
                      
                            {/* Filters */}
                            <div className="row g-3 mb-4">
                              <div className="col-md-4">
                                <div className="input-group">
                                  <span className="input-group-text bg-white border-end-0">
                                    <FaSearch className="text-muted" />
                                  </span>
                                  <input
                                    type="text"
                                    className="form-control border-start-0"
                                    placeholder="Search time logs..."
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                  />
                                </div>
                              </div>
                              <div className="col-md-4">
                                <div className="input-group">
                                  <span className="input-group-text bg-white border-end-0">
                                    <FaCalendarAlt className="text-muted" />
                                  </span>
                                  <input
                                    type="date"
                                    className="form-control border-start-0"
                                    value={selectedDate}
                                    onChange={(e) => setSelectedDate(e.target.value)}
                                  />
                                </div>
                              </div>
                              <div className="col-md-4">
                                <select
                                  className="form-select"
                                  value={selectedProject}
                                  onChange={(e) => setSelectedProject(e.target.value)}
                                >
                                  <option>All Projects</option>
                                  <option>Holiday Package Design</option>
                                  <option>Product Catalog</option>
                                  <option>Brand Guidelines</option>
                                </select>
                              </div>
                            </div>
                      
                            {/* Table */}
                            <div className="card shadow-sm">
                              <div className="card-body p-0">
                                <div className="table-responsive">
                                  <table className="table table-hover mb-0">
                                    <thead className="bg-light">
                                      <tr>
                                        <th>
                                          <input
                                            type="checkbox"
                                            onChange={(e) => {
                                              const checked = e.target.checked;
                                              const newSelected = {};
                                              paginatedTimeLogss?.forEach((log) => {
                                                if (log._id) newSelected[log._id] = checked;
                                              });
                                              setSelectedJobs(newSelected);
                                            }}
                                            checked={
                                              paginatedTimeLogss?.length > 0 &&
                                              paginatedTimeLogss?.every((log) => selectedJobs[log._id])
                                            }
                                          />
                                        </th>
                                        <th>Date</th>
                                        <th>JobID</th>
                                        <th>Project</th>
                                        <th>Extra Hours</th>
                                        <th>Hours</th>
                                        <th>Task Notes</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {paginatedTimeLogss?.map((log, index) => (
                                        <tr key={index}>
                                          <td>
                                            <input
                                              type="checkbox"
                                              checked={selectedJobs[log._id] || false}
                                              onChange={() => handleCheckboxChange(log._id)}
                                            />
                                          </td>
                                          <td>{new Date(log.date).toLocaleDateString()}</td>
                                          <td>
                                            #JOB{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                                          </td>
                                          <td>{log.projectId?.[0]?.projectName || 'No Project'}</td>
                                          <td>{log.extraHours === 0 ? '-' : log.extraHours}</td>
                                          <td style={{ color: log.hours < 8 ? 'red' : 'inherit' }}>{log.hours}</td>
                                          <td>{log.taskNotes}</td>
                                        </tr>
                                      ))}
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                      
                            {/* Pagination */}
                            {!loading && !error && (
                              <div className="d-flex justify-content-between align-items-center my-3">
                                <div className="text-muted small">
                                  Showing {paginatedTimeLogss?.length || 0} of {timelogs.TimeLogss?.length || 0} entries
                                </div>
                                <ul className="pagination pagination-sm mb-0">
                                  <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                                    <button className="page-link" onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}>
                                      Previous
                                    </button>
                                  </li>
                                  {Array.from({ length: totalPages }, (_, i) => (
                                    <li key={i} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                                      <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                                        {i + 1}
                                      </button>
                                    </li>
                                  ))}
                                  <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                                    <button className="page-link" onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}>
                                      Next
                                    </button>
                                  </li>
                                </ul>
                              </div>
                            )}
                      
                            {/* Assign Modal */}
                            <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
                              <Modal.Header closeButton>
                                <Modal.Title>Assign Job</Modal.Title>
                              </Modal.Header>
                              <Modal.Body>
                                <Form>
                                  <Form.Group className="mb-3">
                                    <Form.Label>Select Designer</Form.Label>
                                    <Form.Select
                                      value={selectedDesigner}
                                      onChange={(e) => setSelectedDesigner(e.target.value)}
                                    >
                                      <option value="">-- Select --</option>
                                      <option value="Production">Production</option>
                                      <option value="Designer">Designer</option>
                                    </Form.Select>
                                  </Form.Group>
                      
                                  <Form.Group className="mb-3">
                                    <Form.Label>Description</Form.Label>
                                    <Form.Control
                                      as="textarea"
                                      rows={3}
                                      value={assignmentDescription}
                                      onChange={(e) => setAssignmentDescription(e.target.value)}
                                      placeholder="Enter assignment details or instructions..."
                                    />
                                  </Form.Group>
                                </Form>
                              </Modal.Body>
                              <Modal.Footer>
                                <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
                                  Cancel
                                </Button>
                                <Button variant="primary" onClick={handleSubmitAssignment}>
                                  Assign
                                </Button>
                              </Modal.Footer>
                            </Modal>
                          </div>
                        );
                      }
                      
                      export default TimeLogs;
                      






















































                      
                      import React, { useState, useMemo, useEffect } from 'react';
                      import { FaSearch, FaCalendarAlt, FaPencilAlt, FaTrashAlt, FaPlus } from 'react-icons/fa';
                      import AddTimeLog from './AddTimeLog';
                      import Extrahr from './Extrahr';
                      import { Link, useNavigate } from 'react-router-dom';
                      import { useDispatch, useSelector } from 'react-redux';
                      import { deleteTimeLogs, fetchTimeLogss, updateExtraHours } from '../../../redux/slices/TimeLogsSlice';
                      import { Button, Form, Modal } from "react-bootstrap";
                      import Swal from 'sweetalert2';
                      
                      function TimeLogs() {
                        const [showAddModal, setShowAddModal] = useState(false);
                        const [editingLog, setEditingLog] = useState(null);
                        const [currentPage, setCurrentPage] = useState(1);
                        const [searchQuery, setSearchQuery] = useState('');
                        const [selectedDate, setSelectedDate] = useState('');
                        const [selectedProject, setSelectedProject] = useState('All Projects');
                      const [selectedLogId, setSelectedLogId] = useState(null);
                      
                        const dispatch = useDispatch();
                        const navigate = useNavigate()
                      
                        // ///////////////////////////////
                        const [showAssignModal, setShowAssignModal] = useState(false);
                        const [selectedDesigner, setSelectedDesigner] = useState('');
                        const [assignmentDescription, setAssignmentDescription] = useState('');
                        const [selectedJobs, setSelectedJobs] = useState({});
                        const [errorMessage, setErrorMessage] = useState('');
                        const [extraHours, setExtraHours] = useState('');
                      
                      
                      
                        useEffect(() => {
                          dispatch(fetchTimeLogss());
                        }, [dispatch]);
                      
                      
                        const handleCheckboxChange = (jobId) => {
                          setSelectedJobs((prev) => ({
                            ...prev,
                            [jobId]: !prev[jobId],
                          }));
                        };
                        const handleSubmitAssignment = () => {
                          const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                      
                          if (selectedJobIds.length === 0) {
                            setErrorMessage("Please select at least 1 job to assign.");
                            setTimeout(() => setErrorMessage(""), 3000);
                            return;
                          }
                      
                          if (!extraHours) {
                            setErrorMessage("Please enter extra hours.");
                            setTimeout(() => setErrorMessage(""), 3000);
                            return;
                          }
                      
                          const payload = {
                            id: selectedJobIds,
                            extraHours: extraHours,
                          };
                      
                          console.log("Dispatching payload:", payload);
                      
                          dispatch(updateExtraHours(payload))
                            .unwrap()
                            .then(() => {
                              setSelectedJobs({});
                              dispatch(fetchTimeLogss());
                              setShowAssignModal(false);
                              setExtraHours('');
                            })
                            .catch((error) => {
                              setErrorMessage(`Failed to update: ${error}`);
                              setTimeout(() => setErrorMessage(""), 3000);
                            });
                        };
                      
                      
                        // ////////////////////////
                        const [timeLogs, setTimeLogs] = useState([
                          {
                            date: '2024/01/19',
                            jobId: '#JOB102',
                            project: 'Holiday Package',
                            hours: 4.5,
                            taskNotes: 'Initial concept development and sketching',
                            day: 14,
                            ExtraHours: "12"
                          },
                          {
                            date: '2024/01/19',
                            jobId: '#JOB101',
                            project: 'ProductCatalog',
                            hours: 6.0,
                            taskNotes: 'Layout design and photo editing',
                            day: "16",
                            ExtraHours: "25"
                          },
                          {
                            date: '2024/01/18',
                            jobId: '#JOB102',
                            project: 'HolidaywPackage ',
                            hours: 5.5,
                            taskNotes: 'Color palette selection and mockups',
                            day: "22",
                            ExtraHours: "9.5"
                          },
                          {
                            date: '2024/01/18',
                            jobId: '#JOB100',
                            project: 'BrandGuidelines',
                            hours: 8,
                            taskNotes: 'Typography system and logo variations',
                            day: "28",
                          }
                        ]);
                      
                      
                        //  all client
                        const { timelogs, error, loading } = useSelector((state) => state.TimeLogss);
                        console.log(timelogs.TimeLogss);
                      
                        useEffect(() => {
                          dispatch(fetchTimeLogss());
                        }, [dispatch]);
                      
                        const itemsPerPage = 7;
                        const totalPages = Math.ceil((timelogs.TimeLogss?.length || 0) / itemsPerPage);
                        const paginatedTimeLogss = timelogs.TimeLogss?.slice(
                          (currentPage - 1) * itemsPerPage,
                          currentPage * itemsPerPage
                        );
                      
                      
                        const handleEdit = (log) => {
                          navigate(`/AddTimelog`, { state: { log } });
                        };
                      
                        const handleDelete = (_id) => {
                          Swal.fire({
                            title: "Are you sure?",
                            text: "You won't be able to revert this!",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#3085d6",
                            cancelButtonColor: "#d33",
                            confirmButtonText: "Yes, delete it!",
                          }).then((result) => {
                            if (result.isConfirmed) {
                              dispatch(deleteTimeLogs(_id))
                                .then(() => {
                                  Swal.fire("Deleted!", "The document has been deleted.", "success");
                                  dispatch(fetchTimeLogss());
                                })
                                .catch(() => {
                                  Swal.fire("Error!", "Something went wrong.", "error");
                                });
                            }
                          });
                        }
                        // time set am aur mp 
                      
                        function formatTimeTo12Hour(time24) {
                          if (!time24) return '';
                      
                          // Sometimes time might have seconds or extra parts, so just take first two parts
                          const [hourStr, minuteStr] = time24.split(':');
                          let hour = parseInt(hourStr, 10);
                          const minute = minuteStr ? minuteStr.padStart(2, '0') : '00';
                      
                          const ampm = hour >= 12 ? 'PM' : 'AM';
                          hour = hour % 12;
                          if (hour === 0) hour = 12;
                      
                          return `${hour}:${minute} ${ampm}`;
                        }
                      
                        // Helper to convert "HH:MM" to decimal hours for comparison, e.g. "7:30" -> 7.5
                        function timeStringToDecimalHours(time24) {
                          if (!time24) return 0;
                          const [hourStr, minuteStr] = time24.split(':');
                          const hour = parseInt(hourStr, 10);
                          const minute = parseInt(minuteStr || '0', 10);
                          return hour + minute / 60;
                        }
                      
                        return (
                          <div className="container py-4">
                            <div className="d-flex justify-content-between align-items-center mb-4">
                              <h3 className="mb-0">Time Logs</h3>
                              <div className="d-flex gap-3">
                      
                                <Link className="text-decoration-none">
                                  <Button
                                    className="btn d-flex align-items-center gap-2"
                                    size="sm"
                                    id='All_btn'
                                    variant="dark"
                                    onClick={() => {
                                      const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
                      
                                      if (selectedJobIds.length === 0) {
                                        setErrorMessage("Please select at least 1 List to assign.");
                                        setTimeout(() => setErrorMessage(""), 3000);
                                      } else {
                                        const dataToSend = {
                                          id: selectedJobIds,
                                          extraHours: extraHours || "0:00",
                                        };
                      
                                        // ✅ Log formatted data
                                        console.log("Payload to send:", dataToSend);
                      
                                        // Optionally, send this to server here
                                        setShowAssignModal(true);
                                      }
                                    }}
                                  >
                                    <FaPlus /> ExtraTime
                                  </Button>
                      
                      
                                </Link>
                                <Link to={"/AddTimelog"} className="text-decoration-none">
                                  <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
                                    <FaPlus /> Add Time Log
                                  </button>
                                </Link>
                              </div>
                            </div>
                            {errorMessage && <div className="alert alert-danger">{errorMessage}</div>}
                      
                            <div className="row g-3 mb-4">
                              <div className="col-md-4">
                                <div className="input-group">
                                  <span className="input-group-text bg-white border-end-0">
                                    <FaSearch className="text-muted" />
                                  </span>
                                  <input
                                    type="text"
                                    className="form-control border-start-0"
                                    placeholder="Search time logs..."
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                  />
                                </div>
                              </div>
                              <div className="col-md-4">
                                <div className="input-group">
                                  <span className="input-group-text bg-white border-end-0">
                                    <FaCalendarAlt className="text-muted" />
                                  </span>
                                  <input
                                    type="date"
                                    className="form-control border-start-0"
                                    value={selectedDate}
                                    onChange={(e) => setSelectedDate(e.target.value)}
                                  />
                                </div>
                              </div>
                              <div className="col-md-4">
                                <select
                                  className="form-select"
                                  value={selectedProject}
                                  onChange={(e) => setSelectedProject(e.target.value)}
                                >
                                  <option>All Projects</option>
                                  <option>Holiday Package Design</option>
                                  <option>Product Catalog</option>
                                  <option>Brand Guidelines</option>
                                </select>
                              </div>
                            </div>
                      
                            <div className="card shadow-sm">
                              <div className="card-body p-0">
                                <div className="table-responsive">
                                  <table className="table table-hover mb-0">
                                    <thead className="bg-light">
                                      <tr>
                                        <th>
                                          <input
                                            type="checkbox"
                                            onChange={(e) => {
                                              const checked = e.target.checked;
                                              const newSelected = {};
                                              paginatedTimeLogss?.forEach((log) => {
                                                if (log._id) newSelected[log._id] = checked;
                                              });
                                              setSelectedJobs(newSelected);
                                            }}
                                            checked={
                                              paginatedTimeLogss?.length > 0 &&
                                              paginatedTimeLogss?.every((log) => selectedJobs[log._id])
                                            }
                                          />
                                        </th>
                                        <th>Date</th>
                                        <th>JobID</th>
                                        <th>Project</th>
                                        <th style={{ whiteSpace: 'nowrap' }}>Extra Hours</th>
                                        <th>Hours</th>
                                        <th>Task Notes</th>
                                        <th className="text-end">Actions</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {paginatedTimeLogss?.map((log, index) => {
                                        const extraHoursDecimal = timeStringToDecimalHours(log.extraHours);
                                        const hoursDecimal = timeStringToDecimalHours(log.hours);
                      
                                        const isHoursDiscrepant = hoursDecimal < 8;
                                        const isExtraHoursDiscrepant = extraHoursDecimal < 8;
                                        return (
                                          <tr key={index}>
                                            <td>
                                              <input
                                                type="checkbox"
                                                checked={selectedJobs[log._id] || false}
                                                onChange={() => handleCheckboxChange(log._id)}
                                              />
                                            </td>
                      
                                            <td>{new Date(log.date).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                      
                                            <td className="no-border-bottom">
                                              #JOB{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                                            </td>
                                            <td style={{ whiteSpace: 'nowrap' }} key={index}>
                                              {log.projectId?.[0]?.projectName || 'No Project Name'}
                                            </td>
                                            <td>
                                              {(!log.extraHours || log.extraHours === '0' || log.extraHours === '0:00') ? '-' : formatTimeTo12Hour(log.extraHours)}
                                            </td>
                      
                                            <td
                                              style={{
                                                color: isHoursDiscrepant ? 'red' : 'inherit',
                                                fontWeight: isHoursDiscrepant ? 'bold' : 'normal',
                                                whiteSpace: 'nowrap',
                                              }}
                                            >
                                              {formatTimeTo12Hour(log.hours)}
                                            </td>
                      
                                            <td style={{ whiteSpace: 'nowrap' }}>{log.taskNotes}</td>
                      
                                            <td className="text-end" style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                                              {/* <Link className="text-decoration-none">
                                                <Button
                                                  className="btn d-flex align-items-center gap-2"
                                                  size="sm"
                                                  id="All_btn"
                                                  variant="dark"
                                                  onClick={() => setShowAssignModal(true)}
                                                >
                                                  <FaPlus /> ExtraTime
                                                </Button>
                                              </Link> */}
                                              <button
                                                className="btn btn-link text-dark p-0 me-3"
                                                onClick={() => handleEdit(log)}
                                              >
                                                <FaPencilAlt />
                                              </button>
                                              <button
                                                className="btn btn-link text-danger p-0"
                                                onClick={() => handleDelete(log._id)}
                                              >
                                                <FaTrashAlt />
                                              </button>
                                            </td>
                                          </tr>
                                        );
                                      })}
                      
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                      
                            {!loading && !error && (
                              <div className="d-flex justify-content-between align-items-center mb-4">
                                <div className="text-muted small">
                                  Showing 1 to {paginatedTimeLogss?.length || 0} of {timelogs.TimeLogss?.length || 0} entries
                                </div>
                      
                                <ul className="pagination pagination-sm mb-0">
                                  <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                                    <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                                      Previous
                                    </button>
                                  </li>
                                  {Array.from({ length: totalPages }, (_, i) => (
                                    <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                                      <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                                        {i + 1}
                                      </button>
                                    </li>
                                  ))}
                                  <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                                    <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                                      Next
                                    </button>
                                  </li>
                                </ul>
                              </div>
                            )}
                      
                            {/* Assign Modal */}
                            <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
                              <Modal.Header closeButton>
                                <Modal.Title>Extra Hours</Modal.Title>
                              </Modal.Header>
                              <Modal.Body>
                                <Form>
                                  <Form.Group className="mb-3">
                                    <Form.Label>Extra Hours</Form.Label>
                                    <Form.Control
                                      type="time"
                                      value={extraHours}
                                      onChange={(e) => setExtraHours(e.target.value)}
                                      placeholder="Enter extra hours"
                                      step="60" // step in seconds — 60 = 1 min steps
                                    />
                                  </Form.Group>
                      
                                </Form>
                              </Modal.Body>
                              <Modal.Footer>
                                <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
                                  Cancel
                                </Button>
                                <Button id='All_btn' onClick={handleSubmitAssignment}>
                                  Save Time Log
                                </Button>
                              </Modal.Footer>
                            </Modal>
                      
                          </div>
                        );
                      }
                      
                      export default TimeLogs;

























                      import React, { useState } from 'react';
                      import { Form, Button, Table } from 'react-bootstrap';
                      import { FaTrash } from 'react-icons/fa';
                      
                      const currencies = [
                        { value: 'USD', label: 'US Dollars/Cents', mainUnit: 'Dollars', subUnit: 'Cents' },
                        { value: 'GBP', label: 'British Pounds/Pence', mainUnit: 'Pounds', subUnit: 'Pence' },
                        { value: 'EUR', label: 'Euro/Cents', mainUnit: 'Euro', subUnit: 'Cents' },
                        { value: 'INR', label: 'Rupees/Paise', mainUnit: 'Rupees', subUnit: 'Paise' },
                        { value: 'AED', label: 'Dirham/Fils', mainUnit: 'Dirham', subUnit: 'Fils' },
                        { value: 'SAR', label: 'Riyals/Halala', mainUnit: 'Riyals', subUnit: 'Halala' }
                      ];
                      
                      const documentFormats = [
                        { value: 'invoice', label: 'Tax Invoice' },
                        { value: 'estimate', label: 'Invoice' },
                        { value: 'po', label: 'Dummy Invoice' },
                        { value: 'proforma', label: 'Proforma Invoice' }
                      ];
                      
                      const formatStyles = [
                        { value: 'format1', label: 'Format 1 (Classic)' },
                        { value: 'format2', label: 'Format 2 (Modern)' },
                        { value: 'format3', label: 'Format 3 (Professional)' }
                      ];
                      
                      const numberToWords = (num) => {
                        const units = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten',
                          'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
                        const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
                        
                        const numToWord = (n) => {
                          if (n < 20) return units[n];
                          const digit = n % 10;
                          return tens[Math.floor(n / 10)] + (digit ? '-' + units[digit] : '');
                        };
                      
                        if (num === 0) return 'Zero';
                        
                        const convert = (n) => {
                          if (n < 100) return numToWord(n);
                          if (n < 1000) return units[Math.floor(n / 100)] + ' Hundred' + (n % 100 ? ' ' + numToWord(n % 100) : '');
                          if (n < 100000) return convert(Math.floor(n / 1000)) + ' Thousand' + (n % 1000 ? ' ' + convert(n % 1000) : '');
                          return convert(Math.floor(n / 100000)) + ' Lakh' + (n % 100000 ? ' ' + convert(n % 100000) : '');
                        };
                        
                        return convert(num);
                      };
                      
                      function AddInvoice({ onClose, onSubmit }) {
                        const [formData, setFormData] = useState({
                          client: '',
                          project: '',
                          dueDate: '',
                          status: 'Pending',
                          currency: 'INR',
                          documentType: 'invoice',
                          formatStyle: 'format1'
                        });
                      
                        const [items, setItems] = useState([
                          { description: '', quantity: 1, rate: 0, amount: 0 }
                        ]);
                      
                        const calculateAmount = (quantity, rate) => quantity * rate;
                      
                        const handleItemChange = (index, field, value) => {
                          const newItems = [...items];
                          newItems[index][field] = value;
                          if (field === 'quantity' || field === 'rate') {
                            newItems[index].amount = calculateAmount(
                              field === 'quantity' ? value : newItems[index].quantity,
                              field === 'rate' ? value : newItems[index].rate
                            );
                          }
                          setItems(newItems);
                        };
                      
                        const addItem = () => {
                          setItems([...items, { description: '', quantity: 1, rate: 0, amount: 0 }]);
                        };
                      
                        const removeItem = (index) => {
                          if (items.length > 1) {
                            const newItems = [...items];
                            newItems.splice(index, 1);
                            setItems(newItems);
                          }
                        };
                      
                        const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
                      
                        const handleChange = (e) => {
                          const { name, value } = e.target;
                          setFormData(prev => ({
                            ...prev,
                            [name]: value
                          }));
                        };
                      
                        const handleSubmit = (e) => {
                          e.preventDefault();
                          const invoiceData = {
                            ...formData,
                            items,
                            amount: subtotal
                          };
                          onSubmit(invoiceData);
                        };
                      
                        return (
                          <div className="container-fluid p-4" style={{backgroundColor: "white", borderRadius: "10px"}}>
                            <div className="d-flex justify-content-between align-items-center mb-4">
                              <h2>Generate New Invoice</h2>
                            </div>
                      
                            <Form onSubmit={handleSubmit}>
                              <div className="row mb-4">
                                <div className="col-md-6 mb-3">
                                  <Form.Group>
                                    <Form.Label>Client</Form.Label>
                                    <Form.Select
                                      name="client"
                                      value={formData.client}
                                      onChange={handleChange}
                                      required
                                    >
                                      <option value="">Select Client</option>
                                      <option value="Acme Corp">Acme Corp</option>
                                      <option value="Tech Solutions">Tech Solutions</option>
                                      <option value="Global Inc">Global Inc</option>
                                    </Form.Select>
                                  </Form.Group>
                                </div>
                      
                                <div className="col-md-6 mb-3">
                                  <Form.Group>
                                    <Form.Label>Project</Form.Label>
                                    <Form.Control
                                      type="text"
                                      name="project"
                                      value={formData.project}
                                      onChange={handleChange}
                                      placeholder="Enter project name"
                                      required
                                    />
                                  </Form.Group>
                                </div>
                      
                                <div className="col-md-6 mb-3">
                                  <Form.Group>
                                    <Form.Label>Due Date</Form.Label>
                                    <Form.Control
                                      type="date"
                                      name="dueDate"
                                      value={formData.dueDate}
                                      onChange={handleChange}
                                      required
                                    />
                                  </Form.Group>
                                </div>
                      
                                <div className="col-md-6 mb-3">
                                  <Form.Group>
                                    <Form.Label>Status</Form.Label>
                                    <Form.Select
                                      name="status"
                                      value={formData.status}
                                      onChange={handleChange}
                                      required
                                    >
                                      <option value="Pending">Pending</option>
                                      <option value="Paid">Paid</option>
                                      <option value="Overdue">Overdue</option>
                                    </Form.Select>
                                  </Form.Group>
                                </div>
                      
                                <div className="col-md-6 mb-3">
                                  <Form.Group>
                                    <Form.Label>Currency</Form.Label>
                                    <Form.Select
                                      name="currency"
                                      value={formData.currency}
                                      onChange={handleChange}
                                      required
                                    >
                                      {currencies.map(curr => (
                                        <option key={curr.value} value={curr.value}>{curr.label}</option>
                                      ))}
                                    </Form.Select>
                                  </Form.Group>
                                </div>
                      
                                <div className="col-md-6 mb-3">
                                  <Form.Group>
                                    <Form.Label>Document Type</Form.Label>
                                    <Form.Select
                                      name="documentType"
                                      value={formData.documentType}
                                      onChange={handleChange}
                                      required
                                    >
                                      {documentFormats.map(format => (
                                        <option key={format.value} value={format.value}>{format.label}</option>
                                      ))}
                                    </Form.Select>
                                  </Form.Group>
                                </div>
                                <div className="col-md-6 mb-3">
                        <Form.Group>
                          <Form.Label>Output Format</Form.Label>
                          <Form.Select
                            name="outputFormat"
                            value={formData.outputFormat}
                            onChange={handleChange}
                            required
                          >
                            {formatStyles.map(style => (
                              <option key={style.value} value={style.value}>
                                {style.label}
                              </option>
                            ))}
                          </Form.Select>
                        </Form.Group>
                      </div>
                      
                              </div>
                      
                              <h6 className="mb-3">Line Items</h6>
                              <Table responsive className="mb-3">
                                <thead>
                                  <tr>
                                    <th>Description</th>
                                    <th>Quantity</th>
                                    <th>Rate</th>
                                    <th>Amount ({formData.currency})</th>
                                    <th></th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {items.map((item, index) => (
                                    <tr key={index}>
                                      <td>
                                        <Form.Control
                                          type="text"
                                          value={item.description}
                                          onChange={(e) => handleItemChange(index, 'description', e.target.value)}
                                          placeholder="Item description"
                                          required
                                        />
                                      </td>
                                      <td>
                                        <Form.Control
                                          type="number"
                                          min="1"
                                          value={item.quantity}
                                          onChange={(e) => handleItemChange(index, 'quantity', parseInt(e.target.value) || 0)}
                                          required
                                        />
                                      </td>
                                      <td>
                                        <Form.Control
                                          type="number"
                                          min="0"
                                          step="0.01"
                                          value={item.rate}
                                          onChange={(e) => handleItemChange(index, 'rate', parseFloat(e.target.value) || 0)}
                                          required
                                        />
                                      </td>
                                      <td>{item.amount.toFixed(2)}</td>
                                      <td>
                                        <Button
                                          variant="link"
                                          className="text-danger p-0"
                                          onClick={() => removeItem(index)}
                                          disabled={items.length === 1}
                                        >
                                          <FaTrash />
                                        </Button>
                                      </td>
                                    </tr>
                                  ))}
                                </tbody>
                              </Table>
                      
                              <Button
                                variant="outline-secondary"
                                className="mb-4"
                                onClick={addItem}
                                type="button"
                              >
                                + Add Line Item
                              </Button>
                      
                              <div className="row mb-4">
                                <div className="col-md-6">
                                  <div className="mb-2">Subtotal: {formData.currency} {subtotal.toFixed(2)}</div>
                                  <div className="mb-2" style={{ fontSize: '0.9em', color: '#666' }}>
                        {currencies.find(c => c.value === formData.currency)?.mainUnit}{' '}
                        {numberToWords(Math.floor(subtotal))}
                        {subtotal % 1 > 0 &&
                          ` and ${numberToWords(Math.round((subtotal % 1) * 100))} ${currencies.find(c => c.value === formData.currency)?.subUnit}`} Only
                      </div>
                      
                                </div>
                              </div>
                      
                              <div className="d-flex justify-content-end gap-2">
                                <Button variant="light" onClick={onClose}>Cancel</Button>
                                <Button id='All_btn' type="submit">Generate Invoice</Button>
                              </div>
                            </Form>
                          </div>
                        );
                      }
                      
                      export default AddInvoice;


























                      import React, { useEffect, useState } from "react";
                      import axios from "axios";
                      import { Link, useLocation, useNavigate } from "react-router-dom";
                      import { toast, ToastContainer } from "react-toastify";
                      import "react-toastify/dist/ReactToastify.css";
                      import { useDispatch, useSelector } from "react-redux";
                      import { createCostEstimate, updateCostEstimate } from "../../../redux/slices/costEstimatesSlice";
                      import { fetchProject } from "../../../redux/slices/ProjectsSlice";
                      import { fetchClient } from "../../../redux/slices/ClientSlice";
                      import { createInvoicingBilling } from "../../../redux/slices/InvoicingBillingSlice";
                      
                      const currencies = [
                        { label: "USD - US Dollar", value: "USD" },
                        { label: "EUR - Euro", value: "EUR" },
                        { label: "INR - Indian Rupee", value: "INR" },
                        { label: "GBP - British invoiceund", value: "GBP" },
                        { label: "JPY - Japanese Yen", value: "JPY" },
                        { label: "AED - UAE Dirham", value: "AED" },
                        { label: "SAR - Saudi Riyal", value: "SAR" },
                      ];
                      
                      const DocumentType = ["Invoice", "Dummy Invoice", "Tax Invoice","Proforma Invoice"];
                      const OutputFormat = ["Format 1 (Classic)", "Format 2 (Modern)", "Format 3 (Professional)"];
                      const statuses = ["Active", "Inactive", "Completed"];
                      
                      function AddInvoice() {
                        const location = useLocation();
                        const invoice = location.state?.invoice;
                        const id = invoice?._id;
                      
                        console.log("hh", invoice);
                        
                        const navigate = useNavigate();
                        const dispatch = useDispatch();
                      
                      
                        const { project } = useSelector((state) => state.projects);
                        useEffect(() => {
                          dispatch(fetchProject());
                        }, [dispatch]);
                        const reversedProjectList = project?.data?.slice().reverse() || [];
                      
                        const { Clients } = useSelector((state) => state.client);
                        useEffect(() => {
                          if (Clients && project?.data?.length) {
                            const foundProject = project.data.find(p => p._id === Clients);
                            if (foundProject) {
                              setFormData(prev => ({
                                ...prev,
                                projectsId: foundProject._id,
                              }));
                            }
                          }
                        }, [Clients, project]);
                      
                        useEffect(() => {
                          dispatch(fetchClient());
                        }, [dispatch]);
                      
                        const [items, setItems] = useState([
                          { description: "", quantity: 0, rate: 0, amount: 0 },
                        ]);
                      
                        const [formData, setFormData] = useState({
                          clientId: [""],
                          projectsId: [""],
                          date: "",
                          status: "Active",
                          currency: "USD",
                          documentType: "",
                          output: "",
                        });
                      
                        useEffect(() => {
                          if (invoice && project?.data?.length) {
                            let projectId = '';
                            if (Array.isArray(invoice.projectId) && invoice.projectId.length > 0) {
                              projectId = invoice.projectId[0]._id;
                            } else if (Array.isArray(invoice.projects) && invoice.projects.length > 0) {
                              projectId = typeof invoice.projects[0] === 'object'
                                ? invoice.projects[0]._id
                                : invoice.projects[0];
                            }
                      
                            let clientId = "";
                            if (invoice.clientId && typeof invoice.clientId === "object") {
                              clientId = invoice.clientId._id;
                            } else if (Array.isArray(invoice.clients) && invoice.clients.length > 0) {
                              clientId = invoice.clients[0]?.clientId || "";
                            }
                      
                        setFormData((prev) => ({
                        ...prev,
                        ...invoice,
                        status: invoice.status && statuses.includes(invoice.status)
                          ? invoice.status
                          : "Active",
                        projectsId: projectId ? [projectId] : [""],
                        clientId: clientId ? [clientId] : [""],
                        Notes: invoice.Notes || "",
                        currency: invoice.currency || "USD",
                        date: invoice.date ? invoice.date.substring(0, 10) : "",
                        validUntil: invoice.validUntil ? invoice.validUntil.substring(0, 10) : "",
                      }));
                      
                      
                            if (Array.isArray(invoice.lineItems) && invoice.lineItems.length > 0) {
                              setItems(invoice.lineItems);
                            }
                          }
                        }, [invoice, project?.data]);
                      
                        const [taxRate, setTaxRate] = useState(0.05);
                      
                        const calculateAmount = (quantity, rate) => quantity * rate;
                      
                        const handleItemChange = (index, field, value) => {
                          const newItems = [...items];
                          newItems[index][field] = value;
                          newItems[index].amount = calculateAmount(
                            newItems[index].quantity,
                            newItems[index].rate
                          );
                          setItems(newItems);
                        };
                      
                        const handleFormChange = (e) => {
                          setFormData({ ...formData, [e.target.name]: e.target.value });
                        };
                      
                        const addItem = () => {
                          setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
                        };
                      
                        const removeItem = (index) => {
                          const newItems = [...items];
                          newItems.splice(index, 1);
                          setItems(newItems);
                        };
                      
                        const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
                        const tax = subtotal * taxRate;
                        const total = subtotal + tax;
                      
                        const handleSubmit = async (e) => {
                          e.preventDefault();
                          const payload = {
                            ...formData,
                            VATRate: taxRate * 100,
                            lineItems: items,
                          };
                      console.log("rfgrjgg", payload);
                      
                          const isDuplicate = location.state?.isDuplicate;
                          if (isDuplicate || !id) {
                            dispatch(createInvoicingBilling(payload))
                              .unwrap()
                              .then(() => {
                                toast.success("Estimates created successfully!");
                                navigate('/CostEstimates', { state: { openTab: 'jobs' } });
                              })
                              .catch(() => {
                                toast.error("Failed to create estimates");
                              });
                          } else {
                            dispatch(updateCostEstimate({ id, data: payload }))
                              .unwrap()
                              .then(() => {
                                toast.success("Estimates updated successfully!");
                                navigate('/CostEstimates', { state: { openTab: 'jobs' } });
                              })
                              .catch(() => {
                                toast.error("Failed to update estimates");
                              });
                          }
                        };
                      
                        return (
                          <>
                            <ToastContainer />
                            <div className="container-fluid p-4" style={{ backgroundColor: "white", borderRadius: "10px" }}>
                              <div className="d-flex justify-content-between align-items-center mb-4">
                                <h2>Generate New Invoice</h2>
                              </div>
                      
                      
                              <div className="row mb-3">
                                <div className="col-md-4 mb-3">
                                  <label className="form-label">Client</label>
                                  <select
                                    className="form-select"
                                    name="clientId"
                                    value={formData.clientId[0] || ""}
                                    onChange={(e) =>
                                      setFormData({
                                        ...formData,
                                        clientId: [e.target.value],
                                      })
                                    }
                                  >
                                    <option value="">Select Client</option>
                                    {Clients?.data?.map((client) => (
                                      <option key={client._id} value={client._id}>
                                        {client.clientName}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                      
                      
                                <div className="col-md-4 mb-3">
                                  <label className="form-label">Project</label>
                                  <select
                                    className="form-select"
                                    name="projectsId"
                                    value={formData.projectsId[0] || ""}
                                    onChange={(e) => {
                                      const selectedId = e.target.value;
                                      const selectedProject = project?.data?.find(p => p._id === selectedId);
                                      setFormData({
                                        ...formData,
                                        projectsId: [selectedId],
                                        projectName: selectedProject?.projectName || "",
                                      });
                                    }}
                                  >
                                    <option value="">Select a project</option>
                                    {reversedProjectList.map((proj) => (
                                      <option key={proj._id} value={proj._id}>
                                        {proj.projectName}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                      
                                <div className="col-md-4 mb-3">
                                  <label className="form-label"> Due Date</label>
                                  <input
                                    type="date"
                                    className="form-control"
                                    name="date"
                                    value={formData.date}
                                    onChange={handleFormChange}
                                  />
                                </div>
                      
                                <div className="col-md-4 mb-3">
                                  <label className="form-label">currency</label>
                                  <select
                                    className="form-select"
                                    name="currency"
                                    value={formData.currency}
                                    onChange={handleFormChange}
                                  >
                                    {currencies.map((curr) => (
                                      <option key={curr.value} value={curr.value}>
                                        {curr.label}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                      
                                <div className="col-md-4 mb-3">
                                  <label className="form-label">Document Type</label>
                             <select
                        className="form-select"
                        name="status"
                        value={formData.status}
                        onChange={handleFormChange}
                      >
                        {statuses.map((status) => (
                          <option key={status} value={status}>
                            {status}
                          </option>
                        ))}
                      </select>
                      
                                </div>
                      
                                <div className="col-md-4 mb-3">
                                  <label className="form-label">Output Format</label>
                                  <select
                                    className="form-select"
                                    name="output"
                                    value={formData.output}
                                    onChange={handleFormChange}
                                  >
                                    {OutputFormat.map((status) => (
                                      <option key={status} value={status}>
                                        {status}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                                <div className="col-md-4 mb-3">
                                  <label className="form-label">Status</label>
                                  <select
                                    className="form-select"
                                    name="status"
                                    value={formData.status}
                                    onChange={handleFormChange}
                                  >
                                    {statuses.map((status) => (
                                      <option key={status} value={status}>
                                        {status}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                              </div>
                      
                              <h6 className="fw-semibold mb-3">Line Items</h6>
                              <div className="row fw-semibold text-muted mb-2 px-2">
                                <div className="col-md-5">Description</div>
                                <div className="col-md-2">Quantity</div>
                                <div className="col-md-2">Rate</div>
                                <div className="col-md-2">Amount</div>
                                <div className="col-md-1 text-end"></div>
                              </div>
                      
                              {items.map((item, index) => (
                                <div
                                  className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
                                  key={index}
                                  style={{ background: "#f9f9f9", borderRadius: "8px" }}
                                >
                                  <div className="col-md-5">
                                    <input
                                      type="text"
                                      className="form-control"
                                      placeholder="Item description"
                                      value={item.description}
                                      onChange={(e) =>
                                        handleItemChange(index, "description", e.target.value)
                                      }
                                    />
                                  </div>
                                  <div className="col-md-2">
                                    <input
                                      type="number"
                                      className="form-control"
                                      value={item.quantity}
                                      onChange={(e) =>
                                        handleItemChange(index, "quantity", parseInt(e.target.value))
                                      }
                                    />
                                  </div>
                                  <div className="col-md-2">
                                    <input
                                      type="number"
                                      className="form-control"
                                      value={item.rate}
                                      onChange={(e) =>
                                        handleItemChange(index, "rate", parseFloat(e.target.value))
                                      }
                                    />
                                  </div>
                                  <div className="col-md-2">
                                    <span>
                                      {formData.currency} {item.amount.toFixed(2)}
                                    </span>
                                  </div>
                                  <div className="col-md-1 text-end">
                                    <button
                                      className="btn btn-link text-danger p-0"
                                      onClick={() => removeItem(index)}
                                    >
                                      remove
                                    </button>
                                  </div>
                                </div>
                              ))}
                      
                              <button
                                className="btn border rounded px-3 py-1 mb-4 text-dark"
                                onClick={addItem}
                              >
                                + Add Line Item
                              </button>
                      
                      
                              <div className="text-end mt-4">
                                <Link to="/CostEstimates">
                                  <button className="btn btn-light me-2">Cancel</button>
                                </Link>
                                <button className="btn btn-dark" onClick={handleSubmit}>
                                  Create Estimate
                                </button>
                              </div>
                      
                            </div>
                          </>
                        );
                      }
                      
                      export default AddInvoice;
                      




















                      import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import "./Sidebar.css";
import { FaHome, FaFileInvoiceDollar, FaShoppingCart, FaProjectDiagram, FaTasks, FaIndustry, FaPencilRuler, FaFileAlt, FaClock, FaBell, FaChartLine, FaUsersCog, FaCog } from 'react-icons/fa';
const Sidebar = ({ isOpen, toggleSidebar }) => {
  const [openMenuIndex, setOpenMenuIndex] = useState(null);
  const [activeMenuIndex, setActiveMenuIndex] = useState(null);
  const [activeSubmenuPath, setActiveSubmenuPath] = useState(null);
  const [roledata, setRoleData] = useState("admin");

  const menuItems = [
    {
      title: "Dashboard",
      icon: <FaHome className="menu-icon" />,
      path: "/admin/dashboard"
    },
    {
      title: "Projects & Jobs",
      icon: <FaProjectDiagram className="menu-icon" />,
      submenu: [
        { title: "Projects", path: "/admin/projectList" },
        { title: "Job Tracker", path: "/admin/JobTracker" },
      ]
    },
    {
      title: "Production",
      icon: <FaIndustry className="menu-icon" />,
      submenu: [
        { title: "Assign Job", path: "/admin/newJobsList" },
        { title: "In Progress", path: "/admin/inProgress" },
        { title: "Completed", path: "/admin/completedJobs" },
        // { title: "Production", path: "/ProductionManager" },
      ]
    },
    {
      title: "Designer Panel",
      icon: <FaPencilRuler className="menu-icon" />,
      submenu: [
        { title: "My Jobs", path: "/admin/MyJobs" },
        { title: "Time Logs", path: "/admin/TimeLogs" },
      // { title: "Designers", path: "/DesignerPanel" },
      ]
    },
    {
      title: "Cost Estimates",
      icon: <FaFileInvoiceDollar className="menu-icon" />,
      path: "/admin/CostEstimates"
    },
    {
      title: "Purchase Orders",
      icon: <FaShoppingCart className="menu-icon" />,
      submenu: [
        { title: "Receivable POs", path: "/admin/receivable" },
        { title: "Issuable POs", path: "/admin/IssuablePurchase" },
      ]
    },
    {
      title: "Invoicing & Billing",
      icon: <FaFileAlt className="menu-icon" />,
      path: "/admin/Invoicing_Billing"
    },
    {
      title: "Timesheet & Worklog",
      icon: <FaClock className="menu-icon" />,
      path: "/admin/TimesheetWorklog"
    },
    {
      title: "Client/Supplier",
      icon: <FaUsersCog className="menu-icon" />,
      path: "/admin/clientManagement"
    },
    {
      title: "Reports & Analytics",
      icon: <FaChartLine className="menu-icon" />,
      path: "/admin/Reports"
    },
    {
      title: "User Permissions",
      icon: <FaUsersCog className="menu-icon" />,
      path: "/admin/UserRoles"
    },
     {
      title: "Notiifcations",
      icon: <FaBell className="menu-icon" />,
      path: "/admin/Notiifcations"
    },
    {
      title: "Settings",
      icon: <FaCog className="menu-icon" />,
      path: "/admin/Settings"
    },
  ]


  // 
  const navigate = useNavigate();

  const toggleMenu = (index) => {
    setOpenMenuIndex(openMenuIndex === index ? null : index);
  };

  const handlesubmenuclick = (menuindex, path) => {
    setActiveMenuIndex(menuindex);
    setActiveSubmenuPath(path);
    navigate(path);
  };

  useEffect(()=>{
    const Role= localStorage.getItem("userRole")
     if(Role){
     setRoleData(Role)
     }else{
      setRoleData()
     }
  },[])
  return (
    <>
      <div className={`sidebar ${isOpen ? "expanded" : "collapsed"}`}>
        <div className="sidebar-header">
          <div className="logo">
            <span className="logo-text">Saaranik</span>
          </div>
        </div>
        <ul className="menu" style={{ whiteSpace: 'nowrap' }}>
          {menuItems.map((item, index) => (
            <li
              key={index}
              // className={`menu-item ${
              //   item.submenu
              //     ? openMenuIndex === index
              //       ? "open"
              //       : ""
              //     : activeMenuIndex === index
              //     ? "active"
              //     : ""
              // }`}
              className={`menu-item ${item.submenu ? openMenuIndex === index ? "open" : activeSubmenuPath?.startsWith(item.submenu[0].path.split('/')[1]) ? "submenu-active" : "" : activeMenuIndex === index ? "active" : ""}`}
              onClick={() => {
                if (item.submenu) {
                  toggleMenu(index);
                } else {
                  handlesubmenuclick(index, item.path);
                }
              }}
            >
              <div className="menu-link menu-i">
                {item.icon}
                {isOpen && <span className="menu-text">{item.title}</span>}
                {item.submenu && isOpen && (
                  <i
                    className={`fas fa-chevron-down menu-toggle-icon ${openMenuIndex === index ? "open" : ""}`}
                  />
                )}
              </div>
              {item.submenu && isOpen && (
                <ul className={`submenu ${openMenuIndex === index ? "open" : ""}`}>
                  {item.submenu.map((subItem, subIndex) => (
                    <li
                      key={subIndex}
                      className={`submenu-item ${activeSubmenuPath === subItem.path ? "active-submenu-item" : ""}`}
                      onClick={(e) => {
                        e.stopPropagation();
                        handlesubmenuclick(index, subItem.path);
                      }}
                    >
                      {subItem.title}
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>
      </div>
    </>
  );
       {/* client-dashboard */}
       {roledata === "client" && (
       <>
       <li
        className={`menu-item ${openMenuIndex === 6 ? "open" : ""} ${
          activeMenuIndex === 6 ? "active" : ""
        }`}
        onClick={() => handlesubmenuclick(6, "/client-home")}>
        <div className="menu-link menu-i">
          <i  className="nav-icon fas fa-home menu-icon"
            style={{ color: "#64748b" }}/>
          {isOpen && <span className="menu-text">  Dashboard </span>}
        
        </div>
      </li>
      <li
        className={`menu-item ${openMenuIndex === 7 ? "open" : ""} ${
          activeMenuIndex === 7 ? "active" : ""
        }`}
        onClick={() => handlesubmenuclick(7, "/select-project")}>
        <div className="menu-link menu-i">
          <i  className="nav-icon fa-solid fa-diagram-project menu-icon"
            style={{ color: "#64748b" }}/>
          {isOpen && <span className="menu-text">  Select Project </span>}
        
        </div>
      </li>
      <li
        className={`menu-item ${openMenuIndex === 8 ? "open" : ""} ${
          activeMenuIndex === 8 ? "active" : ""
        }`}
        onClick={() => handlesubmenuclick(8, "/select-job")}>
        <div className="menu-link menu-i">
          <i className="nav-icon fa-solid fa-users-line menu-icon"
            style={{ color: "#64748b" }}/>
          {isOpen && <span className="menu-text">  Select Job </span>}
        
        </div>
      </li>
      <li
        className={`menu-item ${openMenuIndex === 9 ? "open" : ""} ${
          activeMenuIndex ===9 ? "active" : ""
        }`}
        onClick={() => handlesubmenuclick(9, "/notification")}>
        <div className="menu-link menu-i"> 
          <i className="nav-icon fa-regular fa-bell menu-icon"
            style={{ color: "#64748b" }}/>
          {isOpen && <span className="menu-text">Notification </span>}
        
        </div>
      </li>
      <li
        className={`menu-item ${openMenuIndex === 10 ? "open" : ""} ${
          activeMenuIndex ===10 ? "active" : ""
        }`}
        onClick={() => handlesubmenuclick(10, "/new-projects")}>
        <div className="menu-link menu-i">
          <i  className="nav-icon fa-solid fa-diagram-project menu-icon"
            style={{ color: "#64748b" }}/>
          {isOpen && <span className="menu-text">New Project </span>}
        
        </div>
      </li>
      </>
       )}

      {/* employee-dashboard */}
      {(roledata === "employee" || roledata === "designer") && (
         <>
         <li
            className={`menu-item ${openMenuIndex === 11 ? "open" : ""} ${
              activeMenuIndex === 11 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(11, "/emoloyeedashboard")}
          >
            <div className="menu-link menu-i">
              <i
                className="nav-icon fas fa-home menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && <span className="menu-text">Employee Dashboard</span>}
             
            </div>
          </li>
          <li
            className={`menu-item ${openMenuIndex === 12 ? "open" : ""} ${
              activeMenuIndex === 12 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(12, "/task")}
          >
            <div className="menu-link menu-i">
              <i
                className="fa-solid fa-bars-progress menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && <span className="menu-text"> My Tasks</span>}
           
            </div>
          </li>
          <li
            className={`menu-item ${openMenuIndex === 13 ? "open" : ""} ${
              activeMenuIndex === 13 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(13, "/picktask")}
          >
            <div className="menu-link menu-i">
              <i
                className="fa-solid fa-list-check menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && <span className="menu-text">Pick Task</span>}
          
            </div>
          </li>
          <li
            className={`menu-item ${openMenuIndex === 14 ? "open" : ""} ${
              activeMenuIndex === 14 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(14, "/submittask")}
          >
            <div className="menu-link menu-i">
              <i
                className="fa-solid fa-closed-captioning menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && <span className="menu-text">Submit Task</span>}
            
            </div>
          </li>
          <li
            className={`menu-item ${openMenuIndex === 15 ? "open" : ""} ${
              activeMenuIndex === 15 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(15, "/projectdetail")}
          >
            <div className="menu-link menu-i">
              <i
                className="fa-solid fa-street-view menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && (
                <span className="menu-text">View Project Details</span>
              )}
           
            </div>
          </li>
          <li
            className={`menu-item ${openMenuIndex === 16 ? "open" : ""} ${
              activeMenuIndex === 16 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(16, "/jobhistory")}
          >
            <div className="menu-link menu-i">
              <i
                className="fa-solid fa-clock-rotate-left menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && <span className="menu-text">Job History</span>}
            
            </div>
          </li>
          <li
            className={`menu-item ${openMenuIndex === 17 ? "open" : ""} ${
              activeMenuIndex === 17 ? "active" : ""
            }`}
            onClick={() => handlesubmenuclick(17, "/timetracking")}
          >
            <div className="menu-link menu-i ">
              <i
                className="fa-solid fa-timeline menu-icon"
                style={{ color: "#64748b" }}
              />
              {isOpen && <span className="menu-text">Time Tracking</span>}
            
            </div>
          </li>
          </>
       )}


        {/* ProductionManager */}
       {(roledata === "productionManager" ) && (
  <>
    <li
      className={`menu-item ${openMenuIndex === 18 ? "open" : ""} ${
        activeMenuIndex === 18 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(18, "/productiondasboard")}
    >
      <div className="menu-link menu-i">
        <i
          className="nav-icon fas fa-home menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Production Dashboard</span>}
      </div>
    </li>

    <li
      className={`menu-item ${openMenuIndex === 19 ? "open" : ""} ${
        activeMenuIndex === 19 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(19, "/ProductionProjects")}
    >
      <div className="menu-link menu-i">
        <i
          className="fa-solid fa-diagram-project menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Projects</span>}
      </div>
    </li>

    <li
      className={`menu-item ${openMenuIndex === 20 ? "open" : ""} ${
        activeMenuIndex === 20 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(20, "/ProductionJobs")}
    >
      <div className="menu-link menu-i">
        <i
          className="fa-solid fa-users menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Jobs</span>}
      </div>
    </li>
    <li
      className={`menu-item ${openMenuIndex === 21 ? "open" : ""} ${
        activeMenuIndex === 21 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(21, "/ProductioneMployees")}
    >
      <div className="menu-link menu-i">
        <i
          className="fa-solid fa-tasks menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Eployees</span>}
      </div>
    </li>
    <li
      className={`menu-item ${openMenuIndex === 22 ? "open" : ""} ${
        activeMenuIndex === 22 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(22, "/ProductionClients")}
    >
      <div className="menu-link menu-i">
        <i
          className="fa-solid fa-chart-line menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Clients</span>}
      </div>
    </li>

    <li
      className={`menu-item ${openMenuIndex === 23 ? "open" : ""} ${
        activeMenuIndex === 23 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(23, "/ProductionTimeline")}
    >
      <div className="menu-link menu-i">
        <i
          className="fa-solid fa-calendar-alt menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Timeline</span>}
      </div>
    </li>

    <li
      className={`menu-item ${openMenuIndex === 24 ? "open" : ""} ${
        activeMenuIndex === 24 ? "active" : ""
      }`}
      onClick={() => handlesubmenuclick(24, "/ProductionReports")}
    >
      <div className="menu-link menu-i">
        <i
          className="fa-solid fa-check-circle menu-icon"
          style={{ color: "#64748b" }}
        />
        {isOpen && <span className="menu-text">Reports</span>}
      </div>
    </li>
  </>
)}


};

export default Sidebar;























import React, { useEffect } from 'react';
import { Container, Row, Col, Card, Badge, ProgressBar } from 'react-bootstrap';
import { FaTasks, FaPlusCircle, FaCheckCircle, FaInfoCircle, FaClock } from 'react-icons/fa';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { fetchjobs } from '../../../redux/slices/JobsSlice';
import { fetchProject } from '../../../redux/slices/ProjectsSlice';

const EmployeeDashboard = () => {
  const dispatch = useDispatch();
  const { job } = useSelector((state) => state.jobs);
  const { project } = useSelector((state) => state.projects);

  useEffect(() => {
    dispatch(fetchjobs());
    dispatch(fetchProject());
  }, [dispatch]);

  const jobs = job?.jobs || [];
  const totalTasks = jobs.length;
  const inProgressTasks = jobs.filter(j => j.Status?.toLowerCase() === 'in_progress').length;
  const completedTasks = jobs.filter(j => j.Status?.toLowerCase() === 'completed').length;
  const pendingTasks = totalTasks - inProgressTasks - completedTasks;

  return (
    <Container fluid className="py-4">
      <h2 className="mb-3">👋 Welcome to Your Dashboard</h2>

      {/* Main Quick Actions */}
      <Row className="g-4 mb-4">
        <Col md={6} lg={3}>
          <Link to="/employee/my-tasks" className="text-decoration-none">
            <Card className="h-100 shadow-sm border-0 hover-shadow">
              <Card.Body className="d-flex align-items-center">
                <div className="rounded-circle bg-success bg-opacity-10 p-3 me-3 d-flex align-items-center justify-content-center" style={{ width: 50, height: 50 }}>
                  <FaTasks className="text-success" size={24} />
                </div>
                <div>
                  <h5>{inProgressTasks}</h5>
                  <p className="mb-0">My Tasks</p>
                  <small className="text-success">Ongoing assignments</small>
                </div>
              </Card.Body>
            </Card>
          </Link>
        </Col>

        <Col md={6} lg={3}>
          <Link to="/employee/pick-task" className="text-decoration-none">
            <Card className="h-100 shadow-sm border-0 hover-shadow">
              <Card.Body className="d-flex align-items-center">
                <div className="rounded-circle bg-primary bg-opacity-10 p-3 me-3 d-flex align-items-center justify-content-center" style={{ width: 50, height: 50 }}>
                  <FaPlusCircle className="text-primary" size={24} />
                </div>
                <div>
                  <h5>Pick Task</h5>
                  <p className="mb-0">Browse available tasks</p>
                  <small className="text-primary">Start a new assignment</small>
                </div>
              </Card.Body>
            </Card>
          </Link>
        </Col>

        <Col md={6} lg={3}>
          <Link to="/employee/submit-task" className="text-decoration-none">
            <Card className="h-100 shadow-sm border-0 hover-shadow">
              <Card.Body className="d-flex align-items-center">
                <div className="rounded-circle bg-info bg-opacity-10 p-3 me-3 d-flex align-items-center justify-content-center" style={{ width: 50, height: 50 }}>
                  <FaCheckCircle className="text-info" size={24} />
                </div>
                <div>
                  <h5>Submit Task</h5>
                  <p className="mb-0">Mark task as done</p>
                  <small className="text-info">Submit work to Production</small>
                </div>
              </Card.Body>
            </Card>
          </Link>
        </Col>

        <Col md={6} lg={3}>
          <Link to="/employee/project-details" className="text-decoration-none">
            <Card className="h-100 shadow-sm border-0 hover-shadow">
              <Card.Body className="d-flex align-items-center">
                <div className="rounded-circle bg-warning bg-opacity-10 p-3 me-3 d-flex align-items-center justify-content-center" style={{ width: 50, height: 50 }}>
                  <FaInfoCircle className="text-warning" size={24} />
                </div>
                <div>
                  <h5>Project Info</h5>
                  <p className="mb-0">View project details</p>
                  <small className="text-warning">Understand objectives</small>
                </div>
              </Card.Body>
            </Card>
          </Link>
        </Col>
      </Row>

      {/* Quick Stats & Progress */}
      <Row className="g-4">
        <Col md={6}>
          <Card className="shadow-sm border-0">
            <Card.Body>
              <h5 className="mb-3">📊 Task Overview</h5>
              <p>Total Tasks: <Badge bg="secondary">{totalTasks}</Badge></p>
              <p>Completed: <Badge bg="success">{completedTasks}</Badge></p>
              <p>Pending: <Badge bg="warning">{pendingTasks}</Badge></p>
              <ProgressBar now={(completedTasks / totalTasks) * 100} label={`${Math.round((completedTasks / totalTasks) * 100)}% completed`} />
            </Card.Body>
          </Card>
        </Col>

        <Col md={6}>
          <Card className="shadow-sm border-0">
            <Card.Body>
              <h5 className="mb-3">🕒 Performance Today</h5>
              <p><FaClock className="me-2 text-muted" />Time Logged Today: <strong>4h 30m</strong></p>
              <p><FaClock className="me-2 text-muted" />Weekly Hours: <strong>22h / 40h</strong></p>
              <ProgressBar striped variant="info" now={55} label="55%" />
            </Card.Body>
          </Card>
        </Col>
      </Row>
      {/* Leaderboard */}
      <Row className="g-4 mt-4">
        <Col md={12}>
          <Card className="shadow-sm border-0">
            <Card.Body>
              <h5 className="mb-3">🏆 Productivity Leaderboard</h5>
              <ul className="list-group">
                <li className="list-group-item d-flex justify-content-between">You <Badge bg="info">22h</Badge></li>
                <li className="list-group-item d-flex justify-content-between">John D. <Badge bg="success">30h</Badge></li>
                <li className="list-group-item d-flex justify-content-between">Ayesha S. <Badge bg="warning">18h</Badge></li>
              </ul>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Deadlines */}
      <Row className="g-4 mt-4">
        <Col md={6}>
          <Card className="shadow-sm border-0">
            <Card.Body>
              <h5 className="mb-3">📅 Upcoming Deadlines</h5>
              <ul className="list-unstyled">
                <li>Task #1001 - Due <strong>Tomorrow</strong></li>
                <li>Project X Milestone - Due <strong>Friday</strong></li>
                <li>Client Revision - Due <strong>Next Monday</strong></li>
              </ul>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      <Row className="g-4 mt-4">
        <Col md={12}>
          <Card className="shadow-sm border-0">
            <Card.Body>
              <h5 className="mb-3">🔔 Notifications</h5>
              <ul className="list-unstyled mb-0">
                <li className="mb-2"><Badge bg="danger" className="me-2">Urgent</Badge>Task #1023 is due today!</li>
                <li className="mb-2"><Badge bg="info" className="me-2">Info</Badge>Project ABC updated with new specs.</li>
                <li><Badge bg="success" className="me-2">Success</Badge>Your submission was approved.</li>
              </ul>
            </Card.Body>
          </Card>
        </Col>
      </Row>

    </Container>
  );
};

export default EmployeeDashboard;

































///////////////////////////////Employe Employee

import React, { useState } from 'react';
import { Card, Row, Col, Badge, ProgressBar, Dropdown } from 'react-bootstrap';
import { BsCalendar, BsClock, BsCheckCircle, BsThreeDotsVertical, BsChevronDown } from 'react-icons/bs';
import { FaTrophy, FaRegCalendarAlt, FaTasks } from 'react-icons/fa';

// Import Inter font
// import '@fontsource/inter/400.css';
// import '@fontsource/inter/500.css';
// import '@fontsource/inter/600.css';
// import '@fontsource/inter/700.css';

const EmployeeDashboard = () => {
  const [selectedTimeframe, setSelectedTimeframe] = useState('This Week');

  // Mock data for productivity leaderboard
  const leaderboardData = [
    {
      name: 'Michael Chen',
      avatar: 'MC',
      efficiency: 98,
      hoursWorked: 38,
      tasksCompleted: 24,
      isTopPerformer: true
    },
    {
      name: 'You',
      avatar: 'YO',
      efficiency: 85,
      hoursWorked: 32,
      tasksCompleted: 18,
      position: 2,
      positionChange: '+1'
    },
    {
      name: 'Sarah Williams',
      avatar: 'SW',
      efficiency: 75,
      hoursWorked: 30,
      tasksCompleted: 15,
      risingTalent: true
    }
  ];

  // Mock data for upcoming deadlines
  const upcomingDeadlines = [
    {
      title: 'Website Redesign',
      priority: 'High',
      dueDate: 'Tomorrow',
      assignedTo: 'Emma Davis',
      time: '5:00 PM'
    },
    {
      title: 'Q2 Sales Report',
      priority: 'Medium', 
      dueDate: 'Friday',
      assignedTo: 'James Wilson',
      time: '3:00 PM'
    },
    {
      title: 'Client Presentation',
      priority: 'Normal',
      dueDate: 'Next Monday',
      teamMembers: 2,
      time: '2:00 PM'
    }
  ];

  // Mock data for task overview
  const taskOverview = {
    total: 26,
    completed: 14,
    pending: 12,
    completionPercentage: 54
  };

  // Mock data for today's performance
  const todaysPerformance = {
    timeLogged: '4h 30m',
    weeklyHours: {
      completed: 22,
      total: 40,
      percentage: 55
    }
  };

  const getPriorityClass = (priority) => {
    switch(priority.toLowerCase()) {
      case 'high': return 'danger';
      case 'medium': return 'warning';
      case 'normal': return 'success';
      default: return 'secondary';
    }
  };

  const getPriorityBgClass = (priority) => {
    switch(priority.toLowerCase()) {
      case 'high': return 'bg-danger-subtle text-danger';
      case 'medium': return 'bg-warning-subtle text-warning';
      case 'normal': return 'bg-success-subtle text-success';
      default: return 'bg-secondary-subtle text-secondary';
    }
  };

  const getDueDateClass = (dueDate) => {
    switch(dueDate.toLowerCase()) {
      case 'tomorrow': return 'bg-danger-subtle text-danger';
      case 'friday': return 'bg-warning-subtle text-warning';
      default: return 'bg-warning-subtle text-warning';
    }
  };

  return (
    <div className="p-4" style={{ backgroundColor: '#F9FAFB', fontFamily: 'Inter, sans-serif' }}>
      <div className="d-flex align-items-center mb-4">
        <div className="me-2 d-flex align-items-center justify-content-center" style={{ width: '40px', height: '40px', backgroundColor: '#FFF7CD', borderRadius: '12px' }}>
          <FaTasks style={{ color: '#FFB020' }} size={24} />
        </div>
        <h4 className="mb-0" style={{ color: '#212B36', fontWeight: 700 }}>Welcome to Your Dashboard</h4>
      </div>

      {/* Metrics Cards */}
      <Row className="g-4 mb-4">
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#E8F6FF', borderRadius: '12px' }}>
                <FaTasks style={{ color: '#2065D1' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>12</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Active Tasks</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#FFF7CD', borderRadius: '12px' }}>
                <BsClock style={{ color: '#FFB020' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>32.5h</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Hours Logged</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#E8FFF3', borderRadius: '12px' }}>
                <BsCheckCircle style={{ color: '#36B37E' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>8</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Completed Tasks</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#FFE7E7', borderRadius: '12px' }}>
                <FaTrophy style={{ color: '#FF4842' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>95%</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Performance</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      
      <Row className="g-4">
        {/* Productivity Leaderboard */}
        <Col md={6}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Header className="bg-white border-0 d-flex justify-content-between align-items-center py-3">
              <div className="d-flex align-items-center">
                <FaTrophy style={{ color: '#FFB020' }} size={20} className="me-2" />
                <h5 className="mb-0" style={{ color: '#212B36' }}>Productivity Leaderboard</h5>
              </div>
              <div className="d-flex align-items-center">
                <Dropdown className="me-2">
                  <Dropdown.Toggle variant="light" size="sm" style={{ backgroundColor: '#F4F6F8', border: 'none', fontSize: '13px' }}>
                    {selectedTimeframe} <BsChevronDown size={12} className="ms-1" />
                  </Dropdown.Toggle>
                </Dropdown>
                <button className="btn btn-light btn-sm" style={{ backgroundColor: '#F4F6F8', border: 'none', fontSize: '13px' }}>All Teams</button>
              </div>
            </Card.Header>
            <Card.Body className="px-4">
              {leaderboardData.map((user, index) => (
                <div key={index} className="mb-4" style={{
                  padding: '16px',
                  borderRadius: '12px',
                  backgroundColor: index === 0 ? '#FFF7CD' : 'transparent',
                  border: index === 0 ? 'none' : '1px solid #F4F6F8'
                }}>
                  <div className="d-flex align-items-center">
                    <div className="me-3" style={{ fontWeight: '700', color: '#212B36', fontSize: '16px' }}>{index + 1}</div>
                    <div className="rounded-circle me-3 d-flex align-items-center justify-content-center" 
                         style={{
                           width: '40px',
                           height: '40px',
                           backgroundColor: index === 0 ? '#FFB020' : '#F4F6F8',
                           color: index === 0 ? 'white' : '#637381',
                           fontWeight: '600'
                         }}>
                      {user.avatar}
                    </div>
                    <div className="flex-grow-1">
                      <div className="d-flex justify-content-between align-items-center mb-2">
                        <div className="d-flex align-items-center">
                          <h6 className="mb-0" style={{ color: '#212B36', fontWeight: '600' }}>{user.name}</h6>
                          {user.isTopPerformer && (
                            <span className="ms-2 px-2 py-1" style={{ 
                              color: '#FFB020', 
                              fontSize: '12px',
                              backgroundColor: '#FFF7CD',
                              borderRadius: '6px',
                              fontWeight: '600'
                            }}>Top Performer</span>
                          )}
                          {user.positionChange && (
                            <span className="ms-2 px-2 py-1" style={{ 
                              color: '#36B37E', 
                              fontSize: '12px',
                              backgroundColor: '#E8FFF3',
                              borderRadius: '6px',
                              fontWeight: '600'
                            }}>+{user.positionChange} position</span>
                          )}
                        </div>
                        <span style={{ fontWeight: '700', color: index === 0 ? '#FFB020' : '#2065D1', fontSize: '16px' }}>{user.efficiency}%</span>
                      </div>
                      <ProgressBar 
                        now={user.efficiency} 
                        style={{
                          height: '8px',
                          backgroundColor: '#F4F6F8',
                          borderRadius: '4px'
                        }}
                        variant={index === 0 ? 'warning' : 'primary'}
                        className="mb-2"
                      />
                      <div style={{ color: '#637381', fontSize: '13px' }}>
                        <span className="me-2">{user.hoursWorked}h worked</span>
                        <span style={{ color: '#919EAB' }}>•</span>
                        <span className="ms-2">{user.tasksCompleted} tasks completed</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              <div className="text-center">
                <button className="btn btn-link" style={{ color: '#2065D1', textDecoration: 'none', fontSize: '13px' }}>View Full Leaderboard →</button>
              </div>
            </Card.Body>
          </Card>
        </Col>

        {/* Upcoming Deadlines */}
        <Col md={6}>
          <Card className="h-100" style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Header className="bg-white border-0 d-flex justify-content-between align-items-center py-3">
              <div className="d-flex align-items-center">
                <div className="me-2 d-flex align-items-center justify-content-center" style={{ width: '32px', height: '32px', backgroundColor: '#FFE7E7', borderRadius: '8px' }}>
                  <FaRegCalendarAlt style={{ color: '#FF4842' }} size={18} />
                </div>
                <h5 className="mb-0" style={{ color: '#212B36', fontWeight: '700' }}>Upcoming Deadlines</h5>
              </div>
              <button className="btn btn-light btn-sm d-flex align-items-center" style={{ backgroundColor: '#F4F6F8', border: 'none', fontSize: '13px', fontWeight: '600', padding: '8px 12px' }}>
                <span className="me-1">+</span> Add Task
              </button>
            </Card.Header>
            <Card.Body className="px-4 pb-3">
              {upcomingDeadlines.map((task, index) => (
                <div key={index} className="mb-3" style={{ padding: '16px', borderRadius: '12px', border: '1px solid #F4F6F8', transition: 'all 0.2s ease-in-out', cursor: 'pointer' }} className="hover-shadow">
                  <div className="d-flex justify-content-between align-items-start mb-3">
                    <h6 className="mb-0" style={{ color: '#212B36', fontWeight: '600' }}>{task.title}</h6>
                    <div className="d-flex align-items-center">
                      <span className="me-2" style={{
                        padding: '4px 8px',
                        borderRadius: '6px',
                        fontSize: '12px',
                        backgroundColor: task.priority === 'High' ? '#FFE7E7' : task.priority === 'Medium' ? '#FFF7CD' : '#E8FFF3',
                        color: task.priority === 'High' ? '#FF4842' : task.priority === 'Medium' ? '#FFB020' : '#36B37E',
                        fontWeight: '600'
                      }}>{task.priority} Priority</span>
                      <span style={{
                        padding: '4px 8px',
                        borderRadius: '6px',
                        fontSize: '12px',
                        backgroundColor: task.dueDate === 'Tomorrow' ? '#FFE7E7' : task.dueDate === 'Next Monday' ? '#E8FFF3' : '#FFF7CD',
                        color: task.dueDate === 'Tomorrow' ? '#FF4842' : task.dueDate === 'Next Monday' ? '#36B37E' : '#FFB020',
                        fontWeight: '600'
                      }}>{task.dueDate}</span>
                      <button className="btn btn-link p-0 ms-2" style={{ color: '#637381' }}>
                        <BsThreeDotsVertical size={16} />
                      </button>
                    </div>
                  </div>
                  <div className="d-flex align-items-center justify-content-between">
                    <div className="d-flex align-items-center">
                      <BsCalendar style={{ color: '#637381' }} className="me-2" />
                      <span style={{ color: '#637381', fontSize: '13px' }}>Due {task.dueDate} at {task.time}</span>
                    </div>
                    <div>
                      {task.assignedTo ? (
                        <div className="d-flex align-items-center">
                          <div className="rounded-circle me-2" style={{ width: '24px', height: '24px', backgroundColor: '#2065D1' }}></div>
                          <span style={{ color: '#637381', fontSize: '13px' }}>Assigned to {task.assignedTo}</span>
                        </div>
                      ) : (
                        <div className="d-flex align-items-center">
                          <div className="d-flex">
                            <div className="rounded-circle" style={{ width: '24px', height: '24px', backgroundColor: '#2065D1' }}></div>
                            <div className="rounded-circle ms-n2" style={{ width: '24px', height: '24px', backgroundColor: '#36B37E' }}></div>
                          </div>
                          <span style={{ color: '#637381', fontSize: '13px' }} className="ms-2">{task.teamMembers} team members</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              <div className="text-center mt-2">
                <button className="btn btn-link d-flex align-items-center mx-auto" style={{ color: '#2065D1', textDecoration: 'none', fontSize: '13px', fontWeight: '600' }}>
                  View All Deadlines
                  <span className="ms-1" style={{ fontSize: '16px' }}>→</span>
                </button>
              </div>
            </Card.Body>
          </Card>
        </Col>

        {/* Task Overview */}
        <Col md={6}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Header className="bg-white border-0 py-3">
              <h5 className="mb-0" style={{ color: '#212B36', fontWeight: '700' }}>Task Overview</h5>
            </Card.Header>
            <Card.Body>
              <div className="d-flex justify-content-between mb-4">
                <div>
                  <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>{taskOverview.total}</div>
                  <div style={{ color: '#637381', fontSize: '14px' }}>Total Tasks</div>
                </div>
                <div className="text-end">
                  <div style={{ fontSize: '32px', fontWeight: '700', color: '#36B37E', lineHeight: '1.2' }}>{taskOverview.completed}</div>
                  <div style={{ color: '#637381', fontSize: '14px' }}>Completed</div>
                </div>
                <div className="text-end">
                  <div style={{ fontSize: '32px', fontWeight: '700', color: '#FFB020', lineHeight: '1.2' }}>{taskOverview.pending}</div>
                  <div style={{ color: '#637381', fontSize: '14px' }}>Pending</div>
                </div>
              </div>
              <ProgressBar 
                style={{ height: '8px', backgroundColor: '#F4F6F8', borderRadius: '4px' }}
                className="mb-2">
                <ProgressBar 
                  variant="success" 
                  now={taskOverview.completionPercentage} 
                  style={{ backgroundColor: '#36B37E', borderRadius: '4px' }}
                />
              </ProgressBar>
              <div style={{ color: '#637381', fontSize: '13px' }} className="text-center">{taskOverview.completionPercentage}% Completed</div>
            </Card.Body>
          </Card>
        </Col>

        {/* Today's Performance */}
        <Col md={6}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Header className="bg-white border-0 py-3">
              <h5 className="mb-0" style={{ color: '#212B36', fontWeight: '700' }}>Today's Performance</h5>
            </Card.Header>
            <Card.Body>
              <div className="mb-4">
                <div className="d-flex align-items-center mb-2">
                  <BsClock style={{ color: '#637381' }} size={16} className="me-2" />
                  <span style={{ color: '#637381', fontSize: '13px' }}>Time Logged Today:</span>
                  <span style={{ fontWeight: '600', color: '#212B36', fontSize: '13px' }} className="ms-2">{todaysPerformance.timeLogged}</span>
                </div>
                <div className="d-flex align-items-center">
                  <span style={{ color: '#637381', fontSize: '13px' }}>Weekly Hours:</span>
                  <span style={{ fontWeight: '600', color: '#212B36', fontSize: '13px' }} className="ms-2">
                    {todaysPerformance.weeklyHours.completed}h / {todaysPerformance.weeklyHours.total}h
                  </span>
                </div>
              </div>
              <ProgressBar 
                style={{ height: '8px', backgroundColor: '#F4F6F8', borderRadius: '4px' }}
                className="mb-2">
                <ProgressBar 
                  variant="primary" 
                  now={todaysPerformance.weeklyHours.percentage} 
                  style={{ backgroundColor: '#2065D1', borderRadius: '4px' }}
                />
              </ProgressBar>
              <div style={{ color: '#637381', fontSize: '13px' }} className="text-center">{todaysPerformance.weeklyHours.percentage}% Goal Completed</div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default EmployeeDashboard;














import { BsCalendar, BsClock, BsCheckCircle, BsThreeDotsVertical, BsChevronDown,BsFilter  } from 'react-icons/bs';


  // Mock data for task overview
  const taskOverview = {
    total: 26,
    completed: 14,
    pending: 12,
    completionPercentage: 54
  };

<Col md={6}>
<div className="task-list-container">
  <div className="task-list-header">
    <h5 className="task-list-title">Task Overview</h5>
    <button className="task-filter-btn">
      <BsFilter size={18} />
      Filter Tasks
    </button>
  </div>
  
  <div className="task-item">
    <div className="task-icon task-icon-blue">
      <FaTasks size={24} />
    </div>
    <div className="task-content">
      <div className="task-name">Total Tasks</div>
      <div className="task-meta">
        <span className="task-stat-badge task-stat-badge-blue">{taskOverview.total}</span>
        <span>Tasks in progress</span>
      </div>
    </div>
    <div className="task-progress">
      <div className="task-progress-bar">
        <div 
          className="task-progress-value" 
          style={{ width: `${taskOverview.completionPercentage}%` }}
        />
      </div>
      <div className="task-progress-text">{taskOverview.completionPercentage}% Done</div>
    </div>
  </div>

  <div className="task-item">
    <div className="task-icon task-icon-green">
      <BsCheckCircle size={24} />
    </div>
    <div className="task-content">
      <div className="task-name">Completed Tasks</div>
      <div className="task-meta">
        <span className="task-stat-badge task-stat-badge-green">{taskOverview.completed}</span>
        <span>Tasks completed</span>
      </div>
    </div>
  </div>

  <div className="task-item">
    <div className="task-icon task-icon-yellow">
      <BsCalendar size={24} />
    </div>
    <div className="task-content">
      <div className="task-name">Pending Tasks</div>
      <div className="task-meta">
        <span className="task-stat-badge task-stat-badge-yellow">{taskOverview.pending}</span>
        <span>Tasks pending</span>
      </div>
    </div>
  </div>
</div>
</Col>

















import React, { useState } from 'react';
import { Card, Row, Col, Badge, ProgressBar, Dropdown } from 'react-bootstrap';
import { BsCalendar, BsClock, BsCheckCircle, BsThreeDotsVertical, BsChevronDown,BsFilter  } from 'react-icons/bs';
import { FaTrophy, FaRegCalendarAlt, FaTasks } from 'react-icons/fa';

// Import Inter font
import '@fontsource/inter/400.css';
import '@fontsource/inter/500.css';
import '@fontsource/inter/600.css';
import '@fontsource/inter/700.css';

// Import custom styles
import './Dashbord.css';

const EmployeeDashboard = () => {
  const [selectedTimeframe, setSelectedTimeframe] = useState('This Week');

  // Mock data for productivity leaderboard
  const leaderboardData = [
    {
      name: 'Michael Chen',
      avatar: 'MC',
      efficiency: 98,
      hoursWorked: 38,
      tasksCompleted: 24,
      isTopPerformer: true
    },
    {
      name: 'You',
      avatar: 'YO',
      efficiency: 85,
      hoursWorked: 32,
      tasksCompleted: 18,
      position: 2,
      positionChange: '+1'
    },
    {
      name: 'Sarah Williams',
      avatar: 'SW',
      efficiency: 75,
      hoursWorked: 30,
      tasksCompleted: 15,
      risingTalent: true
    }
  ];

  // Mock data for upcoming deadlines
  const upcomingDeadlines = [
    {
      title: 'Website Redesign',
      priority: 'High',
      dueDate: 'Tomorrow',
      assignedTo: 'Emma Davis',
      time: '5:00 PM'
    },
    {
      title: 'Q2 Sales Report',
      priority: 'Medium', 
      dueDate: 'Friday',
      assignedTo: 'James Wilson',
      time: '3:00 PM'
    },
    {
      title: 'Client Presentation',
      priority: 'Normal',
      dueDate: 'Next Monday',
      teamMembers: 2,
      time: '2:00 PM'
    }
  ];

  // Mock data for task overview
  const taskOverview = {
    total: 26,
    completed: 14,
    pending: 12,
    completionPercentage: 54
  };

  // Mock data for today's performance
  const todaysPerformance = {
    timeLogged: '4h 30m',
    weeklyHours: {
      completed: 22,
      total: 40,
      percentage: 55
    }
  };

  const getPriorityClass = (priority) => {
    switch(priority.toLowerCase()) {
      case 'high': return 'danger';
      case 'medium': return 'warning';
      case 'normal': return 'success';
      default: return 'secondary';
    }
  };

  const getPriorityBgClass = (priority) => {
    switch(priority.toLowerCase()) {
      case 'high': return 'bg-danger-subtle text-danger';
      case 'medium': return 'bg-warning-subtle text-warning';
      case 'normal': return 'bg-success-subtle text-success';
      default: return 'bg-secondary-subtle text-secondary';
    }
  };

  const getDueDateClass = (dueDate) => {
    switch(dueDate.toLowerCase()) {
      case 'tomorrow': return 'bg-danger-subtle text-danger';
      case 'friday': return 'bg-warning-subtle text-warning';
      default: return 'bg-warning-subtle text-warning';
    }
  };

  return (
    <div className="p-4" >
      {/* <div className="d-flex align-items-center mb-4">
        <div className="me-2 d-flex align-items-center justify-content-center" style={{ width: '40px', height: '40px', backgroundColor: '#FFF7CD', borderRadius: '12px' }}>
          <FaTasks style={{ color: '#FFB020' }} size={24} />
        </div>
        <h4 className="mb-0" style={{ color: '#212B36', fontWeight: 700 }}>Welcome to Your Dashboard</h4>
      </div> */}

      {/* Metrics Cards */}
      <Row className="g-4 mb-4">
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#E8F6FF', borderRadius: '12px' }}>
                <FaTasks style={{ color: '#2065D1' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>12</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Active Tasks</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#FFF7CD', borderRadius: '12px' }}>
                <BsClock style={{ color: '#FFB020' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>32.5h</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Hours Logged</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#E8FFF3', borderRadius: '12px' }}>
                <BsCheckCircle style={{ color: '#36B37E' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>8</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Completed Tasks</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
        <Col xs={6} md={3}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Body className="d-flex align-items-center">
              <div className="me-3 d-flex align-items-center justify-content-center" style={{ width: '48px', height: '48px', backgroundColor: '#FFE7E7', borderRadius: '12px' }}>
                <FaTrophy style={{ color: '#FF4842' }} size={24} />
              </div>
              <div>
                <div style={{ fontSize: '32px', fontWeight: '700', color: '#212B36', lineHeight: '1.2' }}>95%</div>
                <div style={{ color: '#637381', fontSize: '14px' }}>Performance</div>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
      
      <Row className="g-4">
        {/* Productivity Leaderboard */}
        <Col md={6}>
          <Card style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Header className="bg-white border-0 d-flex justify-content-between align-items-center py-3">
              <div className="d-flex align-items-center">
                <FaTrophy style={{ color: '#FFB020' }} size={20} className="me-2" />
                <h5 className="mb-0" style={{ color: '#212B36' }}>Productivity Leaderboard</h5>
              </div>
              <div className="d-flex align-items-center">
                <Dropdown className="me-2">
                  <Dropdown.Toggle variant="light" size="sm" style={{ backgroundColor: '#F4F6F8', border: 'none', fontSize: '13px' }}>
                    {selectedTimeframe} <BsChevronDown size={12} className="ms-1" />
                  </Dropdown.Toggle>
                </Dropdown>
                <button className="btn btn-light btn-sm" style={{ backgroundColor: '#F4F6F8', border: 'none', fontSize: '13px' }}>All Teams</button>
              </div>
            </Card.Header>
            <Card.Body className="px-4">
              {leaderboardData.map((user, index) => (
                <div key={index} className="mb-4" style={{
                  padding: '16px',
                  borderRadius: '12px',
                  backgroundColor: index === 0 ? '#FFF7CD' : 'transparent',
                  border: index === 0 ? 'none' : '1px solid #F4F6F8'
                }}>
                  <div className="d-flex align-items-center">
                    <div className="me-3" style={{ fontWeight: '700', color: '#212B36', fontSize: '16px' }}>{index + 1}</div>
                    <div className="rounded-circle me-3 d-flex align-items-center justify-content-center" 
                         style={{
                           width: '40px',
                           height: '40px',
                           backgroundColor: index === 0 ? '#FFB020' : '#F4F6F8',
                           color: index === 0 ? 'white' : '#637381',
                           fontWeight: '600'
                         }}>
                      {user.avatar}
                    </div>
                    <div className="flex-grow-1">
                      <div className="d-flex justify-content-between align-items-center mb-2">
                        <div className="d-flex align-items-center">
                          <h6 className="mb-0" style={{ color: '#212B36', fontWeight: '600' }}>{user.name}</h6>
                          {user.isTopPerformer && (
                            <span className="ms-2 px-2 py-1" style={{ 
                              color: '#FFB020', 
                              fontSize: '12px',
                              backgroundColor: '#FFF7CD',
                              borderRadius: '6px',
                              fontWeight: '600'
                            }}>Top Performer</span>
                          )}
                          {user.positionChange && (
                            <span className="ms-2 px-2 py-1" style={{ 
                              color: '#36B37E', 
                              fontSize: '12px',
                              backgroundColor: '#E8FFF3',
                              borderRadius: '6px',
                              fontWeight: '600'
                            }}>+{user.positionChange} position</span>
                          )}
                        </div>
                        <span style={{ fontWeight: '700', color: index === 0 ? '#FFB020' : '#2065D1', fontSize: '16px' }}>{user.efficiency}%</span>
                      </div>
                      <ProgressBar 
                        now={user.efficiency} 
                        style={{
                          height: '8px',
                          backgroundColor: '#F4F6F8',
                          borderRadius: '4px'
                        }}
                        variant={index === 0 ? 'warning' : 'primary'}
                        className="mb-2"
                      />
                      <div style={{ color: '#637381', fontSize: '13px' }}>
                        <span className="me-2">{user.hoursWorked}h worked</span>
                        <span style={{ color: '#919EAB' }}>•</span>
                        <span className="ms-2">{user.tasksCompleted} tasks completed</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              <div className="text-center">
                <button className="btn btn-link" style={{ color: '#2065D1', textDecoration: 'none', fontSize: '13px' }}>View Full Leaderboard →</button>
              </div>
            </Card.Body>
          </Card>
        </Col>

        {/* Upcoming Deadlines */}
        <Col md={6}>
          <Card className="h-100" style={{ borderRadius: '16px', boxShadow: '0 2px 4px rgba(145, 158, 171, 0.16)', border: 'none' }}>
            <Card.Header className="bg-white border-0 d-flex justify-content-between align-items-center py-3">
              <div className="d-flex align-items-center">
                <div className="me-2 d-flex align-items-center justify-content-center" style={{ width: '32px', height: '32px', backgroundColor: '#FFE7E7', borderRadius: '8px' }}>
                  <FaRegCalendarAlt style={{ color: '#FF4842' }} size={18} />
                </div>
                <h5 className="mb-0" style={{ color: '#212B36', fontWeight: '700' }}>Upcoming Deadlines</h5>
              </div>
              <button className="btn btn-light btn-sm d-flex align-items-center btn-action">
                <span className="me-1">+</span> Add Task
              </button>
            </Card.Header>
            <Card.Body className="px-4 pb-3">
              {upcomingDeadlines.map((task, index) => (
                <div key={index} className="mb-3 task-card" style={{ padding: '16px', borderRadius: '12px', border: '1px solid #F4F6F8', cursor: 'pointer' }}>
                  <div className="d-flex justify-content-between align-items-start mb-3">
                    <h6 className="mb-0" style={{ color: '#212B36', fontWeight: '600', fontSize: '14px' }}>{task.title}</h6>
                    <div className="d-flex align-items-center gap-2">
                      <span className="custom-badge" style={{
                        padding: '6px 10px',
                        borderRadius: '6px',
                        fontSize: '12px',
                        backgroundColor: task.priority === 'High' ? '#FFE7E7' : task.priority === 'Medium' ? '#FFF7CD' : '#E8FFF3',
                        color: task.priority === 'High' ? '#FF4842' : task.priority === 'Medium' ? '#FFB020' : '#36B37E',
                        fontWeight: '600',
                        border: 'none'
                      }}>{task.priority} Priority</span>
                      <span className="custom-badge" style={{
                        padding: '6px 10px',
                        borderRadius: '6px',
                        fontSize: '12px',
                        backgroundColor: task.dueDate === 'Tomorrow' ? '#FFE7E7' : task.dueDate === 'Next Monday' ? '#E8FFF3' : '#FFF7CD',
                        color: task.dueDate === 'Tomorrow' ? '#FF4842' : task.dueDate === 'Next Monday' ? '#36B37E' : '#FFB020',
                        fontWeight: '600',
                        border: 'none'
                      }}>{task.dueDate}</span>
                      <div className="dropdown">
                        <button className="btn btn-link p-0 d-flex align-items-center justify-content-center" style={{ color: '#637381', width: '24px', height: '24px' }}>
                          <BsThreeDotsVertical size={16} />
                        </button>
                      </div>
                    </div>
                  </div>
                  <div className="d-flex align-items-center justify-content-between">
                    <div className="d-flex align-items-center">
                      <BsCalendar style={{ color: '#637381' }} size={14} className="me-2" />
                      <span style={{ color: '#637381', fontSize: '13px' }}>Due {task.dueDate} at {task.time}</span>
                    </div>
                    <div>
                      {task.assignedTo ? (
                        <div className="d-flex align-items-center">
                          <div className="avatar-circle me-2" style={{ backgroundColor: '#2065D1' }}>
                            {task.assignedTo.split(' ').map(name => name[0]).join('')}
                          </div>
                          <span style={{ color: '#637381', fontSize: '13px' }}>Assigned to {task.assignedTo}</span>
                        </div>
                      ) : (
                        <div className="d-flex align-items-center">
                          <div className="avatar-stack">
                            <div className="avatar-circle" style={{ backgroundColor: '#2065D1', zIndex: 1 }}>T1</div>
                            <div className="avatar-circle" style={{ backgroundColor: '#36B37E', zIndex: 0 }}>T2</div>
                          </div>
                          <span style={{ color: '#637381', fontSize: '13px' }} className="ms-2">{task.teamMembers} team members</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              <div className="text-center mt-2">
                <button className="btn btn-link d-flex align-items-center mx-auto deadline-link">
                  View All Deadlines
                  <span className="ms-1" style={{ fontSize: '16px' }}>→</span>
                </button>
              </div>
            </Card.Body>
          </Card>
        </Col>

        {/* Task Overview */}
        <Col md={6}>
          <div className="task-list-container">
            <div className="task-list-header">
              <h5 className="task-list-title">Task Overview</h5>
              <button className="task-filter-btn">
                <BsFilter size={18} />
                Filter Tasks
              </button>
            </div>
            
            <div className="task-item">
              <div className="task-icon task-icon-blue">
                <FaTasks size={24} />
              </div>
              <div className="task-content">
                <div className="task-name">Total Tasks</div>
                <div className="task-meta">
                  <span className="task-stat-badge task-stat-badge-blue">{taskOverview.total}</span>
                  <span>Tasks in progress</span>
                </div>
              </div>
              <div className="task-progress">
                <div className="task-progress-bar">
                  <div 
                    className="task-progress-value" 
                    style={{ width: `${taskOverview.completionPercentage}%` }}
                  />
                </div>
                <div className="task-progress-text">{taskOverview.completionPercentage}% Done</div>
              </div>
            </div>

            <div className="task-item">
              <div className="task-icon task-icon-green">
                <BsCheckCircle size={24} />
              </div>
              <div className="task-content">
                <div className="task-name">Completed Tasks</div>
                <div className="task-meta">
                  <span className="task-stat-badge task-stat-badge-green">{taskOverview.completed}</span>
                  <span>Tasks completed</span>
                </div>
              </div>
            </div>

            <div className="task-item">
              <div className="task-icon task-icon-yellow">
                <BsCalendar size={24} />
              </div>
              <div className="task-content">
                <div className="task-name">Pending Tasks</div>
                <div className="task-meta">
                  <span className="task-stat-badge task-stat-badge-yellow">{taskOverview.pending}</span>
                  <span>Tasks pending</span>
                </div>
              </div>
            </div>
          </div>
        </Col>

        {/* Today's Performance */}
        <Col md={6}>
          <Card className="performance-card">
            <Card.Header className="bg-white border-0 py-3">
              <h5 className="mb-0" style={{ color: '#212B36', fontWeight: '700' }}>Today's Performance</h5>
            </Card.Header>
            <Card.Body>
              <div className="mb-4">
                <div className="performance-meta mb-2">
                  <BsClock size={16} className="me-2" />
                  <span>Time Logged Today:</span>
                  <span className="performance-value ms-2">{todaysPerformance.timeLogged}</span>
                </div>
                <div className="performance-meta">
                  <span>Weekly Hours:</span>
                  <span className="performance-value ms-2">
                    {todaysPerformance.weeklyHours.completed}h / {todaysPerformance.weeklyHours.total}h
                  </span>
                </div>
              </div>
              <ProgressBar 
                className="progress-bar-container mb-2">
                <ProgressBar 
                  variant="primary" 
                  now={todaysPerformance.weeklyHours.percentage} 
                  className="progress-bar-primary"
                />
              </ProgressBar>
              <div className="progress-text text-center">{todaysPerformance.weeklyHours.percentage}% Goal Completed</div>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default EmployeeDashboard;




































import React, { useEffect, useState } from 'react';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { Modal, Form, Button } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { deletejob, fetchjobs, updatejob, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
import Swal from 'sweetalert2';
import { fetchusers } from '../../../../redux/slices/userSlice';

function ProjectJobsTab() {
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;
  console.log("hello me project id", id);

  const dispatch = useDispatch()

  const [selectedProduction, setSelectedProduction] = useState('');
  const [selectedAdditional, setSelectedAdditional] = useState('');
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState('');

  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState('');
  const [assignmentDescription, setAssignmentDescription] = useState('');



  const jobs = [
    {
      id: "00001",
      brandName: "Brand1",
      subBrand: "SubBrand1",
      flavour: "Flavour1",
      packType: "Type1",
      packSize: "Size 1ml",
      packCode: "Code1",
      deadline: "2024/01/20",
      brief: "ViewBrief",
      status: "Pending Upload",
      statusVariant: "warning",
    },
    {
      id: "00002",
      brandName: "Brand2",
      subBrand: "SubBrand2",
      flavour: "Flavour2",
      packType: "Type2",
      packSize: "Size 2ml",
      packCode: "Code2",
      deadline: "2024/01/25",
      brief: "ViewBrief",
      status: "In Progress",
      statusVariant: "info",
    },
    {
      id: "00003",
      brandName: "Brand3",
      subBrand: "SubBrand3",
      flavour: "Flavour3",
      packType: "Type3",
      packSize: "Size 3ml",
      packCode: "Code3",
      deadline: "2024/02/01",
      brief: "ViewBrief",
      status: "DraftSaved",
      statusVariant: "secondary",
    },
  ];
  // holds "Production" or "Designer"  
  const [selectedEmployee, setSelectedEmployee] = useState("");


  const { userAll } = useSelector((state) => state.user);
  console.log("data user", userAll?.data?.users);

  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [currentAssignment, setCurrentAssignment] = useState(1);
  const itemsAssignment = 10;



  // Filter users dynamically based on selectedDesigner value
  const filteredAssignment = (userAll?.data?.users || []).filter(
    (j) =>
      ((j?.assign || "").toString().toLowerCase() ===
        selectedDesigner.toLowerCase()) &&
      selectedDesigner !== ""
  );

  // Pagination of filtered users (optional, keeps 10 per page)
  const paginatedAssignment = filteredAssignment.slice(
    (currentAssignment - 1) * itemsAssignment,
    currentAssignment * itemsAssignment
  );

  // Your submit handler (just a placeholder)
  const handleSubmitAssignment = (data) => {
    console.log(data);
    
    // You can send selectedDesigner, selectedEmployee, assignmentDescription here
    console.log({
      selectedDesigner,
      selectedEmployee,
      assignmentDescription,
    });
    // Close modal after submission
    setShowAssignModal(false);
  };



  const employees = [
    { _id: "123", name: "John Doe" },
    { _id: "456", name: "Jane Smith" },
    // aur bhi employees
  ];

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };

  // const handleSubmitAssignment = () => {
  //   const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);

  //   if (selectedJobIds.length === 0) {
  //     setErrorMessage("Please select at least 1 job to assign.");
  //     setTimeout(() => setErrorMessage(""), 3000);
  //     return;
  //   }

  //   if (!selectedDesigner) {
  //     setErrorMessage("Please select a designer.");
  //     setTimeout(() => setErrorMessage(""), 3000);
  //     return;
  //   }

  //   // ✅ Now send data to handleJobAssign
  //   handleJobAssign(selectedJobIds, selectedDesigner);

  //   setShowAssignModal(false);
  //   setSelectedProduction('');
  //   setSelectedAdditional('');
  //   setSelectedJob(null);
  //   setSelectedDesigner('');
  //   setAssignmentDescription('');
  // };

  const handleCSVImport = (event) => {
    const file = event.target.files[0];
    if (file) {
      console.log("CSV file selected:", file.name);
    }
  };

  const getPriorityClass = (priority) => {
    switch (priority.toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };
  // ////////////////////////////////////////
  const navigate = useNavigate();
  // const dispatch = useDispatch();
  // const location = useLocation();
  // const params = useParams();
  // const id = location.state?.id || params.id;
  useEffect(() => {
    console.log("Project ID:", id);
  }, [id]);


  // ///
  const { job, loading, error } = useSelector((state) => state.jobs);
  console.log(job.jobs, "all jobs");

  useEffect(() => {
    dispatch(fetchjobs());
  }, [dispatch]);


  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You want to mark this job as Cancelled?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, mark as Cancelled!",
    }).then((result) => {
      if (result.isConfirmed) {
        // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
        dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
          .unwrap()
          .then(() => {
            Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
            dispatch(fetchjobs());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong while updating.", "error");
          });
      }
    });
  };


  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  }


  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "completed":
        return "bg-success text-white";
      case "open":
        return "bg-primary text-white";
      case "cancelled":
        return "bg-dark text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleJobAssign = (selectedIds, assignTo) => {

    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(UpdateJobAssign(payload))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
        dispatch(fetchjobs());
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };


  // // ✅ Copy File Name & Download CSV
  const handleDownloadFileNamesCSV = () => {
    const rows = [["JobFileName"]];
    job?.jobs?.forEach((j, index) => {
      const jobNo = String(index + 1).padStart(5, '0');
      const fileName = `${jobNo}_${j.brandName}_${j.subBrand}_${j.flavour}_${j.packType}_${j.packSize}_${j.packCode}`;
      rows.push([fileName]);
    });
    const csvContent = rows.map((r) => r.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "JobFileNames.csv";
    link.click();
    URL.revokeObjectURL(url);
  };



  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredProjects = job?.jobs || [];
  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="card">
      <div className="card-header d-flex align-content-center justify-content-between mt-3">
        <h5 className="card-title mb-0">Jobs List</h5>
        <div className="text-end">
          {/* ✅ Assign Button always enabled, shows error if none selected */}
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
          {/* <Button className="btn btn-secondary m-2" onClick={handleDownloadFileNamesCSV}>
            📄 Copy File Name
          </Button> */}

          <label className="btn btn-success m-2">
            <i className="bi bi-upload"></i> Import CSV
            <input
              type="file"
              accept=".csv"
              onChange={handleCSVImport}
              hidden
            />
          </label>

          <Link
            to="/admin/AddJobTracker"
            state={{ id }} // ID pass kar rahe hain yahan
          >
            <button id="All_btn" className="btn btn-primary">
              <i className="bi bi-plus"></i> Add Job
            </button>
          </Link>
        </div>
      </div>



      {/* Loader */}
      {loading && (
        <div className="text-center my-5">
          <Spinner animation="border" variant="primary" />
          <div className="mt-2">Loading projects...</div>
        </div>
      )}

      {/* Error */}
      {error && (
        <div className="text-danger text-center my-5">
          Failed to load projects. Please try again later.
        </div>
      )}
      <div className="card-body">
        {/* ✅ Error message block */}
        {errorMessage && (
          <div className="alert alert-danger py-2" role="alert">
            {errorMessage}
          </div>
        )}

        <div className="table-responsive">
          <table className="table table-hover">
            <thead>
              <tr>
                <th>
                  <input
                    type="checkbox"
                    onChange={(e) => {
                      const checked = e.target.checked;
                      const newSelectedJobs = {};
                      job?.jobs?.forEach((job) => {
                        newSelectedJobs[job._id] = checked;
                      });
                      setSelectedJobs(newSelectedJobs);
                    }}
                    checked={
                      job?.jobs?.length > 0 &&
                      job?.jobs?.every((j) => selectedJobs[j._id])
                    }
                  />
                </th>
                <th>JobsNo</th>
                <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                <th>Brand</th>
                <th>SubBrand</th>
                <th>Flavour</th>
                <th>PackType</th>
                <th>PackSize</th>
                <th>PackCode</th>
                <th>Priority</th>
                <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                <th>Assing</th>
                <th>TotalTime</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {paginatedProjects?.map((job, index) => (
                <tr key={job._id}>
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedJobs[job._id] || false}
                      onChange={() => handleCheckboxChange(job._id)}
                    />
                  </td>
                  {/* <td>
                    <Link>
                      {String(index + 1).padStart(4, '0')}
                    </Link>
                  </td> */}
                  <td onClick={() => JobDetails(job)}>
                    <Link>
                      {String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}</Link>
                  </td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.brandName}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packType}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packSize}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job?.packCode}</td>
                  <td>
                    <span className={getPriorityClass(job.priority)}>
                      {job.priority}
                    </span>
                  </td>
                  <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.assign}</td>
                  <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                  {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                  <td>
                    <span
                      className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                    >
                      {job.Status}
                    </span>
                  </td>
                  <td className="d-flex">
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                      <i className="bi bi-eye"></i> View
                    </button>
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                      <i className="bi bi-pencil"></i> Edit
                    </button>
                    <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                      <i className="bi bi-trash"></i> Cancelled
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* ✅ Job Assignment Modal */}
      {/* <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => setSelectedDesigner(e.target.value)}
              >
                <option value="">-- Select --</option>
                <option value="Production">Production</option>
                <option value="Designer">Designer</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => setSelectedDesigner(e.target.value)}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment?.map((emp) => (
                  <option key={emp._id} value={emp._id}>
                    {emp.name}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal> */}

      {/* Button to open modal - just for example */}
      <Button onClick={() => setShowAssignModal(true)}>Open Assign Modal</Button>

      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee(""); // reset employee select when changing designer/production
                }}
              >
                <option value="">-- Select --</option>
                <option value="Production">Production</option>
                <option value="Designer">Designer</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment.map((emp) => (
                  <option key={emp._id} value={emp._id}>
                    {emp.firstName || 'Unnamed Employee'}_
                      {emp.lastName || 'Unnamed Employee'}
                  </option>

                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredProjects.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default ProjectJobsTab;



import React, { useEffect, useState } from 'react';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { Modal, Form, Button } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { deletejob, fetchjobs, updatejob, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
import Swal from 'sweetalert2';
import { fetchusers } from '../../../../redux/slices/userSlice';

function ProjectJobsTab() {
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;
  console.log("hello me project id", id);

  const dispatch = useDispatch()

  const [selectedProduction, setSelectedProduction] = useState('');
  const [selectedAdditional, setSelectedAdditional] = useState('');
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState('');

  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState('');
  const [assignmentDescription, setAssignmentDescription] = useState('');



  const jobs = [
    {
      id: "00001",
      brandName: "Brand1",
      subBrand: "SubBrand1",
      flavour: "Flavour1",
      packType: "Type1",
      packSize: "Size 1ml",
      packCode: "Code1",
      deadline: "2024/01/20",
      brief: "ViewBrief",
      status: "Pending Upload",
      statusVariant: "warning",
    },
    {
      id: "00002",
      brandName: "Brand2",
      subBrand: "SubBrand2",
      flavour: "Flavour2",
      packType: "Type2",
      packSize: "Size 2ml",
      packCode: "Code2",
      deadline: "2024/01/25",
      brief: "ViewBrief",
      status: "In Progress",
      statusVariant: "info",
    },
    {
      id: "00003",
      brandName: "Brand3",
      subBrand: "SubBrand3",
      flavour: "Flavour3",
      packType: "Type3",
      packSize: "Size 3ml",
      packCode: "Code3",
      deadline: "2024/02/01",
      brief: "ViewBrief",
      status: "DraftSaved",
      statusVariant: "secondary",
    },
  ];
  // holds "Production" or "Designer"  
  const [selectedEmployee, setSelectedEmployee] = useState("");


  const { userAll } = useSelector((state) => state.user);
  console.log("data user", userAll?.data?.users);

  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [currentAssignment, setCurrentAssignment] = useState(1);
  const itemsAssignment = 10;



  // Filter users dynamically based on selectedDesigner value
  const filteredAssignment = (userAll?.data?.users || []).filter(
    (j) =>
      ((j?.assign || "").toString().toLowerCase() ===
        selectedDesigner.toLowerCase()) &&
      selectedDesigner !== ""
  );

  // Pagination of filtered users (optional, keeps 10 per page)
  const paginatedAssignment = filteredAssignment.slice(
    (currentAssignment - 1) * itemsAssignment,
    currentAssignment * itemsAssignment
  );

  // Your submit handler (just a placeholder)
  const handleSubmitAssignment = (data) => {
    console.log(data);
    
    // You can send selectedDesigner, selectedEmployee, assignmentDescription here
    console.log({
      selectedDesigner,
      selectedEmployee,
      assignmentDescription,
    });
    // Close modal after submission
    setShowAssignModal(false);
  };



  const employees = [
    { _id: "123", name: "John Doe" },
    { _id: "456", name: "Jane Smith" },
    // aur bhi employees
  ];

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };

  // const handleSubmitAssignment = () => {
  //   const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);

  //   if (selectedJobIds.length === 0) {
  //     setErrorMessage("Please select at least 1 job to assign.");
  //     setTimeout(() => setErrorMessage(""), 3000);
  //     return;
  //   }

  //   if (!selectedDesigner) {
  //     setErrorMessage("Please select a designer.");
  //     setTimeout(() => setErrorMessage(""), 3000);
  //     return;
  //   }

  //   // ✅ Now send data to handleJobAssign
  //   handleJobAssign(selectedJobIds, selectedDesigner);

  //   setShowAssignModal(false);
  //   setSelectedProduction('');
  //   setSelectedAdditional('');
  //   setSelectedJob(null);
  //   setSelectedDesigner('');
  //   setAssignmentDescription('');
  // };

  const handleCSVImport = (event) => {
    const file = event.target.files[0];
    if (file) {
      console.log("CSV file selected:", file.name);
    }
  };

  const getPriorityClass = (priority) => {
    switch (priority.toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };
  // ////////////////////////////////////////
  const navigate = useNavigate();
  // const dispatch = useDispatch();
  // const location = useLocation();
  // const params = useParams();
  // const id = location.state?.id || params.id;
  useEffect(() => {
    console.log("Project ID:", id);
  }, [id]);


  // ///
  const { job, loading, error } = useSelector((state) => state.jobs);
  console.log(job.jobs, "all jobs");

  useEffect(() => {
    dispatch(fetchjobs());
  }, [dispatch]);


  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You want to mark this job as Cancelled?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, mark as Cancelled!",
    }).then((result) => {
      if (result.isConfirmed) {
        // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
        dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
          .unwrap()
          .then(() => {
            Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
            dispatch(fetchjobs());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong while updating.", "error");
          });
      }
    });
  };


  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  }


  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "completed":
        return "bg-success text-white";
      case "open":
        return "bg-primary text-white";
      case "cancelled":
        return "bg-dark text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleJobAssign = (selectedIds, assignTo) => {

    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(UpdateJobAssign(payload))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
        dispatch(fetchjobs());
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };


  // // ✅ Copy File Name & Download CSV
  const handleDownloadFileNamesCSV = () => {
    const rows = [["JobFileName"]];
    job?.jobs?.forEach((j, index) => {
      const jobNo = String(index + 1).padStart(5, '0');
      const fileName = `${jobNo}_${j.brandName}_${j.subBrand}_${j.flavour}_${j.packType}_${j.packSize}_${j.packCode}`;
      rows.push([fileName]);
    });
    const csvContent = rows.map((r) => r.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "JobFileNames.csv";
    link.click();
    URL.revokeObjectURL(url);
  };



  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredProjects = job?.jobs || [];
  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="card">
      <div className="card-header d-flex align-content-center justify-content-between mt-3">
        <h5 className="card-title mb-0">Jobs List</h5>
        <div className="text-end">
          {/* ✅ Assign Button always enabled, shows error if none selected */}
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
          {/* <Button className="btn btn-secondary m-2" onClick={handleDownloadFileNamesCSV}>
            📄 Copy File Name
          </Button> */}

          <label className="btn btn-success m-2">
            <i className="bi bi-upload"></i> Import CSV
            <input
              type="file"
              accept=".csv"
              onChange={handleCSVImport}
              hidden
            />
          </label>

          <Link
            to="/admin/AddJobTracker"
            state={{ id }} // ID pass kar rahe hain yahan
          >
            <button id="All_btn" className="btn btn-primary">
              <i className="bi bi-plus"></i> Add Job
            </button>
          </Link>
        </div>
      </div>



      {/* Loader */}
      {loading && (
        <div className="text-center my-5">
          <Spinner animation="border" variant="primary" />
          <div className="mt-2">Loading projects...</div>
        </div>
      )}

      {/* Error */}
      {error && (
        <div className="text-danger text-center my-5">
          Failed to load projects. Please try again later.
        </div>
      )}
      <div className="card-body">
        {/* ✅ Error message block */}
        {errorMessage && (
          <div className="alert alert-danger py-2" role="alert">
            {errorMessage}
          </div>
        )}

        <div className="table-responsive">
          <table className="table table-hover">
            <thead>
              <tr>
                <th>
                  <input
                    type="checkbox"
                    onChange={(e) => {
                      const checked = e.target.checked;
                      const newSelectedJobs = {};
                      job?.jobs?.forEach((job) => {
                        newSelectedJobs[job._id] = checked;
                      });
                      setSelectedJobs(newSelectedJobs);
                    }}
                    checked={
                      job?.jobs?.length > 0 &&
                      job?.jobs?.every((j) => selectedJobs[j._id])
                    }
                  />
                </th>
                <th>JobsNo</th>
                <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                <th>Brand</th>
                <th>SubBrand</th>
                <th>Flavour</th>
                <th>PackType</th>
                <th>PackSize</th>
                <th>PackCode</th>
                <th>Priority</th>
                <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                <th>Assing</th>
                <th>TotalTime</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {paginatedProjects?.map((job, index) => (
                <tr key={job._id}>
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedJobs[job._id] || false}
                      onChange={() => handleCheckboxChange(job._id)}
                    />
                  </td>
                  {/* <td>
                    <Link>
                      {String(index + 1).padStart(4, '0')}
                    </Link>
                  </td> */}
                  <td onClick={() => JobDetails(job)}>
                    <Link>
                      {String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}</Link>
                  </td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.brandName}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packType}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packSize}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job?.packCode}</td>
                  <td>
                    <span className={getPriorityClass(job.priority)}>
                      {job.priority}
                    </span>
                  </td>
                  <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.assign}</td>
                  <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                  {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                  <td>
                    <span
                      className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                    >
                      {job.Status}
                    </span>
                  </td>
                  <td className="d-flex">
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                      <i className="bi bi-eye"></i> View
                    </button>
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                      <i className="bi bi-pencil"></i> Edit
                    </button>
                    <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                      <i className="bi bi-trash"></i> Cancelled
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* ✅ Job Assignment Modal */}
      {/* <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => setSelectedDesigner(e.target.value)}
              >
                <option value="">-- Select --</option>
                <option value="Production">Production</option>
                <option value="Designer">Designer</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => setSelectedDesigner(e.target.value)}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment?.map((emp) => (
                  <option key={emp._id} value={emp._id}>
                    {emp.name}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal> */}

      {/* Button to open modal - just for example */}
      <Button onClick={() => setShowAssignModal(true)}>Open Assign Modal</Button>

      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee(""); // reset employee select when changing designer/production
                }}
              >
                <option value="">-- Select --</option>
                <option value="Production">Production</option>
                <option value="Designer">Designer</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment.map((emp) => (
                  <option key={emp._id} value={emp._id}>
                    {emp.firstName || 'Unnamed Employee'}_
                      {emp.lastName || 'Unnamed Employee'}
                  </option>

                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredProjects.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default ProjectJobsTab;






















import React, { useEffect, useState } from 'react';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { Modal, Form, Button } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { deletejob, fetchjobs, Project_job_Id, updatejob, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
import Swal from 'sweetalert2';
import { fetchusers } from '../../../../redux/slices/userSlice';

function ProjectJobsTab() {
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;
  console.log("hello me project id", id);

  const dispatch = useDispatch()

  const [selectedProduction, setSelectedProduction] = useState('');
  const [selectedAdditional, setSelectedAdditional] = useState('');
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState('');

  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState('');
  const [assignmentDescription, setAssignmentDescription] = useState('');

  const jobs = [
    {
      id: "00001",
      brandName: "Brand1",
      subBrand: "SubBrand1",
      flavour: "Flavour1",
      packType: "Type1",
      packSize: "Size 1ml",
      packCode: "Code1",
      deadline: "2024/01/20",
      brief: "ViewBrief",
      status: "Pending Upload",
      statusVariant: "warning",
    },
    {
      id: "00002",
      brandName: "Brand2",
      subBrand: "SubBrand2",
      flavour: "Flavour2",
      packType: "Type2",
      packSize: "Size 2ml",
      packCode: "Code2",
      deadline: "2024/01/25",
      brief: "ViewBrief",
      status: "In Progress",
      statusVariant: "info",
    },
    {
      id: "00003",
      brandName: "Brand3",
      subBrand: "SubBrand3",
      flavour: "Flavour3",
      packType: "Type3",
      packSize: "Size 3ml",
      packCode: "Code3",
      deadline: "2024/02/01",
      brief: "ViewBrief",
      status: "DraftSaved",
      statusVariant: "secondary",
    },
  ];


  // holds "Production" or "Designer"  
  const [selectedEmployee, setSelectedEmployee] = useState("");
  const { userAll } = useSelector((state) => state.user);
  console.log("data user", userAll?.data?.users);

  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);
  const [currentAssignment, setCurrentAssignment] = useState(1);
  const itemsAssignment = 10;

  // Filter users dynamically based on selectedDesigner value
  const filteredAssignment = (userAll?.data?.users || []).filter(
    (j) =>
      ((j?.assign || "").toString().toLowerCase() ===
        selectedDesigner.toLowerCase()) &&
      selectedDesigner !== ""
  );

  // Pagination of filtered users (optional, keeps 10 per page)
  const paginatedAssignment = filteredAssignment.slice(
    (currentAssignment - 1) * itemsAssignment,
    currentAssignment * itemsAssignment
  );

  // Your submit handler (just a placeholder)
  const handleSubmitAssignment = (data) => {
    console.log(data);

    // You can send selectedDesigner, selectedEmployee, assignmentDescription here
    console.log({
      selectedDesigner,
      selectedEmployee,
      assignmentDescription,
    });
    // Close modal after submission
    setShowAssignModal(false);
  };



  const employees = [
    { _id: "123", name: "John Doe" },
    { _id: "456", name: "Jane Smith" },
    // aur bhi employees
  ];



  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };


  const handleCSVImport = (event) => {
    const file = event.target.files[0];
    if (file) {
      console.log("CSV file selected:", file.name);
    }
  };

  const getPriorityClass = (priority) => {
    switch (priority.toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };
  // ////////////////////////////////////////
  const navigate = useNavigate();
  // const location = useLocation();
  // const params = useParams();
  // const id = location.state?.id || params.id;
  useEffect(() => {
    console.log("Project ID:", id);
  }, [id]);


  // ///
  const { job, loading, error } = useSelector((state) => state.jobs);
  console.log(job.jobs, "all jobs");

  const { ProjectJob } = useSelector((state) => state.jobs);
  console.log(ProjectJob, "all jobs");

useEffect(() => {
    dispatch(Project_job_Id(id)); 
  }, [dispatch, id]);


  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You want to mark this job as Cancelled?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, mark as Cancelled!",
    }).then((result) => {
      if (result.isConfirmed) {
        // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
        dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
          .unwrap()
          .then(() => {
            Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
            // dispatch(fetchjobs());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong while updating.", "error");
          });
      }
    });
  };


  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  }


  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "completed":
        return "bg-success text-white";
      case "open":
        return "bg-primary text-white";
      case "cancelled":
        return "bg-dark text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleJobAssign = (selectedIds, assignTo) => {

    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(UpdateJobAssign(payload))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
        // dispatch(fetchjobs());
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };


  // // ✅ Copy File Name & Download CSV
  const handleDownloadFileNamesCSV = () => {
    const rows = [["JobFileName"]];
    job?.jobs?.forEach((j, index) => {
      const jobNo = String(index + 1).padStart(5, '0');
      const fileName = `${jobNo}_${j.brandName}_${j.subBrand}_${j.flavour}_${j.packType}_${j.packSize}_${j.packCode}`;
      rows.push([fileName]);
    });
    const csvContent = rows.map((r) => r.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "JobFileNames.csv";
    link.click();
    URL.revokeObjectURL(url);
  };


  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredProjects = ProjectJob?.jobs || [];
  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="card">
      <div className="card-header d-flex align-content-center justify-content-between mt-3">
        <h5 className="card-title mb-0">Jobs List</h5>
        <div className="text-end">
          {/* ✅ Assign Button always enabled, shows error if none selected */}
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
          {/* <Button className="btn btn-secondary m-2" onClick={handleDownloadFileNamesCSV}>
            📄 Copy File Name
          </Button> */}

          <label className="btn btn-success m-2">
            <i className="bi bi-upload"></i> Import CSV
            <input
              type="file"
              accept=".csv"
              onChange={handleCSVImport}
              hidden
            />
          </label>

          <Link
            to="/admin/AddJobTracker"
            state={{ id }} // ID pass kar rahe hain yahan
          >
            <button id="All_btn" className="btn btn-primary">
              <i className="bi bi-plus"></i> Add Job
            </button>
          </Link>
        </div>
      </div>



      {/* Loader */}
      {loading && (
        <div className="text-center my-5">
          <Spinner animation="border" variant="primary" />
          <div className="mt-2">Loading projects...</div>
        </div>
      )}

      {/* Error */}

      <div className="card-body">
        {/* ✅ Error message block */}
        {errorMessage && (
          <div className="alert alert-danger py-2" role="alert">
            {errorMessage}
          </div>
        )}

        <div className="table-responsive">
          {paginatedProjects.length === 0 ? (
  <div className="text-center text-muted my-5">
    No jobs found.
  </div>
) : (
          <table className="table table-hover">
            <thead>
              <tr>
                <th>
                  <input
                    type="checkbox"
                    onChange={(e) => {
                      const checked = e.target.checked;
                      const newSelectedJobs = {};
                      job?.jobs?.forEach((job) => {
                        newSelectedJobs[job._id] = checked;
                      });
                      setSelectedJobs(newSelectedJobs);
                    }}
                    checked={
                      job?.jobs?.length > 0 &&
                      job?.jobs?.every((j) => selectedJobs[j._id])
                    }
                  />
                </th>
                <th>JobsNo</th>
                <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                <th>Brand</th>
                <th>SubBrand</th>
                <th>Flavour</th>
                <th>PackType</th>
                <th>PackSize</th>
                <th>PackCode</th>
                <th>Priority</th>
                <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                <th>Assing</th>
                <th>TotalTime</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {paginatedProjects?.map((job, index) => (
                <tr key={job._id}>
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedJobs[job._id] || false}
                      onChange={() => handleCheckboxChange(job._id)}
                    />
                  </td>
                  {/* <td>
                    <Link>
                      {String(index + 1).padStart(4, '0')}
                    </Link>
                  </td> */}
                  <td onClick={() => JobDetails(job)}>
                    <Link>
                      {String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}</Link>
                  </td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.brandName}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packType}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packSize}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job?.packCode}</td>
                  <td>
                    <span className={getPriorityClass(job.priority)}>
                      {job.priority}
                    </span>
                  </td>
                  <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.assign}</td>
                  <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                  {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                  <td>
                    <span
                      className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                    >
                      {job.Status}
                    </span>
                  </td>
                  <td className="d-flex">
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                      <i className="bi bi-eye"></i> View
                    </button>
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                      <i className="bi bi-pencil"></i> Edit
                    </button>
                    <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                      <i className="bi bi-trash"></i> Cancelled
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
)}
          {error && (
            <div className="text-danger text-center my-5">
              Failed to load projects. Please try again later.
            </div>
          )}
        </div>
      </div>

      {/* ✅ Job Assignment Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee("");
                }}
              >
                <option value="">-- Select --</option>
                <option value="Production">Production</option>
                <option value="Designer">Designer</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment.map((emp) => (
                  <option key={emp._id} value={emp._id}>
                    {emp.firstName || 'Unnamed Employee'}_
                    {emp.lastName || 'Unnamed Employee'}
                  </option>

                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>



      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredProjects.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default ProjectJobsTab;


























import React, { useEffect, useState } from 'react';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { Modal, Form, Button } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { deletejob, fetchjobs, updatejob, UpdateJobAssign } from '../../../../redux/slices/JobsSlice';
import Swal from 'sweetalert2';
import { fetchusers } from '../../../../redux/slices/userSlice';

function ProjectJobsTab() {
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;
  console.log("hello me project id", id);

const  dispatch = useDispatch()

  const [selectedProduction, setSelectedProduction] = useState('');
  const [selectedAdditional, setSelectedAdditional] = useState('');
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState('');

  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState('');
  const [assignmentDescription, setAssignmentDescription] = useState('');

  const jobs = [
    {
      id: "00001",
      brandName: "Brand1",
      subBrand: "SubBrand1",
      flavour: "Flavour1",
      packType: "Type1",
      packSize: "Size 1ml",
      packCode: "Code1",
      deadline: "2024/01/20",
      brief: "ViewBrief",
      status: "Pending Upload",
      statusVariant: "warning",
    },
    {
      id: "00002",
      brandName: "Brand2",
      subBrand: "SubBrand2",
      flavour: "Flavour2",
      packType: "Type2",
      packSize: "Size 2ml",
      packCode: "Code2",
      deadline: "2024/01/25",
      brief: "ViewBrief",
      status: "In Progress",
      statusVariant: "info",
    },
    {
      id: "00003",
      brandName: "Brand3",
      subBrand: "SubBrand3",
      flavour: "Flavour3",
      packType: "Type3",
      packSize: "Size 3ml",
      packCode: "Code3",
      deadline: "2024/02/01",
      brief: "ViewBrief",
      status: "DraftSaved",
      statusVariant: "secondary",
    },
  ];

 
    // holds "Production" or "Designer"  
    const [selectedEmployee, setSelectedEmployee] = useState("");
    const { userAll } = useSelector((state) => state.user);
    console.log("data user", userAll?.data?.users);
  
    useEffect(() => {
      dispatch(fetchusers());
    }, [dispatch]);
    const [currentAssignment, setCurrentAssignment] = useState(1);
    const itemsAssignment = 10;

    // Filter users dynamically based on selectedDesigner value
    const filteredAssignment = (userAll?.data?.users || []).filter(
      (j) =>
        ((j?.assign || "").toString().toLowerCase() ===
          selectedDesigner.toLowerCase()) &&
        selectedDesigner !== ""
    );
  
    // Pagination of filtered users (optional, keeps 10 per page)
    const paginatedAssignment = filteredAssignment.slice(
      (currentAssignment - 1) * itemsAssignment,
      currentAssignment * itemsAssignment
    );
  
    // Your submit handler (just a placeholder)
    const handleSubmitAssignment = (data) => {
      console.log(data);
      
      // You can send selectedDesigner, selectedEmployee, assignmentDescription here
      console.log({
        selectedDesigner,
        selectedEmployee,
        assignmentDescription,
      });
      // Close modal after submission
      setShowAssignModal(false);
    };
  
  
  
    const employees = [
      { _id: "123", name: "John Doe" },
      { _id: "456", name: "Jane Smith" },
      // aur bhi employees
    ];
  
  

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };


  const handleCSVImport = (event) => {
    const file = event.target.files[0];
    if (file) {
      console.log("CSV file selected:", file.name);
    }
  };

  const getPriorityClass = (priority) => {
    switch (priority.toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };
  // ////////////////////////////////////////
  const navigate = useNavigate();
  // const location = useLocation();
  // const params = useParams();
  // const id = location.state?.id || params.id;
  useEffect(() => {
    console.log("Project ID:", id);
  }, [id]);


  // ///
  const { job, loading, error } = useSelector((state) => state.jobs);
  console.log(job.jobs, "all jobs");

  const { ProjectJob } = useSelector((state) => state.jobs);
  console.log(ProjectJob, "all jobs");

useEffect(() => {
    dispatch(Project_job_Id(id)); 
  }, [dispatch, id]);


const handleDelete = (_id) => {
  console.log(_id);
  Swal.fire({
    title: "Are you sure?",
    text: "You want to mark this job as Cancelled?",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, mark as Cancelled!",
  }).then((result) => {
    if (result.isConfirmed) {
      // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
      dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
        .unwrap()
        .then(() => {
          Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
          dispatch(fetchjobs());
        })
        .catch(() => {
          Swal.fire("Error!", "Something went wrong while updating.", "error");
        });
    }
  });
};


  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  }


  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "completed":
        return "bg-success text-white";
      case "open":
        return "bg-primary text-white";
      case "cancelled":
        return "bg-dark text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleJobAssign = (selectedIds, assignTo) => {

    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(UpdateJobAssign(payload))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
        dispatch(fetchjobs());
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };


  // // ✅ Copy File Name & Download CSV
  const handleDownloadFileNamesCSV = () => {
    const rows = [["JobFileName"]];
    job?.jobs?.forEach((j, index) => {
      const jobNo = String(index + 1).padStart(5, '0');
      const fileName = `${jobNo}_${j.brandName}_${j.subBrand}_${j.flavour}_${j.packType}_${j.packSize}_${j.packCode}`;
      rows.push([fileName]);
    });
    const csvContent = rows.map((r) => r.join(",")).join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "JobFileNames.csv";
    link.click();
    URL.revokeObjectURL(url);
  };



  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredProjects = job?.jobs || [];
  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="card">
      <div className="card-header d-flex align-content-center justify-content-between mt-3">
        <h5 className="card-title mb-0">Jobs List</h5>
        <div className="text-end">
          {/* ✅ Assign Button always enabled, shows error if none selected */}
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
          {/* <Button className="btn btn-secondary m-2" onClick={handleDownloadFileNamesCSV}>
            📄 Copy File Name
          </Button> */}

          <label className="btn btn-success m-2">
            <i className="bi bi-upload"></i> Import CSV
            <input
              type="file"
              accept=".csv"
              onChange={handleCSVImport}
              hidden
            />
          </label>

          <Link
            to="/admin/AddJobTracker"
            state={{ id }} // ID pass kar rahe hain yahan
          >
            <button id="All_btn" className="btn btn-primary">
              <i className="bi bi-plus"></i> Add Job
            </button>
          </Link>
        </div>
      </div>



      {/* Loader */}
      {loading && (
        <div className="text-center my-5">
          <Spinner animation="border" variant="primary" />
          <div className="mt-2">Loading projects...</div>
        </div>
      )}

      {/* Error */}
     
      <div className="card-body">
        {/* ✅ Error message block */}
        {errorMessage && (
          <div className="alert alert-danger py-2" role="alert">
            {errorMessage}
          </div>
        )}

        <div className="table-responsive">
          <table className="table table-hover">
            <thead>
              <tr>
                <th>
                  <input
                    type="checkbox"
                    onChange={(e) => {
                      const checked = e.target.checked;
                      const newSelectedJobs = {};
                      job?.jobs?.forEach((job) => {
                        newSelectedJobs[job._id] = checked;
                      });
                      setSelectedJobs(newSelectedJobs);
                    }}
                    checked={
                      job?.jobs?.length > 0 &&
                      job?.jobs?.every((j) => selectedJobs[j._id])
                    }
                  />
                </th>
                <th>JobsNo</th>
                <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
                <th>Brand</th>
                <th>SubBrand</th>
                <th>Flavour</th>
                <th>PackType</th>
                <th>PackSize</th>
                <th>PackCode</th>
                <th>Priority</th>
                <th style={{ whiteSpace: 'nowrap' }}>Due Date</th>
                <th>Assing</th>
                <th>TotalTime</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {paginatedProjects?.map((job, index) => (
                <tr key={job._id}>
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedJobs[job._id] || false}
                      onChange={() => handleCheckboxChange(job._id)}
                    />
                  </td>
                  {/* <td>
                    <Link>
                      {String(index + 1).padStart(4, '0')}
                    </Link>
                  </td> */}
                  <td onClick={() => JobDetails(job)}>
                    <Link>
                      {String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}</Link>
                  </td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.brandName}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packType}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.packSize}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job?.packCode}</td>
                  <td>
                    <span className={getPriorityClass(job.priority)}>
                      {job.priority}
                    </span>
                  </td>
                  <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.assign}</td>
                  <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                  {/* <th>
                                        <Button id='All_btn' variant="success" style={{ width: "130px" }} size="sm" >
                                          {job.Status || "Active"}
                                        </Button></th> */}
                  <td>
                    <span
                      className={`badge ${getStatusClass(job.Status)} px-2 py-1`}
                    >
                      {job.Status}
                    </span>
                  </td>
                  <td className="d-flex">
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => JobDetails(job)}>
                      <i className="bi bi-eye"></i> View
                    </button>
                    <button className="btn btn-sm btn-outline-primary me-1" onClick={() => handleUpdate(job)}>
                      <i className="bi bi-pencil"></i> Edit
                    </button>
                    <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(job._id)}>
                      <i className="bi bi-trash"></i> Cancelled
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
           {error && (
        <div className="text-danger text-center my-5">
          Failed to load projects. Please try again later.
        </div>
      )}
        </div>
      </div>

      {/* ✅ Job Assignment Modal */}
         <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
           <Modal.Header closeButton>
             <Modal.Title>Assign Job</Modal.Title>
           </Modal.Header>
           <Modal.Body>
             <Form>
               <Form.Group className="mb-3">
                 <Form.Label>Select Designer</Form.Label>
                 <Form.Select
                   value={selectedDesigner}
                   onChange={(e) => {
                     setSelectedDesigner(e.target.value);
                     setSelectedEmployee(""); 
                   }}
                 >
                   <option value="">-- Select --</option>
                   <option value="Production">Production</option>
                   <option value="Designer">Designer</option>
                 </Form.Select>
               </Form.Group>
   
               <Form.Group className="mb-3">
                 <Form.Label>Select Employee</Form.Label>
                 <Form.Select
                   value={selectedEmployee}
                   onChange={(e) => setSelectedEmployee(e.target.value)}
                   disabled={!selectedDesigner}
                 >
                   <option value="">-- Select Employee --</option>
                   {paginatedAssignment.map((emp) => (
                     <option key={emp._id} value={emp._id}>
                       {emp.firstName || 'Unnamed Employee'}_
                         {emp.lastName || 'Unnamed Employee'}
                     </option>
   
                   ))}
                 </Form.Select>
               </Form.Group>
   
               <Form.Group className="mb-3">
                 <Form.Label>Description</Form.Label>
                 <Form.Control
                   as="textarea"
                   rows={3}
                   value={assignmentDescription}
                   onChange={(e) => setAssignmentDescription(e.target.value)}
                   placeholder="Enter assignment details or instructions..."
                 />
               </Form.Group>
             </Form>
           </Modal.Body>
           <Modal.Footer>
             <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
               Cancel
             </Button>
             <Button variant="primary" onClick={handleSubmitAssignment}>
               Assign
             </Button>
           </Modal.Footer>
         </Modal>
   


      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredProjects.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
              <span aria-hidden="true">&laquo;</span>
                
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
               
                    <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default ProjectJobsTab;



































import React, { useState, useEffect } from 'react';
import { FaSearch, FaCalendarAlt, FaPencilAlt, FaTrashAlt, FaPlus, FaFilter } from 'react-icons/fa';
import { Link, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { deleteTimeLogs, fetchTimeLogss, updateExtraHours } from '../../../redux/slices/TimeLogsSlice';
import { Button, Form, Modal } from "react-bootstrap";
import Swal from 'sweetalert2';

function TimeLogs() {
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingLog, setEditingLog] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedProject, setSelectedProject] = useState('All Projects');
  const [selectedLogId, setSelectedLogId] = useState(null);

  const dispatch = useDispatch();
  const navigate = useNavigate()

  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState('');
  const [assignmentDescription, setAssignmentDescription] = useState('');
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState('');
  const [extraHours, setExtraHours] = useState('');

  // New state for toggling filters on small screens
  const [showFilters, setShowFilters] = useState(false);

  useEffect(() => {
    dispatch(fetchTimeLogss());
  }, [dispatch]);

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };
  const handleSubmitAssignment = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);

    if (selectedJobIds.length === 0) {
      setErrorMessage("Please select at least 1 job to assign.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }

    if (!extraHours) {
      setErrorMessage("Please enter extra hours.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }

    const payload = {
      id: selectedJobIds,
      extraHours: extraHours,
    };

    console.log("Dispatching payload:", payload);

    dispatch(updateExtraHours(payload))
      .unwrap()
      .then(() => {
        setSelectedJobs({});
        dispatch(fetchTimeLogss());
        setShowAssignModal(false);
        setExtraHours('');
      })
      .catch((error) => {
        setErrorMessage(`Failed to update: ${error}`);
        setTimeout(() => setErrorMessage(""), 3000);
      });
  };

  //  all client
  const { timelogs, error, loading } = useSelector((state) => state.TimeLogss);
  console.log(timelogs.TimeLogss);

  useEffect(() => {
    dispatch(fetchTimeLogss());
  }, [dispatch]);

  const itemsPerPage = 7;
  const totalPages = Math.ceil((timelogs.TimeLogss?.length || 0) / itemsPerPage);
  const paginatedTimeLogss = timelogs.TimeLogss?.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleEdit = (log) => {
    navigate(`/admin/AddTimelog`, { state: { log } });
  };

  const handleDelete = (_id) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteTimeLogs(_id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchTimeLogss());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }

  function formatTimeTo12Hour(time24) {
    if (!time24) return '';

    const [hourStr, minuteStr] = time24.split(':');
    let hour = parseInt(hourStr, 10);
    const minute = minuteStr ? minuteStr.padStart(2, '0') : '00';

    const ampm = hour >= 12 ? 'PM' : 'AM';
    hour = hour % 12;
    if (hour === 0) hour = 12;

    return `${hour}:${minute} ${ampm}`;
  }

  function timeStringToDecimalHours(time24) {
    if (!time24) return 0;
    const [hourStr, minuteStr] = time24.split(':');
    const hour = parseInt(hourStr, 10);
    const minute = parseInt(minuteStr || '0', 10);
    return hour + minute / 60;
  }
  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <h3 className="mb-0">Time Logs</h3>
        <div className="d-flex gap-3 mt-4 flex-wrap align-items-center">
          <Link className="text-decoration-none">
            <Button
              className="btn d-flex align-items-center gap-2"
              size="sm"
              id='All_btn'
              variant="dark"
              onClick={() => {
                const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);

                if (selectedJobIds.length === 0) {
                  setErrorMessage("Please select at least 1 List to assign.");
                  setTimeout(() => setErrorMessage(""), 3000);
                } else {
                  const dataToSend = {
                    id: selectedJobIds,
                    extraHours: extraHours || "0:00",
                  };

                  console.log("Payload to send:", dataToSend);

                  setShowAssignModal(true);
                }
              }}
            >
              <FaPlus /> ExtraTime
            </Button>
          </Link>
            <Link to={"/admin/AddTimesheetWorklog"} className="text-decoration-none">
            <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
              <FaPlus /> Add Time Log
            </button>
          </Link>
          {/* <Link to={"/admin/AddTimelog"} className="text-decoration-none">
            <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
              <FaPlus /> Add Time Log
            </button>
          </Link> */}
           <Button
            className="d-md-none d-flex align-items-center gap-2 mb-2"
            size="sm"
            variant="secondary"
            onClick={() => setShowFilters(!showFilters)}
          >
            <FaFilter /> Filters
          </Button>
        </div>
      </div>

      {errorMessage && <div className="alert alert-danger">{errorMessage}</div>}

      {/* Filters Section */}
      <div
        className={`row g-3 mb-4 
          ${showFilters ? 'd-block' : 'd-none d-md-flex'}
        `}
      >
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaSearch className="text-muted" />
            </span>
            <input
              type="text"
              className="form-control border-start-0"
              placeholder="Search time logs..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaCalendarAlt className="text-muted" />
            </span>
            <input
              type="date"
              className="form-control border-start-0"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <select
            className="form-select"
            value={selectedProject}
            onChange={(e) => setSelectedProject(e.target.value)}
          >
            <option>All Projects</option>
            <option>Holiday Package Design</option>
            <option>Product Catalog</option>
            <option>Brand Guidelines</option>
          </select>
        </div>
      </div>

      <div className="card shadow-sm">
        <div className="card-body p-0">
          <div className="table-responsive">
            <table className="table table-hover mb-0">
              <thead className="bg-light">
                <tr>
                  <th>
                    <input
                      type="checkbox"
                      onChange={(e) => {
                        const checked = e.target.checked;
                        const newSelected = {};
                        paginatedTimeLogss?.forEach((log) => {
                          if (log._id) newSelected[log._id] = checked;
                        });
                        setSelectedJobs(newSelected);
                      }}
                      checked={
                        paginatedTimeLogss?.length > 0 &&
                        paginatedTimeLogss?.every((log) => selectedJobs[log._id])
                      }
                    />
                  </th>
                  <th>Date</th>
                  <th>JobID</th>
                  <th>Project</th>
                  <th style={{ whiteSpace: 'nowrap' }}>Extra Hours</th>
                  <th>Hours</th>
                  <th>Task Notes</th>
                  <th className="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                {paginatedTimeLogss?.map((log, index) => {
                  const extraHoursDecimal = timeStringToDecimalHours(log.extraHours);
                  const hoursDecimal = timeStringToDecimalHours(log.hours);

                  const isHoursDiscrepant = hoursDecimal > 8;
                  const isExtraHoursDiscrepant = extraHoursDecimal < 8;
                  return (
                    <tr key={index}>
                      <td>
                        <input
                          type="checkbox"
                          checked={selectedJobs[log._id] || false}
                          onChange={() => handleCheckboxChange(log._id)}
                        />
                      </td>

                      <td>{new Date(log.date).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>

                      <td className="no-border-bottom">
                        #JOB{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                      </td>
                      <td style={{ whiteSpace: 'nowrap' }} key={index}>
                        {log.projectId?.[0]?.projectName || 'No Project Name'}
                      </td>
                      <td>
                        {(!log.extraHours || log.extraHours === '0' || log.extraHours === '0:00') ? '-' : formatTimeTo12Hour(log.extraHours)}
                      </td>

                      <td
                        style={{
                          color: isHoursDiscrepant ? 'red' : 'inherit',
                          fontWeight: isHoursDiscrepant ? 'bold' : 'normal',
                          whiteSpace: 'nowrap',
                        }}
                      >
                        {formatTimeTo12Hour(log.hours)}
                      </td>

                      <td style={{ whiteSpace: 'nowrap' }}>{log.taskNotes}</td>

                      <td className="text-end" style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                        <button
                          className="btn btn-link text-dark p-0 me-3"
                          onClick={() => handleEdit(log)}
                        >
                          <FaPencilAlt />
                        </button>
                        {/* <button
                          className="btn btn-link text-danger p-0"
                          onClick={() => handleDelete(log._id)}
                        >
                          <FaTrashAlt />
                        </button> */}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing 1 to {paginatedTimeLogss?.length || 0} of {timelogs.TimeLogss?.length || 0} entries
          </div>

          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}

      {/* Assign Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Extra Hours</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Extra Hours</Form.Label>
              <Form.Control
                type="time"
                value={extraHours}
                onChange={(e) => setExtraHours(e.target.value)}
                placeholder="Enter extra hours"
                step="60" // step in seconds — 60 = 1 min steps
              />
            </Form.Group>

          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button id='All_btn' onClick={handleSubmitAssignment}>
            Save Time Log
          </Button>
        </Modal.Footer>
      </Modal>

    </div>
  );
}

export default TimeLogs;









import React, { useState, useEffect } from 'react';
import { FaSearch, FaCalendarAlt, FaPencilAlt, FaTrashAlt, FaPlus, FaFilter } from 'react-icons/fa';
import { Link, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { deleteTimeLogs, fetchTimeLogss, updateExtraHours } from '../../../redux/slices/TimeLogsSlice';
import { Button, Form, Modal } from "react-bootstrap";
import Swal from 'sweetalert2';
import { fetchTimesheetWorklogs } from '../../../redux/slices/TimesheetWorklogSlice';

function TimeLogs() {
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingLog, setEditingLog] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedProject, setSelectedProject] = useState('All Projects');
  const [selectedLogId, setSelectedLogId] = useState(null);

  const dispatch = useDispatch();
  const navigate = useNavigate()

  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState('');
  const [assignmentDescription, setAssignmentDescription] = useState('');
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState('');
  const [extraHours, setExtraHours] = useState('');

  // New state for toggling filters on small screens
  const [showFilters, setShowFilters] = useState(false);

  useEffect(() => {
    dispatch(fetchTimeLogss());
  }, [dispatch]);

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };
  const handleSubmitAssignment = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);

    if (selectedJobIds.length === 0) {
      setErrorMessage("Please select at least 1 job to assign.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }

    if (!extraHours) {
      setErrorMessage("Please enter extra hours.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }

    const payload = {
      id: selectedJobIds,
      extraHours: extraHours,
    };

    console.log("Dispatching payload:", payload);

    dispatch(updateExtraHours(payload))
      .unwrap()
      .then(() => {
        setSelectedJobs({});
        dispatch(fetchTimeLogss());
        setShowAssignModal(false);
        setExtraHours('');
      })
      .catch((error) => {
        setErrorMessage(`Failed to update: ${error}`);
        setTimeout(() => setErrorMessage(""), 3000);
      });
  };

  //  all client
  // const { timelogs, error, loading } = useSelector((state) => state.TimeLogss);
  // console.log(timelogs.TimeLogss);

  // useEffect(() => {
  //   dispatch(fetchTimeLogss());
  // }, [dispatch]);

   const { timesheetWorklog, loading, error } = useSelector((state) => state.TimesheetWorklogs);
   console.log(timesheetWorklog);
  
    useEffect(() => {
      dispatch(fetchTimesheetWorklogs());
    }, [dispatch]);

    

  const itemsPerPage = 7;
  const totalPages = Math.ceil((timesheetWorklog.TimeLogss?.length || 0) / itemsPerPage);
  const paginatedTimeLogss = timelogs.TimeLogss?.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleEdit = (log) => {
    navigate(`/admin/AddTimelog`, { state: { log } });
  };

  const handleDelete = (_id) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteTimeLogs(_id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchTimeLogss());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }

  function formatTimeTo12Hour(time24) {
    if (!time24) return '';

    const [hourStr, minuteStr] = time24.split(':');
    let hour = parseInt(hourStr, 10);
    const minute = minuteStr ? minuteStr.padStart(2, '0') : '00';

    const ampm = hour >= 12 ? 'PM' : 'AM';
    hour = hour % 12;
    if (hour === 0) hour = 12;

    return `${hour}:${minute} ${ampm}`;
  }

  function timeStringToDecimalHours(time24) {
    if (!time24) return 0;
    const [hourStr, minuteStr] = time24.split(':');
    const hour = parseInt(hourStr, 10);
    const minute = parseInt(minuteStr || '0', 10);
    return hour + minute / 60;
  }
  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <h3 className="mb-0">Time Logs</h3>
        <div className="d-flex gap-3 mt-4 flex-wrap align-items-center">
          <Link className="text-decoration-none">
            {/* <Button
              className="btn d-flex align-items-center gap-2"
              size="sm"
              id='All_btn'
              variant="dark"
              onClick={() => {
                const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);

                if (selectedJobIds.length === 0) {
                  setErrorMessage("Please select at least 1 List to assign.");
                  setTimeout(() => setErrorMessage(""), 3000);
                } else {
                  const dataToSend = {
                    id: selectedJobIds,
                    extraHours: extraHours || "0:00",
                  };

                  console.log("Payload to send:", dataToSend);

                  setShowAssignModal(true);
                }
              }}
            >
              <FaPlus /> ExtraTime
            </Button> */}
          </Link>
            <Link to={"/admin/AddTimesheetWorklog"} className="text-decoration-none">
            <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
              <FaPlus /> Add Time Log
            </button>
          </Link>
          {/* <Link to={"/admin/AddTimelog"} className="text-decoration-none">
            <button id='All_btn' className="btn btn-dark d-flex align-items-center gap-2">
              <FaPlus /> Add Time Log
            </button>
          </Link> */}
           <Button
            className="d-md-none d-flex align-items-center gap-2 mb-2"
            size="sm"
            variant="secondary"
            onClick={() => setShowFilters(!showFilters)}
          >
            <FaFilter /> Filters
          </Button>
        </div>
      </div>

      {errorMessage && <div className="alert alert-danger">{errorMessage}</div>}

      {/* Filters Section */}
      <div
        className={`row g-3 mb-4 
          ${showFilters ? 'd-block' : 'd-none d-md-flex'}
        `}
      >
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaSearch className="text-muted" />
            </span>
            <input
              type="text"
              className="form-control border-start-0"
              placeholder="Search time logs..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaCalendarAlt className="text-muted" />
            </span>
            <input
              type="date"
              className="form-control border-start-0"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <select
            className="form-select"
            value={selectedProject}
            onChange={(e) => setSelectedProject(e.target.value)}
          >
            <option>All Projects</option>
            <option>Holiday Package Design</option>
            <option>Product Catalog</option>
            <option>Brand Guidelines</option>
          </select>
        </div>
      </div>

      <div className="card shadow-sm">
        <div className="card-body p-0">
          <div className="table-responsive">
            <table className="table table-hover mb-0">
              <thead className="bg-light">
                <tr>
                  <th>
                    {/* <input
                      type="checkbox"
                      onChange={(e) => {
                        const checked = e.target.checked;
                        const newSelected = {};
                        paginatedTimeLogss?.forEach((log) => {
                          if (log._id) newSelected[log._id] = checked;
                        });
                        setSelectedJobs(newSelected);
                      }}
                      checked={
                        paginatedTimeLogss?.length > 0 &&
                        paginatedTimeLogss?.every((log) => selectedJobs[log._id])
                      }
                    /> */}
                  </th>    
                  <th>JobID</th>
                  <th>Project Name</th>
                  <th>Employee Name</th>
                  <th>Date</th>
                  <th>Hours</th>
                  <th>Task Notes</th>
                  <th className="text-end">Actions</th>
                </tr>
              </thead>
              <tbody>
                {paginatedTimeLogss?.map((log, index) => {
                  const extraHoursDecimal = timeStringToDecimalHours(log.extraHours);
                  const hoursDecimal = timeStringToDecimalHours(log.hours);

                  const isHoursDiscrepant = hoursDecimal > 8;
                  const isExtraHoursDiscrepant = extraHoursDecimal < 8;
                  return (
                    <tr key={index}>
                      <td>
                        <input
                          type="checkbox"
                          checked={selectedJobs[log._id] || false}
                          onChange={() => handleCheckboxChange(log._id)}
                        />
                      </td>

                      <td>{new Date(log.date).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>

                      <td className="no-border-bottom">
                        #JOB{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                      </td>
                      <td style={{ whiteSpace: 'nowrap' }} key={index}>
                        {log.projectId?.[0]?.projectName || 'No Project Name'}
                      </td>
                      <td>
                        {(!log.extraHours || log.extraHours === '0' || log.extraHours === '0:00') ? '-' : formatTimeTo12Hour(log.extraHours)}
                      </td>

                      <td
                        style={{
                          color: isHoursDiscrepant ? 'red' : 'inherit',
                          fontWeight: isHoursDiscrepant ? 'bold' : 'normal',
                          whiteSpace: 'nowrap',
                        }}
                      >
                        {formatTimeTo12Hour(log.hours)}
                      </td>

                      <td style={{ whiteSpace: 'nowrap' }}>{log.taskNotes}</td>

                      <td className="text-end" style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                        <button
                          className="btn btn-link text-dark p-0 me-3"
                          onClick={() => handleEdit(log)}
                        >
                          <FaPencilAlt />
                        </button>
                        {/* <button
                          className="btn btn-link text-danger p-0"
                          onClick={() => handleDelete(log._id)}
                        >
                          <FaTrashAlt />
                        </button> */}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            {/* Showing 1 to {paginatedTimeLogss?.length || 0} of {timelogs.TimeLogss?.length || 0} entries */}
          </div>

          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}

      {/* Assign Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Extra Hours</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Extra Hours</Form.Label>
              <Form.Control
                type="time"
                value={extraHours}
                onChange={(e) => setExtraHours(e.target.value)}
                placeholder="Enter extra hours"
                step="60" // step in seconds — 60 = 1 min steps
              />
            </Form.Group>

          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button id='All_btn' onClick={handleSubmitAssignment}>
            Save Time Log
          </Button>
        </Modal.Footer>
      </Modal>

    </div>
  );
}

export default TimeLogs;















































import React, { useState, useEffect } from "react";
import { Container, Row, Col, Button, Form, Table, Pagination, Badge, Modal, Dropdown } from "react-bootstrap";
import { Link, useNavigate } from "react-router-dom";
import { FaFilePdf, FaUpload, FaLink, FaClock, FaEdit, FaFilter } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { fetchjobs } from "../../../redux/slices/JobsSlice";

function MyJobs() {
  const [expandedJob, setExpandedJob] = useState(null);
  const [showTimesheetModal, setShowTimesheetModal] = useState(false);
  const [selectedJobId, setSelectedJobId] = useState(null);
  const [showBriefModal, setShowBriefModal] = useState(false);
  const [selectedBrief, setSelectedBrief] = useState("");
  const [showFilters, setShowFilters] = useState(false);

  // Local data for testing
  const localData = [
    {
      _id: "1",
      jobId: { JobNo: "101" },
      projectId: [{ projectName: "Project A" }],
      employeeId: { firstName: "John", lastName: "Doe" },
      brandName: "Brand X",
      subBrand: "Sub X",
      flavour: "Vanilla",
      packType: "Box",
      packSize: "500g",
      priority: "High",
      Status: "Pending",
    },
    {
      _id: "2",
      jobId: { JobNo: "102" },
      projectId: [{ projectName: "Project B" }],
      employeeId: { firstName: "Jane", lastName: "Smith" },
      brandName: "Brand Y",
      subBrand: "Sub Y",
      flavour: "Chocolate",
      packType: "Bag",
      packSize: "1kg",
      priority: "Medium",
      Status: "Completed",
    },
    {
      _id: "3",
      jobId: { JobNo: "103" },
      projectId: [{ projectName: "Project C" }],
      employeeId: { firstName: "Alex", lastName: "Johnson" },
      brandName: "Brand Z",
      subBrand: "Sub Z",
      flavour: "Strawberry",
      packType: "Can",
      packSize: "250g",
      priority: "Low",
      Status: "In Progress",
      // Adding Additional Data for Job 103
      additionalDetails: "Additional details for Job 103: This is an ongoing project, currently in progress. Alex Johnson is the employee responsible for this task.",
    },
  ];

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Pagination logic
  const totalPages = Math.ceil(localData.length / itemsPerPage);
  const paginatedProjects = localData.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  // Handle row click to expand/collapse details
  const handleRowClick = (jobId) => {
    if (expandedJob === jobId) {
      setExpandedJob(null); // Collapse if the same job is clicked again
    } else {
      setExpandedJob(jobId); // Expand the clicked job
    }
  };

  return (
    <div className="p-4 m-2" style={{ backgroundColor: "white", borderRadius: "10px" }}>
      <h5 className="fw-bold mb-3 text-start">My Jobs</h5>

      {/* Filters and Actions */}
      <Row className={`mb-3 align-items-center ${showFilters ? "" : "d-none d-lg-flex"}`}>
        <Col xs={12} lg={9} className="d-flex flex-wrap gap-2 mb-2 mb-lg-0">
          <Form.Control type="text" placeholder="Search jobs..." className="flex-grow-1" />
          <Form.Select className="flex-shrink-0">
            <option>All Status</option>
          </Form.Select>
          <Form.Select className="flex-shrink-0">
            <option>All Deadlines</option>
          </Form.Select>
        </Col>

        <Col xs={12} lg={3} className="text-lg-end d-flex flex-wrap justify-content-lg-end gap-2">
          <Button variant="dark" onClick={() => alert('Return Job')}>Return Job</Button>
        </Col>
      </Row>

      {/* Table */}
      <div className="table-responsive">
        <Table hover className="align-middle sticky-header">
          <thead className="bg-light">
            <tr>
              <th>JobNo</th>
              <th>ProjectName</th>
              <th>EmployeeName</th>
              <th>Brand</th>
              <th>SubBrand</th>
              <th>Flavour</th>
              <th>PackType</th>
              <th>PackSize</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody style={{zIndex:"auto"}}>
            {paginatedProjects.map((job) => (
              <React.Fragment key={job._id}>
                <tr onClick={() => handleRowClick(job._id)} style={{ cursor: "pointer" }}>
                  <td>{job.jobId?.JobNo}</td>
                  <td>{job.projectId?.[0]?.projectName}</td>
                  <td>{`${job.employeeId.firstName} ${job.employeeId.lastName}`}</td>
                  <td>{job.brandName}</td>
                  <td>{job.subBrand}</td>
                  <td>{job.flavour}</td>
                  <td>{job.packType}</td>
                  <td>{job.packSize}</td>
                  <td>{job.priority}</td>
                  <td>{job.Status}</td>
                  <td>
                    <Dropdown align="end">
                      <Dropdown.Toggle variant="dark" size="sm" id="dropdown-custom-components">
                        Actions
                      </Dropdown.Toggle>
                      <Dropdown.Menu>
                        <Dropdown.Item eventKey="1">Edit</Dropdown.Item>
                        <Dropdown.Item eventKey="2">Delete</Dropdown.Item>
                        <Dropdown.Item eventKey="3">View Details</Dropdown.Item>
                      </Dropdown.Menu>
                    </Dropdown>
                  </td>
                </tr>

                {/* Additional Details (Collapsible) */}
                {expandedJob === job._id && (
                  <tr >
                    <td className="highlighted-row" colSpan="11">
                      <div>Additional Details for {job.jobId?.JobNo}: {job.additionalDetails}</div>
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Pagination */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="text-muted small">
          Showing {((currentPage - 1) * itemsPerPage) + 1} of {localData.length}
        </div>
        <ul className="pagination pagination-sm mb-0">
          <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
            <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
              &laquo;
            </button>
          </li>
          {Array.from({ length: totalPages }, (_, i) => (
            <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage(i + 1)}>{i + 1}</button>
            </li>
          ))}
          <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
            <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
              &raquo;
            </button>
          </li>
        </ul>
      </div>
    </div>
  );
}

export default MyJobs;
























import React, { useEffect, useState, useRef } from "react";
import { Container, Row, Col, Button, Form, Table, Pagination, Badge, Modal } from "react-bootstrap";
import { Link, useNavigate } from "react-router-dom";
import * as XLSX from 'xlsx';
import { useDispatch, useSelector } from "react-redux";
import { fetchjobs } from "../../../redux/slices/JobsSlice";
import {
  FaFilePdf,
  FaUpload,
  FaLink,
  FaClock,
  FaEdit,
  FaFilter,
} from "react-icons/fa";
import { fetchAssign } from "../../../redux/slices/AssignSlice";

function MyJobs() {
  const [showTimesheetModal, setShowTimesheetModal] = useState(false);
  const [selectedJobId, setSelectedJobId] = useState(null);
  const [showBriefModal, setShowBriefModal] = useState(false);
  const [selectedBrief, setSelectedBrief] = useState("");
  const [showFilters, setShowFilters] = useState(false); // 👈 For responsive toggle
  const [expandedJob, setExpandedJob] = useState(null); // Tracking the expanded job

  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleReturnJob = () => {
    const hasTimesheet = false;
    if (!hasTimesheet) {
      alert('This jobs is send to the production');
      return;
    }
  };

  const handleUpload = (jobId) => {
    console.log('Upload for job:', jobId);
  };

  const handleLogTime = (jobId) => {
    setSelectedJobId(jobId);
    setShowTimesheetModal(true);
  };

  const fileInputRef = useRef(null);

  const handleUploadClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      console.log("Selected file:", file);
    }
  };

  const handleSelectAll = (e) => {
    const isChecked = e.target.checked;
    const allJobs = jobs.reduce((acc, job) => {
      acc[job.id] = isChecked;
      return acc;
    }, {});
    setSelectedJobs(allJobs);
  };

  const getPriorityClass = (priority) => {
    switch ((priority || "").toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };

  const getStatusClass = (status) => {
    switch ((status || "").toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "completed":
        return "bg-success text-white";
      case "open":
        return "bg-primary text-white";
      default:
        return "bg-light text-dark";
      case "cancelled":
        return "bg-dark text-white";
    }
  };

  const { job, loading, error } = useSelector((state) => state.jobs);

  useEffect(() => {
    dispatch(fetchjobs());
  }, [dispatch]);

  const { assigns } = useSelector((state) => state.Assign);
  console.log("fvrfjk", assigns.assignments);

  useEffect(() => {
    dispatch(fetchAssign());
  }, [dispatch]);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredProjects = assigns?.assignments || [];
  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handleCopyFileName = (job, index, currentPage, itemsPerPage) => {
    const displayId = String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0');
    const fileName = `${displayId}_${job.projectName || ''}__${job.brandName || ''}_${job.subBrand || ''}_${job.flavour || ''}_${job.packType || ''}_${job.packSize || ''}_${job.packCode || ''}_${job.priority || ''}_${job.dueDate || ''}_${job.assign || ''}_${job.timeLogged || ''}_${job.status || ''}`;

    navigator.clipboard.writeText(fileName)
      .then(() => alert("Copied to clipboard: " + fileName))
      .catch((err) => console.error("Failed to copy!", err));
  };

  const handleRowClick = (jobId) => {
    if (expandedJob === jobId) {
      setExpandedJob(null);
    } else {
      setExpandedJob(jobId);
    }
  };

  return (
    <div className="p-4 m-2" style={{ backgroundColor: "white", borderRadius: "10px" }}>
      <h5 className="fw-bold mb-3 text-start">My Jobs</h5>

      {/* Toggle Filter Button for Mobile */}
      <div className="d-lg-none mb-2 text-end">
        <Button
          variant="primary"
          size="sm"
          className="fw-bold shadow-sm"
          onClick={() => setShowFilters(!showFilters)}
        >
          <FaFilter className="me-1" />
          Filter
        </Button>
      </div>

      {/* Filters and Actions */}
      <Row className={`mb-3 align-items-center ${showFilters ? "" : "d-none d-lg-flex"}`}>
        <Col xs={12} lg={9} className="d-flex flex-wrap gap-2 mb-2 mb-lg-0">
          <Form.Control
            type="text"
            placeholder="Search jobs..."
            className="flex-grow-1"
            style={{ minWidth: "150px", maxWidth: "200px" }}
          />
          <Form.Select className="flex-shrink-0" style={{ minWidth: "140px", maxWidth: "160px" }}>
            <option>All Status</option>
          </Form.Select>
          <Form.Select className="flex-shrink-0" style={{ minWidth: "140px", maxWidth: "160px" }}>
            <option>All Deadlines</option>
          </Form.Select>
        </Col>

        <Col xs={12} lg={3} className="text-lg-end d-flex flex-wrap justify-content-lg-end gap-2">
          <Button id="All_btn" variant="dark" className="w-lg-auto" onClick={handleReturnJob}>
            Return Job
          </Button>
        </Col>
      </Row>

      {/* Table */}
      <div className="table-responsive">
        <Table hover className="align-middle sticky-header">
          <thead className="bg-light">
            <tr>
              <th><input type="checkbox" onChange={handleSelectAll} /></th>
              <th>JobNo</th>
              <th>ProjectName</th>
              <th>EmployeeName</th>
              <th>Brand</th>
              <th>SubBrand</th>
              <th>Flavour</th>
              <th>PackType</th>
              <th>PackSize</th>
              <th>PackCode</th>
              <th>Priority</th>
              <th>Due Date</th>
              <th>Assign</th>
              <th>TimeLogged</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedProjects.slice().reverse().map((job, index) => (
              <React.Fragment key={job._id}>
                <tr onClick={() => handleRowClick(job._id)} style={{ cursor: "pointer" }}>
                  <td><input type="checkbox" onChange={handleSelectAll} /></td>
                  <td> {job.jobId.JobNo}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                  <td style={{ whiteSpace: 'nowrap' }} key={index}>
                    {job.employeeId
                      ? `${job.employeeId.firstName} ${job.employeeId.lastName}`
                      : 'No Employee'}
                  </td>
                  <td>{job.brandName}</td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                  <td>{job.flavour}</td>
                  <td>{job.packType}</td>
                  <td>{job.packSize}</td>
                  <td>{job.packCode}</td>
                  <td><span className={getPriorityClass(job.priority)}>{job.priority}</span></td>
                  <td>{new Date(job.createdAt).toLocaleDateString("en-GB")}</td>
                  <td>{job.assign}</td>
                  <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                  <td>
                    <span className={`badge ${getStatusClass(job.Status)} px-2 py-1`}>
                      {job.Status}
                    </span>
                  </td>
                  <td className="d-flex gap-2">
                    <input
                      type="file"
                      ref={fileInputRef}
                      style={{ display: 'none' }}
                      onChange={handleFileChange}
                    />
                    <Button
                      size="sm"
                      variant="dark"
                      className="me-2 d-flex"
                      onClick={handleUploadClick}
                      id="All_btn"
                    >
                      <FaUpload className="me-1" />
                      Upload
                    </Button>
                    <Link to={"/admin/MyJobsHolidayPackageDesign"}>
                      <Button id="All_btn" size="sm" variant="dark" onClick={() => handleLogTime(job.id)}>
                        LogTime
                      </Button>
                    </Link>
                    <Button
                      id="All_btn"
                      size="sm"
                      variant="dark"
                      onClick={() => handleCopyFileName(job, index, currentPage, itemsPerPage)}
                    >
                      CopyFN
                    </Button>
                  </td>
                </tr>
                {expandedJob === job._id && (
                  <td>
                      <td>Additional Details for {job.jobId?.JobNo}: {job.additionalDetails}</td>
                  </td>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Pagination */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing{(currentPage - 1) * itemsPerPage + 1} of {filteredProjects.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default MyJobs;







































import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import { apiUrl } from "../../utils/config";

export const  loginUser = createAsyncThunk(
    'auth/login',
    async (credentials, { rejectWithValue }) => {
        try {
            const response = await axios.post(${apiUrl}/login, credentials, {
            headers: {
                'Content-Type': 'application/json',
            },
            });
            if (response.status !== 200) {
            return rejectWithValue(response.data.message || 'Login failed');
            }
            console.log("login response ", response)

            localStorage.setItem('token', response.data.token);
            localStorage.setItem('user', JSON.stringify(response.data.data.user));
            // localStorage.setItem('user', JSON.stringify(response.data.data.user?.id));
            localStorage.setItem('role', JSON.stringify(response.data.data.user?.role));
            localStorage.setItem('permissions', JSON.stringify(response.data.data.user?.permissions));
            
           
           
            return response.data;  
        } catch (err) {
            return rejectWithValue(err.response?.data?.message || 'Login failed');
        }
    })



    const initialState= {
        user: JSON.parse(localStorage.getItem('user')) || null,
        token: localStorage.getItem('token') || null,
        role: localStorage.getItem('role') || null,
        permissions: JSON.parse(localStorage.getItem('permissions')) || null,
        loading: false,
        error: null,
    }


    const authSlice = createSlice({
        name: 'auth',
        initialState,
        reducers: {
            logout: (state) => {
                localStorage.removeItem('user');
                localStorage.removeItem('token');
                localStorage.removeItem('role');
                localStorage.removeItem('permissions');
                state.user = null;
                state.token = null;
                state.role = null;
                state.permissions = null;
            },
            clearMessages: (state) => {
                state.error = null;
            },
        },
        extraReducers: (builder) => {
            builder
                .addCase(loginUser.pending, (state) => {
                    state.loading = true;
                })
                .addCase(loginUser.fulfilled, (state, action) => {
                    state.loading = false;
                    state.user = action.payload.user;
                    state.token = action.payload.token;
                    state.role = action.payload.role; 
                    state.permissions = action.payload.permissions; response
                    state.error = null;
                })
                .addCase(loginUser.rejected, (state, action) => {
                    state.loading = false;
                    state.error = action.payload;
                });
        },



    })


    export const { logout, clearMessages } = authSlice.actions;
    export default authSlice.reducer;









import React, { useEffect, useState } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { decryptToken } from './decode';

const ProtectedRoute = ({ children }) => {
     const pathname = useLocation()
     console.log(pathname);
     
    const [isAuthenticated, setIsAuthenticated] = useState(null);


    useEffect(() => {
        const checkAuth = async () => {
            // Retrieve the encrypted token and IV from localStorage
            const myToken = localStorage.getItem('encode');
            const iv = localStorage.getItem('iv'); // Assuming you have stored the IV in localStorage

            if (myToken && iv) {
                // Decrypt the token using the token and IV
                const decryptTokens = await decryptToken(myToken, iv);
                console.log(JSON.parse(decryptTokens))
                if (JSON.parse(decryptTokens) && JSON.parse(decryptTokens).startsWith("ey")) {
                    setIsAuthenticated(true);  // Token is valid
                    console.log("isAuthenticated",isAuthenticated)
                } else {
                    setIsAuthenticated(false); // Invalid token
                }
            } else {
                setIsAuthenticated(false);  // No token or IV found
            }
        };

        checkAuth();
    }, []);  // This effect runs only once, when the component is mounted

    if (isAuthenticated === null) {
        // Optionally, you can return a loading spinner or message until the check is done
        return <div>Loading...</div>;
    }

    return isAuthenticated ? children : <Navigate to="/" />;
};

export default ProtectedRoute;








// ///////////////////////////Doenlod PDF code 


  // PDF Downlod CostEstimates
// ... existing code ...
// const handleDownloadPDF = (po) => {
//   if (!po) {
//     console.error("No data provided to handleDownloadPDF");
//     Swal.fire("Error", "No data available to generate PDF.", "error");
//     return;
//   }

//   const doc = new jsPDF('p', 'pt', 'a4');
//   const pageWidth = doc.internal.pageSize.width;
//   const pageHeight = doc.internal.pageSize.height;
//   const margin = 40;
//   let finalY = margin;

//   // --- START: Data from 'po' object (adjust as per your actual data structure) ---
//   const companyDetails = {
//     logoText: 'COMPANY LOGO',
//     addressDetails: 'COMPANY ADDRESS DETAILS',
//     name: 'Company name', // Right side header
//     trn: po.companyTRN || '100000000000002', // Company's TRN from image
//   };

//   const invoiceMeta = {
//     date: po.date || '22.03.2025', // From image
//     invoiceNo: po.invoiceNo || '5822', // From image
//   };

//   const clientDetails = {
//     name: po.clientName || 'Client Company Name',
//     address1: po.clientAddress1 || 'Client Address Line 1',
//     address2: po.clientAddress2 || 'Client Address Line 2, Country',
//     tel: po.clientTel || '00000000000',
//     contactPerson: po.clientContactPerson || 'Client Contact Person',
//     email: po.clientEmail || 'client.email@example.com',
//     trn: po.clientTRN || "Client's TRN No.", // From image
//   };

//   const projectInfo = {
//     costEstNo: po.costEstNo || 'CE No.', // From image
//     poNo: po.purchaseOrderNo || 'PO Number', // From image
//     projectNo: po.projectNo || 'Project No.', // From image
//   };

//   const bankDetails = {
//     accountName: po.bankAccountName || 'Company Name',
//     bankName: po.bankName || "Company's Bank Name",
//     iban: po.iban || 'XX000000000000000000001',
//     swiftCode: po.swiftCode || 'XXXAAACC',
//     terms: po.paymentTerms || 'Net 30',
//   };

//   const items = po.items && po.items.length > 0 ? po.items.map((item, index) => [(index + 1).toString() + '.', item.description, item.qty, item.rate, item.amount.toFixed(2)]) : [
//     ['1.', 'Print Samples', 6, 2, '12.00'], // Default item from image
//     // Add more default items if needed or ensure po.items is populated
//   ];

//   const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
//   // Assuming VAT is 0 for now as per the image, or calculate if needed
//   const vatRate = 0; // Example: 0.05 for 5% VAT. The image shows no VAT explicitly in totals section.
//   const vatAmount = subTotal * vatRate;
//   const grandTotal = subTotal + vatAmount;
//   // --- END: Data from 'po' object ---

//   // 1. Company Logo Block (Top Left)
//   doc.setFillColor(192, 0, 0); // Red color from image (approx.)
//   doc.rect(margin, finalY, 220, 60, 'F'); // x, y, width, height
//   doc.setTextColor(255, 255, 255);
//   doc.setFontSize(14);
//   doc.setFont('helvetica', 'bold');
//   doc.text(companyDetails.logoText, margin + 10, finalY + 25);
//   doc.setFontSize(8);
//   doc.setFont('helvetica', 'normal');
//   doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);

//   // 2. Company Name (Top Right, below logo vertically)
//   const companyNameBlockY = finalY; // Align with top of logo block
//   doc.setFillColor(192, 0, 0); // Red color
//   doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F'); // x, y, width, height
//   doc.setTextColor(255, 255, 255);
//   doc.setFontSize(12);
//   doc.setFont('helvetica', 'bold');
//   doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });

//   // 3. Tax Invoice Title (Right Aligned, below Company Name block)
//   finalY = companyNameBlockY + 30 + 20; // Space below company name block
//   doc.setTextColor(0, 0, 0);
//   doc.setFontSize(18);
//   doc.setFont('helvetica', 'bold');
//   doc.text('Tax Invoice', pageWidth - margin, finalY, { align: 'right' });

//   // 4. TRN, Date, Invoice No. Table (Below Tax Invoice Title)
//   finalY += 10; // Space below title
//   autoTable(doc, {
//     startY: finalY,
//     head: [['TRN:', 'Date', 'Invoice No.']],
//     body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
//     theme: 'grid',
//     styles: {
//       fontSize: 9,
//       cellPadding: 5,
//       lineWidth: 0.5,
//       lineColor: [0, 0, 0]
//     },
//     headStyles: {
//       fillColor: [255, 255, 255], // White background for head
//       textColor: [0, 0, 0],
//       fontStyle: 'bold',
//     },
//     columnStyles: {
//       0: { cellWidth: 150, halign: 'left' }, // TRN
//       1: { cellWidth: 80, halign: 'left' },  // Date
//       2: { cellWidth: 80, halign: 'left' },  // Invoice No.
//     },
//     margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) -10 }, // Align to right
//     tableWidth: 'wrap',
//   });
//   finalY = doc.lastAutoTable.finalY + 20;

//   // 5. Invoice To Section (Left Aligned)
//   const invoiceToBoxWidth = 250;
//   doc.setDrawColor(0,0,0);
//   doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S'); // Border for the box
  
//   doc.setFontSize(10);
//   doc.setFont('helvetica', 'bold');
//   doc.text('Invoice To', margin + 5, finalY + 15);
//   doc.setFontSize(9);
//   doc.setFont('helvetica', 'normal');
//   let textY = finalY + 30;
//   doc.text(clientDetails.name, margin + 5, textY);
//   textY += 12;
//   doc.text(clientDetails.address1, margin + 5, textY);
//   textY += 12;
//   doc.text(clientDetails.address2, margin + 5, textY);
//   textY += 12;
//   doc.text(`Tel: ${clientDetails.tel}`, margin + 5, textY);
//   textY += 12;
//   doc.text(`Contact: ${clientDetails.contactPerson}`, margin + 5, textY);
//   textY += 12;
//   doc.text(`Email: ${clientDetails.email}`, margin + 5, textY);
  
//   finalY += 100 + 10; // Height of the box + padding

//   // 6. TRN, Cost Est. No., P.O. No., Project Table (Full Width)
//   autoTable(doc, {
//     startY: finalY,
//     head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project']],
//     body: [
//       [clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]
//     ],
//     theme: 'grid',
//     styles: {
//       fontSize: 9,
//       cellPadding: 5,
//       lineWidth: 0.5,
//       lineColor: [0, 0, 0]
//     },
//     headStyles: {
//       fillColor: [220, 220, 220], // Light grey for head
//       textColor: [0, 0, 0],
//       fontStyle: 'bold',
//     },
//     // Adjust columnStyles for better fit if needed
//     margin: { left: margin, right: margin },
//   });
//   finalY = doc.lastAutoTable.finalY + 10;

//   // 7. Bank Details Table (Full Width)
//   autoTable(doc, {
//     startY: finalY,
//     head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
//     body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
//     theme: 'grid',
//     styles: {
//       fontSize: 9,
//       cellPadding: 5,
//       lineWidth: 0.5,
//       lineColor: [0, 0, 0]
//     },
//     headStyles: {
//       fillColor: [200, 200, 200], // Slightly darker grey for head
//       textColor: [0, 0, 0],
//       fontStyle: 'bold',
//     },
//     margin: { left: margin, right: margin },
//   });
//   finalY = doc.lastAutoTable.finalY + 10;

//   // 8. Items Table (Full Width)
//   autoTable(doc, {
//     startY: finalY,
//     head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
//     body: items,
//     theme: 'grid',
//     styles: {
//       fontSize: 9,
//       cellPadding: 5,
//       lineWidth: 0.5,
//       lineColor: [0, 0, 0]
//     },
//     headStyles: {
//       fillColor: [220, 220, 220], // Light grey for head
//       textColor: [0, 0, 0],
//       fontStyle: 'bold',
//     },
//     columnStyles: {
//       0: { cellWidth: 40, halign: 'center' },
//       1: { cellWidth: 'auto' }, // Description takes remaining space
//       2: { cellWidth: 40, halign: 'right' },
//       3: { cellWidth: 50, halign: 'right' },
//       4: { cellWidth: 70, halign: 'right' },
//     },
//     margin: { left: margin, right: margin },
//   });
//   finalY = doc.lastAutoTable.finalY;

//   // 9. Totals Section (Right Aligned, below items table)
//   // This part needs careful positioning if not using autoTable
//   // For simplicity, let's use autoTable with no headers and specific styling
//   const totalsData = [
//     // The image does not show Subtotal, VAT, etc. explicitly in this format.
//     // It only shows one line item in the example.
//     // If you need Subtotal, VAT, Grand Total, add them here.
//     // Example for just the total from the image's single line item:
//     // ['Total Amount (USD)', grandTotal.toFixed(2)] 
//   ];

//   // If you have multiple items and need to show Subtotal, VAT, Grand Total:
//   // totalsData.push(['Subtotal', subTotal.toFixed(2)]);
//   // if (vatAmount > 0) {
//   //   totalsData.push([`VAT (${(vatRate * 100).toFixed(0)}%)`, vatAmount.toFixed(2)]);
//   // }
//   // totalsData.push(['GRAND TOTAL (USD)', grandTotal.toFixed(2)]);
  
//   // Since the image only has one item and one 'Amount (USD)' column, 
//   // we might not need a separate totals box if the items table itself sums up.
//   // However, if you want a separate box like typical invoices:
//   if (items.length > 1 || vatAmount > 0) { // Show totals box if more than one item or VAT exists
//     finalY += 10; // Space before totals
//     autoTable(doc, {
//         startY: finalY,
//         body: totalsData,
//         theme: 'plain', // No lines
//         styles: {
//             fontSize: 9,
//             halign: 'right',
//         },
//         columnStyles: {
//             0: { halign: 'right', fontStyle: 'bold' },
//             1: { halign: 'right', fontStyle: 'bold' }
//         },
//         margin: { left: pageWidth - margin - 200 }, // Position to the right
//         tableWidth: 200, // Fixed width for the totals box
//     });
//     finalY = doc.lastAutoTable.finalY;
//   }

//   // Placeholder for 'Amount in Words' and 'Footer Signature'
//   // These would typically be at the bottom of the page.
//   // You might need to check if finalY + space_needed > pageHeight and add new page if so.

//   // Example: Amount in Words (if needed)
//   // finalY += 20;
//   // doc.setFontSize(9);
//   // doc.text(`Amount in Words: ${numberToWords(grandTotal)} USD Only.`, margin, finalY);

//   // Example: Footer Signature (if needed)
//   // finalY = pageHeight - margin - 50; // Position from bottom
//   // doc.text('For COMPANY NAME', margin, finalY);
//   // doc.text('Authorized Signature', margin, finalY + 30);

//   doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
// };


// ... existing code ...
// const handleDownloadPDF = (invoiceDataFromState) => {
//   if (!invoiceDataFromState) {
//     console.error("No data provided to handleDownloadPDF");
//     Swal.fire("Error", "No data available to generate PDF.", "error");
//     return;
//   }

//   const doc = new jsPDF('p', 'pt', 'a4');
//   const pageWidth = doc.internal.pageSize.width;
//   const pageHeight = doc.internal.pageSize.height;
//   const margin = 40;
//   let finalY = margin;

//   // --- START: Data from 'invoiceDataFromState' object ---
//   const companyDetails = {
//     logoText: invoiceDataFromState.companyLogoText || 'COMPANY LOGO',
//     addressDetails: invoiceDataFromState.companyAddressDetails || 'COMPANY ADDRESS DETAILS',
//     name: invoiceDataFromState.companyNameHeader || 'Company name',
//     trn: invoiceDataFromState.companyTRN || '100000000000002',
//   };

//   const invoiceMeta = {
//     date: invoiceDataFromState.date || '22.03.2025',
//     invoiceNo: invoiceDataFromState.invoiceNo || '5822',
//   };

//   const clientDetails = {
//     name: invoiceDataFromState.clientName || 'Client Company Name',
//     address1: invoiceDataFromState.clientAddress1 || 'Client Address Line 1',
//     address2: invoiceDataFromState.clientAddress2 || 'Client Address Line 2, Country',
//     tel: invoiceDataFromState.clientTel || '00000000000',
//     contactPerson: invoiceDataFromState.clientContactPerson || 'Client Contact Person',
//     email: invoiceDataFromState.clientEmail || 'client.email@example.com',
//     trn: invoiceDataFromState.clientTRN || "Client's TRN No.",
//   };

//   const projectInfo = {
//     costEstNo: invoiceDataFromState.costEstNo || 'CE No.',
//     poNo: invoiceDataFromState.purchaseOrderNo || 'PO Number',
//     projectNo: invoiceDataFromState.projectNo || 'Project No.',
//   };

//   const bankDetails = {
//     accountName: invoiceDataFromState.bankAccountName || 'Company Name',
//     bankName: invoiceDataFromState.bankName || "Company's Bank Name",
//     iban: invoiceDataFromState.iban || 'XX000000000000000000001',
//     swiftCode: invoiceDataFromState.swiftCode || 'XXXAAACC',
//     terms: invoiceDataFromState.paymentTerms || 'Net 30',
//   };

//   const items = invoiceDataFromState.items && invoiceDataFromState.items.length > 0 
//     ? invoiceDataFromState.items.map((item, index) => [
//         (index + 1).toString() + '.', 
//         item.description, 
//         item.qty, 
//         item.rate, 
//         parseFloat(item.amount).toFixed(2)
//       ]) 
//     : [
//         ['1.', 'Print Samples', 6, 2, '12.00'], // Default item
//       ];

//   const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
//   const vatRate = invoiceDataFromState.vatRate !== undefined ? invoiceDataFromState.vatRate : 0.10; // 10% VAT from image, or from state
//   const vatAmount = subTotal * vatRate;
//   const grandTotal = subTotal + vatAmount;
//   const amountInWords = invoiceDataFromState.amountInWords || `US Dollars ${numberToWords(grandTotal)} Only`;
//   // --- END: Data from 'invoiceDataFromState' object ---

//   // 1. Company Logo Block (Top Left) - Assuming this part is okay from previous version
//   doc.setFillColor(192, 0, 0); 
//   doc.rect(margin, finalY, 220, 60, 'F'); 
//   doc.setTextColor(255, 255, 255);
//   doc.setFontSize(14);
//   doc.setFont('helvetica', 'bold');
//   doc.text(companyDetails.logoText, margin + 10, finalY + 25);
//   doc.setFontSize(8);
//   doc.setFont('helvetica', 'normal');
//   doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);

//   // 2. Company Name (Top Right) - Assuming this part is okay
//   const companyNameBlockY = finalY; 
//   doc.setFillColor(192, 0, 0); 
//   doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F'); 
//   doc.setTextColor(255, 255, 255);
//   doc.setFontSize(12);
//   doc.setFont('helvetica', 'bold');
//   doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });

//   // 3. Tax Invoice Title - Assuming this part is okay
//   let titleY = companyNameBlockY + 30 + 20; 
//   doc.setTextColor(0, 0, 0);
//   doc.setFontSize(18);
//   doc.setFont('helvetica', 'bold');
//   doc.text('Tax Invoice', pageWidth - margin, titleY, { align: 'right' });

//   // 4. TRN, Date, Invoice No. Table - Assuming this part is okay
//   let tableDetailsY = titleY + 10; 
//   autoTable(doc, {
//     startY: tableDetailsY,
//     head: [['TRN:', 'Date', 'Invoice No.']],
//     body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
//     theme: 'grid',
//     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0,0,0] },
//     headStyles: { fillColor: [255,255,255], textColor: [0,0,0], fontStyle: 'bold' },
//     columnStyles: {
//       0: { cellWidth: 150, halign: 'left' },
//       1: { cellWidth: 80, halign: 'left' },
//       2: { cellWidth: 80, halign: 'left' },
//     },
//     margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) -10 },
//     tableWidth: 'wrap',
//   });
//   finalY = doc.lastAutoTable.finalY + 20;

//   // 5. Invoice To Section - Assuming this part is okay
//   const invoiceToBoxWidth = 250;
//   doc.setDrawColor(0,0,0);
//   doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S'); 
//   doc.setFontSize(10);
//   doc.setFont('helvetica', 'bold');
//   doc.text('Invoice To', margin + 5, finalY + 15);
//   doc.setFontSize(9);
//   doc.setFont('helvetica', 'normal');
//   let textYInvoiceTo = finalY + 30;
//   [clientDetails.name, clientDetails.address1, clientDetails.address2, `Tel: ${clientDetails.tel}`, `Contact: ${clientDetails.contactPerson}`, `Email: ${clientDetails.email}`].forEach(line => {
//     doc.text(line, margin + 5, textYInvoiceTo);
//     textYInvoiceTo += 12;
//   });
//   finalY += 100 + 10; 

//   // 6. TRN, Cost Est. No., P.O. No., Project Table - Assuming this part is okay
//   autoTable(doc, {
//     startY: finalY,
//     head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project']],
//     body: [[clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]],
//     theme: 'grid',
//     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0,0,0] },
//     headStyles: { fillColor: [220,220,220], textColor: [0,0,0], fontStyle: 'bold' },
//     margin: { left: margin, right: margin },
//   });
//   finalY = doc.lastAutoTable.finalY + 10;

//   // 7. Bank Details Table - Assuming this part is okay
//   autoTable(doc, {
//     startY: finalY,
//     head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
//     body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
//     theme: 'grid',
//     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0,0,0] },
//     headStyles: { fillColor: [200,200,200], textColor: [0,0,0], fontStyle: 'bold' },
//     margin: { left: margin, right: margin },
//   });
//   finalY = doc.lastAutoTable.finalY + 10;

//   // 8. Items Table - Assuming this part is okay
//   autoTable(doc, {
//     startY: finalY,
//     head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
//     body: items,
//     theme: 'grid',
//     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0,0,0] },
//     headStyles: { fillColor: [220,220,220], textColor: [0,0,0], fontStyle: 'bold' },
//     columnStyles: {
//       0: { cellWidth: 40, halign: 'center' },
//       1: { cellWidth: 'auto' },
//       2: { cellWidth: 40, halign: 'right' },
//       3: { cellWidth: 50, halign: 'right' },
//       4: { cellWidth: 70, halign: 'right' },
//     },
//     margin: { left: margin, right: margin },
//     didDrawPage: function (data) {
//         // Ensure finalY is updated correctly if table spans multiple pages
//         finalY = data.cursor.y;
//     }
//   });
//   // finalY is now at the bottom of the items table.

//   // 9. Amount in Words (NEW - based on the second image)
//   // This should be after items table and before the totals box that is on the right.
//   // Check if there's enough space, otherwise add new page (simplified here)
//   const amountInWordsY = finalY + 20; 
//   doc.setFontSize(9);
//   doc.setFont('helvetica', 'normal');
//   doc.text(amountInWords, margin, amountInWordsY, {maxWidth: pageWidth - margin - 220}); // Ensure it doesn't overlap with totals

//   // 10. Totals Section (NEW - Subtotal, VAT, Total - Right Aligned)
//   const totalsTableWidth = 200;
//   const totalsTableX = pageWidth - margin - totalsTableWidth;
//   // The totals box should start slightly below or aligned with "Amount in words" or after items table.
//   // Let's position it relative to the bottom of the items table.
//   let totalsTableY = finalY + 10; // Start Y for totals table, can be adjusted

//   autoTable(doc, {
//     startY: totalsTableY,
//     body: [
//       ['Subtotal', `USD ${subTotal.toFixed(2)}`],
//       [`VAT (${(vatRate * 100).toFixed(0)}%)`, `USD ${vatAmount.toFixed(2)}`],
//       ['Total', `USD ${grandTotal.toFixed(2)}`]
//     ],
//     theme: 'grid', // Grid as per new image
//     styles: {
//         fontSize: 9,
//         cellPadding: 5,
//         lineWidth: 0.5,
//         lineColor: [0,0,0]
//     },
//     headStyles: { // No head, but can define for consistency if needed
//         fillColor: [255,255,255],
//         textColor: [0,0,0],
//     },
//     columnStyles: {
//         0: { halign: 'left', fontStyle: 'bold', cellWidth: totalsTableWidth * 0.6 },
//         1: { halign: 'right', cellWidth: totalsTableWidth * 0.4 }
//     },
//     margin: { left: totalsTableX }, // Position to the right
//     tableWidth: totalsTableWidth, // Fixed width for the totals box
//     didDrawPage: function (data) {
//         totalsTableY = data.cursor.y; // Update Y for next element if it spans pages
//     }
//   });
  
//   // Update finalY to be the bottom of either amountInWords or totalsTable, whichever is lower
//   finalY = Math.max(amountInWordsY + 10, totalsTableY + 10); 

//   // 11. Footer: For Company Name, Stamp, Accounts Department (NEW)
//   const footerStartY = finalY + 30; // Space before footer elements
//   const stampWidth = 100;
//   const stampHeight = 70;
//   const stampX = margin + 150; // Position stamp to the right of "For Company Name"

//   doc.setFontSize(9);
//   doc.setFont('helvetica', 'normal');
//   doc.text('For Company Name', margin, footerStartY);
//   doc.text('Accounts Department', margin, footerStartY + stampHeight - 10); // Align with bottom of stamp area

//   // Placeholder for Stamp Image
//   doc.setFillColor(200, 200, 200); // Light grey for placeholder
//   doc.rect(stampX, footerStartY - 15, stampWidth, stampHeight, 'F');
//   doc.setTextColor(0,0,0);
//   doc.setFontSize(8);
//   doc.text('Insert Stamp Image', stampX + stampWidth/2, footerStartY - 15 + stampHeight/2, { align: 'center' });

//   // Ensure all content fits, add new page if necessary (simplified)
//   // if (footerStartY + stampHeight > pageHeight - margin) { doc.addPage(); ... }

//   doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
// };








































// ////////////////////////////////add time log employee
import React, { useEffect, useState } from 'react'; import { useDispatch, useSelector } from 'react-redux';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { fetchProject } from '../../../redux/slices/ProjectsSlice';
import { fetchjobs } from '../../../redux/slices/JobsSlice';
import { createTimesheetWorklog, updateTimesheetWorklog } from '../../../redux/slices/TimesheetWorklogSlice'; // Make sure this exists
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { fetchusers } from '../../../redux/slices/userSlice';
import { fetchMyJobs } from '../../../redux/slices/Employee/MyJobsSlice';

function AddTimeLog() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { id } = useParams();
  const location = useLocation();
  const { entry } = location.state || {};
  const _id = entry?._id;

  // Delete code hai ye abhi is m,e function lity lagi hai is liye ye abhi rahja ne diya hai api chal rahi hai 
  const { project } = useSelector(state => state.projects);
  const { job } = useSelector(state => state.jobs);
  const { userAll, loading, error } = useSelector((state) => state.user);

const getTodayDate = () => {
  const today = new Date();
  return today.toISOString().split("T")[0]; // 'YYYY-MM-DD'
};

  const [formData, setFormData] = useState({
    projectId: '',
    jobId: '',
    employeeId: '',
    date: getTodayDate(),
    status: '',
    startTime: '',
    endTime: '',
    taskDescription: '',
    tags: '',
    projectName: '',
    jobName: ''
  });

  useEffect(() => {
    if (entry) {
   const parsedDate = entry.date
      ? new Date(entry.date).toISOString().split('T')[0]
      : getTodayDate();
      setFormData({
        date: parsedDate,
        projectId: Array.isArray(entry.projectId) ? entry.projectId[0]._id : '',
        jobId: Array.isArray(entry.jobId) ? entry.jobId[0]._id : '',
        employeeId: Array.isArray(entry.employeeId) ? entry.employeeId[0]._id : '',
        status: entry.status || '',
        startTime: entry.startTime || '',
        endTime: entry.endTime || '',
        taskDescription: entry.taskDescription || '',
        tags: entry.tags || '',
        projectName: Array.isArray(entry.projectId) ? entry.projectId[0].projectName : '',
        jobName: Array.isArray(entry.jobId) ? entry.jobId[0].jobName || '' : ''
      });
    }
  }, [entry]);

  useEffect(() => {
    dispatch(fetchProject());
    dispatch(fetchjobs());
    dispatch(fetchusers());
  }, [dispatch]);

  useEffect(() => {
    if (formData.startTime && formData.endTime) {
      const [startHour, startMinute] = formData.startTime.split(':').map(Number);
      const [endHour, endMinute] = formData.endTime.split(':').map(Number);

      const start = new Date();
      start.setHours(startHour, startMinute, 0);

      const end = new Date();
      end.setHours(endHour, endMinute, 0);

      let diff = (end - start) / 1000 / 60 / 60; // hours

      if (diff < 0) diff = 0;

      setFormData(prev => ({
        ...prev,
        hours: diff.toFixed(2)
      }));
    }
  }, [formData.startTime, formData.endTime]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const convertTo12HourFormat = (time24) => {
    const [hourStr, minuteStr] = time24.split(':');
    let hour = parseInt(hourStr, 10);
    const minute = minuteStr;
    const ampm = hour >= 12 ? 'PM' : 'AM';
    hour = hour % 12 || 12;
    return `${hour.toString().padStart(2, '0')}:${minute} ${ampm}`;
  };
  const handleSubmit = (e) => {
    e.preventDefault();

    const payload = {
      projectId: [formData.projectId],
      jobId: [formData.jobId],
      employeeId: [formData.employeeId],
      date: formData.date,
      startTime: convertTo12HourFormat(formData.startTime),
      endTime: convertTo12HourFormat(formData.endTime),
      taskDescription: formData.taskDescription,
      status: formData.status,
      tags: formData.tags,
      projectName: formData.projectName,
      jobName: formData.jobName
    };

    const successNavigate = () => navigate("/employee/TimeTracking");

    if (_id) {
      dispatch(updateTimesheetWorklog({ _id, data: payload }))
        .unwrap()
        .then((res) => {
          toast.success(res?.message || "Timesheet updated successfully!");
          successNavigate();
        })
        .catch((err) => {
          toast.error(err?.message || "Failed to update timesheet!");
          console.error("Update error:", err);
        });
    } else {
      dispatch(createTimesheetWorklog(payload))
        .unwrap()
        .then((res) => {
          toast.success(res?.message || "Timesheet created successfully!");
          successNavigate();
        })
        .catch((err) => {
          toast.error(err?.message || "Error creating timesheet!");
          console.error("Create error:", err);
        });
    }
  };


// Project Jobs Employee ye pora data araha hai 
  const { myjobs } = useSelector((state) => state.MyJobs);
  const MynewJobsdata = myjobs && myjobs.assignments && myjobs.assignments.length > 0 ? myjobs.assignments[0].jobId : [];

  useEffect(() => {
    dispatch(fetchMyJobs());
  }, [dispatch]);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const filteredProjects = MynewJobsdata || [];
  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const reversedProjectList = project?.data?.slice().reverse() || [];
  const reversedJobList = job?.jobs?.slice().reverse() || [];
  const reversedEmployeeList = (userAll?.data?.users || []).filter(user => user.role === "employee").reverse();


  
  return (
    <div className="container py-4">
      <div className="row justify-content-center">
        <div className="col-12">
          <div className="card shadow-sm border-0">
            <div className="card-body p-4">
              <h5 className="card-title mb-4">Timesheet & Worklog</h5>
              <form onSubmit={handleSubmit}>
                <div className="row g-3">

                  {/* Project Dropdown */}
                  <div className="col-md-6">
                    <label className="form-label">Project</label>
                    <select
                      className="form-select"
                      name="projectId"
                      value={formData.projectId}
                      onChange={(e) => {
                        const selectedId = e.target.value;
                        const selectedProject = project?.data?.find(p => p._id === selectedId);
                        setFormData(prev => ({
                          ...prev,
                          projectId: selectedId,
                          projectName: selectedProject?.projectName || ""
                        }));
                      }}
                      required
                    >
                      <option value="">Select a project</option>
                      {reversedProjectList.map((proj) => (
                        <option key={proj._id} value={proj._id}>
                          {proj.projectName}
                        </option>
                      ))}
                    </select>
                  </div>
                  {/* Jobs Dropdown */}
                  <div className="col-md-6">
                    <label className="form-label">Jobs</label>
                    <select
                      className="form-select"
                      name="jobId"
                      value={formData.jobId}
                      onChange={(e) => {
                        const selectedId = e.target.value;
                        const selectedJob = reversedJobList.find(j => j._id === selectedId);
                        setFormData({
                          ...formData,
                          jobId: selectedId,
                          jobName: selectedJob?.jobName || "",
                        });
                      }}
                      required
                    >
                      <option value="">Select a job</option>
                      {filteredProjects.map((j) => (
                        <option key={j._id} value={j._id}>
                          {j.JobNo || (j.brandName + " " + j.subBrand)}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div className="col-md-6">
                    <label className="form-label">Employee</label>
                    <select
                      className="form-select"
                      name="employeeId"
                      value={formData.employeeId}
                      onChange={(e) => {
                        const selectedId = e.target.value;

                        const selectedEmployee = reversedEmployeeList.find(
                          (emp) => String(emp._id) === String(selectedId) // type-safe compare
                        );

                        console.log("Selected ID:", selectedId);
                        console.log("Selected Employee:", selectedEmployee);

                        setFormData((prev) => ({
                          ...prev,
                          employeeId: selectedId,
                          // Optional: Add employeeName if needed
                          // employeeName: selectedEmployee?.name || ""
                        }));
                      }}
                      required
                    >
                      <option value="">Select an employee</option>


                      {myjobs.assignments.map((assignment) => (
                        <option key={assignment.employeeId?._id} value={assignment.employeeId?._id}>
                          {assignment.employeeId?.firstName} {assignment.employeeId?.lastName}
                        </option>
                      ))}
                    </select>
                  </div>



                  <div className="col-md-6">
                    <label className="form-label">Status</label>
                    <select
                      className="form-select"
                      name="status"
                      value={formData.status}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select Status</option>
                      <option value="Approved">Approved</option>
                      <option value="Pending">Pending</option>
                      <option value="In Progress">In Progress</option>
                      <option value="Completed">Completed</option>
                    </select>
                  </div>

                  <div className="col-md-6">
                    <label className="form-label">Start Time</label>
                    <input
                      type="time"
                      className="form-control"
                      name="startTime"
                      value={formData.startTime}
                      onChange={handleInputChange}
                      required
                    />
                  </div>

                  <div className="col-md-6">
                    <label className="form-label">End Time</label>
                    <input
                      type="time"
                      className="form-control"
                      name="endTime"
                      value={formData.endTime}
                      onChange={handleInputChange}
                      required
                    />
                  </div>


                  <div className="col-md-6">
                    <label className="form-label">Date</label>
                    <input
                      type="date"
                      className="form-control"
                      name="date"
                      value={formData.date}
                      onChange={handleInputChange}
                      required
                    />
                  </div>

                  <div className="col-12">
                    <label className="form-label">Task Description</label>
                    <textarea
                      className="form-control"
                      rows="4"
                      name="taskDescription"
                      value={formData.taskDescription}
                      onChange={handleInputChange}
                      required
                    ></textarea>
                  </div>

                  <div className="col-12">
                    <label className="form-label">Tags</label>
                    <input
                      type="text"
                      className="form-control"
                      name="tags"
                      value={formData.tags}
                      onChange={handleInputChange}
                      placeholder="Add tags separated by commas"
                    />
                  </div>
                </div>

                <div className="d-flex justify-content-end gap-2 mt-4">
                  <Link to="/admin/TimesheetWorklog" className="btn btn-light">Cancel</Link>
                  <button type="submit" className="btn btn-dark">
                    {id ? "Update Time Entry" : "Submit Time Entry"}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default AddTimeLog;



















// import React, { useEffect, useState } from "react";
// import { MdEditSquare } from "react-icons/md";
// import { FaRegTrashCan } from "react-icons/fa6";
// import { Button, Form, Table, Pagination, Modal } from "react-bootstrap";
// import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
// import { FaEye } from "react-icons/fa";
// import { useDispatch, useSelector } from "react-redux";
// import { fetchjobs, UpdateJobAssign } from "../../../redux/slices/JobsSlice";
import {
  FaFilePdf,
  FaUpload,
  FaLink,
  FaClock,
  FaEdit,
} from "react-icons/fa";
import { Dropdown,Table } from "react-bootstrap";
// import Swal from 'sweetalert2';
// import { fetchusers } from "../../../redux/slices/userSlice";
// import { createAssigns } from "../../../redux/slices/AssignSlice";
// import { toast } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";




// ////////
import React, { useEffect, useState } from 'react';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { Modal, Form, Button } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
// import {  updatejob, UpdateJobAssign,fetchusers } from '../../../../redux/slices/JobsSlice';
import Swal from 'sweetalert2';
// import { fetchusers } from '../../../../redux/slices/userSlice';
// import { createAssigns } from '../../../../redux/slices/AssignSlice';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Project_job_Id } from "../../../redux/slices/JobsSlice";
import { fetchusers } from "../../../redux/slices/userSlice";

function NewJobsList() {  
// /////////////////////////////////
    const location = useLocation();
    const params = useParams();
    console.log("hello me project id", params);
    const id = location.state?.id || params.id;
  
    const dispatch = useDispatch()
    const navigate = useNavigate()
    const [selectedProduction, setSelectedProduction] = useState('');
    const [selectedAdditional, setSelectedAdditional] = useState('');
    const [selectedJob, setSelectedJob] = useState(null);
    const [attachedFile, setAttachedFile] = useState(null);
    const [selectedJobs, setSelectedJobs] = useState({});
    const [errorMessage, setErrorMessage] = useState('');
  
    const [showAssignModal, setShowAssignModal] = useState(false);
    const [selectedDesigner, setSelectedDesigner] = useState('');
    const [assignmentDescription, setAssignmentDescription] = useState('');
  
    const jobs = [
      {
        id: "00001",
        brandName: "Brand1",
        subBrand: "SubBrand1",
        flavour: "Flavour1",
        packType: "Type1",
        packSize: "Size 1ml",
        packCode: "Code1",
        deadline: "2024/01/20",
        brief: "ViewBrief",
        status: "Pending Upload",
        statusVariant: "warning",
      },
      {
        id: "00002",
        brandName: "Brand2",
        subBrand: "SubBrand2",
        flavour: "Flavour2",
        packType: "Type2",
        packSize: "Size 2ml",
        packCode: "Code2",
        deadline: "2024/01/25",
        brief: "ViewBrief",
        status: "In Progress",
        statusVariant: "info",
      },
      {
        id: "00003",
        brandName: "Brand3",
        subBrand: "SubBrand3",
        flavour: "Flavour3",
        packType: "Type3",
        packSize: "Size 3ml",
        packCode: "Code3",
        deadline: "2024/02/01",
        brief: "ViewBrief",
        status: "DraftSaved",
        statusVariant: "secondary",
      },
    ];
  
    const [selectedEmployee, setSelectedEmployee] = useState("");
    const { userAll } = useSelector((state) => state.user);
    console.log("data user", userAll?.data?.users);
  
    useEffect(() => {
      dispatch(fetchusers());
    }, [dispatch]);

      const { job, loading, error } = useSelector((state) => state.jobs);
    console.log("gggggg",job);
    
      useEffect(() => {
        dispatch(fetchjobs());
      }, [dispatch]);
    
      
    const [currentAssignment, setCurrentAssignment] = useState(1);
    const itemsAssignment = 10;
  
    const filteredAssignment = (userAll?.data?.users || []).filter(
      (j) =>
        ((j?.assign || "").toString().toLowerCase() ===
          selectedDesigner.toLowerCase()) &&
        selectedDesigner !== ""
    );
  
    const paginatedAssignment = filteredAssignment.slice(
      (currentAssignment - 1) * itemsAssignment,
      currentAssignment * itemsAssignment
    );
  
    const handleSubmitAssignment = () => {
      const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
      const payload = {
        employeeId: [selectedEmployee],
        jobId: selectedJobIds,
        selectDesigner: selectedDesigner,
        description: assignmentDescription,
      };
  
      console.log("Assignment Payload:", payload);
  
      if (id) {
        dispatch(createAssigns(payload))
          .unwrap()
          .then((response) => {
            console.log("API Response:", response);
            // ✅ Agar API success ho to navigate kare
            if (response.success) {
              toast.success(response.message || "Project Assigned Successfully!");
              setShowAssignModal(false);
              setSelectedJobs(false);
              navigate("/admin/MyJobs");
            } else {
              setShowAssignModal(false);
              toast.error(response.message || "Assignment failed!");
            }
          })
          .catch((error) => {
            console.error("API Error:", error);
            toast.error(error.message || "Failed to update project!");
          });
      }
    };
  
    const handleJobAssign = (selectedIds, assignTo) => {
      const payload = {
        id: selectedIds,
        assign: assignTo,
      };
      console.log("Assignment Payload:", payload);
      dispatch(UpdateJobAssign(payload))
        .then(() => {
          // Swal.fire("Success!", "Jobs assigned successfully", "success");
          // dispatch(fetchjobs());
        })
        .catch(() => {
          Swal.fire("Error!", "Something went wrong", "error");
        });
    };
  
    const employees = [
      { _id: "123", name: "John Doe" },
      { _id: "456", name: "Jane Smith" },
    ];
  
    const handleCheckboxChange = (jobId) => {
      setSelectedJobs((prev) => ({
        ...prev,
        [jobId]: !prev[jobId],
      }));
    };
  
    const handleCSVImport = (event) => {
      const file = event.target.files[0];
      if (file) {
        console.log("CSV file selected:", file.name);
      }
    };
  
    const getPriorityClass = (priority) => {
      switch (priority.toLowerCase()) {
        case "high":
          return "text-danger";
        case "medium":
          return "text-warning";
        case "low":
          return "text-success";
        default:
          return "";
      }
    };
    // ////////////////////////////////////////
    // const location = useLocation();
    // const params = useParams();
    // const id = location.state?.id || params.id;
    useEffect(() => {
      console.log("Project ID:", id);
    }, [id]);
  
    const { job, loading, error } = useSelector((state) => state.jobs);
    console.log(job.jobs, "all jobs");
  
    const { ProjectJob } = useSelector((state) => state.jobs);
    console.log(ProjectJob, "all jobs");
  
    useEffect(() => {
      dispatch(Project_job_Id(id));
    }, [dispatch, id]);
  
    const handleDelete = (_id) => {
      console.log(_id);
      Swal.fire({
        title: "Are you sure?",
        text: "You want to mark this job as Cancelled?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, mark as Cancelled!",
      }).then((result) => {
        if (result.isConfirmed) {
          // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
          console.log(id);

          dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
            .unwrap()
            .then(() => {
              Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
              // dispatch(Project_job_Id(id));
            })
            .catch(() => {
              Swal.fire("Error!", "Something went wrong while updating.", "error");
            });
        }
      });
    };
  
    const handleUpdate = (job) => {
      console.log(job, "dcvhrvrejhcvwerjhcvhgv")
      navigate(`/admin/AddJobTracker/${job._id}`, { state: { job } });
    };
  
    const JobDetails = (job) => {
      navigate(`/admin/OvervieJobsTracker`, { state: { job } });
    }
    const getStatusClass = (status) => {
      switch (status.toLowerCase().trim()) {
        case "in progress":
        case "in_progress":
          return "bg-warning text-dark";
        case "review":
          return "bg-info text-dark";
        case "not started":
          return "bg-secondary text-white";
        case "completed":
          return "bg-success text-white";
        case "open":
          return "bg-primary text-white";
        case "cancelled":
          return "bg-dark text-white";
        default:
          return "bg-light text-dark";
      }
    };
  
   // ✅ Copy File Name & Download CSV
    const handleDownloadFileNamesCSV = () => {
      const rows = [["JobFileName"]];
      job?.jobs?.forEach((j, index) => {
        const jobNo = String(index + 1).padStart(5, '0');
        const fileName = `${jobNo}_${j.brandName}_${j.subBrand}_${j.flavour}_${j.packType}_${j.packSize}_${j.packCode}`;
        rows.push([fileName]);
      });
      const csvContent = rows.map((r) => r.join(",")).join("\n");
      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = "JobFileNames.csv";
      link.click();
      URL.revokeObjectURL(url);
    };
  
  
 
   const [currentPage, setCurrentPage] = useState(1);
   const itemsPerPage = 10;
 
   const filteredProjects = job?.jobs || [];
   const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);
 
   const paginatedProjects = filteredProjects.slice(
     (currentPage - 1) * itemsPerPage,
     currentPage * itemsPerPage
   );
  
    const AddJob = () => {
      navigate(`/admin/AddJobTracker/${id}`, { state: { id } });
    };
  
  return (
    <div className="container bg-white p-3 mt-4  rounded shadow-sm">
      {/* Title */}
      <div className="d-flex justify-content-between align-items-center ">
        <h5 className="fw-bold m-0">Job Assign</h5>
        <div className="d-flex gap-2 ">
          {/* <Button onClick={handleRejectJobs} id="All_btn" className="m-2"
            variant="primary">
            Reject
          </Button> */}
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds); // ✅ Call with selected IDs
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
        </div>
      </div>

      {/* Show Messages */}
      {/* {errorMessage && (
        <div className="alert alert-danger py-2" role="alert">
          {errorMessage}
        </div>
      )}
      {successMessage && (
        <div className="alert alert-success py-2" role="alert">
          {successMessage}
        </div>
      )} */}

      {/* Filters */}
      <div className="d-flex flex-wrap gap-2 mb-3 align-items-center">
        <Form.Control
          type="text"
          placeholder="Search jobs..."
          className="w-auto"
        />
        <Form.Select className="" style={{ width: "120px" }}>
          <option>All Clients</option>
        </Form.Select>

        <Dropdown>
          <Dropdown.Toggle variant="light" id="project-dropdown">
            {/* {selectedProject} */}
          </Dropdown.Toggle>
          <Dropdown.Menu>
            <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>All Projects</Dropdown.Item>
            {job?.jobs?.map((j, i) => (
              <Dropdown.Item key={i} onClick={() => setSelectedProject(j.project?.projectName || "N/A")}>
                {j.project?.projectName || "N/A"}
              </Dropdown.Item>
            ))}
          </Dropdown.Menu>
        </Dropdown>
      </div>

      {/* Table */}
      <div className="table-responsive" >
        <Table hover className="align-middle sticky-header">
          <thead className="bg-light">
            <tr>
              <th>
                <input
                  type="checkbox"
                  onChange={(e) => {
                    const checked = e.target.checked;
                    const newSelectedJobs = {};
                    job?.jobs?.forEach((job) => {
                      newSelectedJobs[job._id] = checked;
                    });
                    setSelectedJobs(newSelectedJobs);
                  }}
                  checked={
                    job?.jobs?.length > 0 &&
                    job?.jobs?.every((j) => selectedJobs[j._id])
                  }
                />
              </th>
              <th>JobNo</th>
              <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
              <th>Brand</th>
              <th style={{ whiteSpace: 'nowrap' }}>Sub Brand</th>
              <th>Flavour</th>
              <th>PackType</th>
              <th>PackSize</th>
              <th>PackCode</th>
              <th>TimeLogged</th>
              <th>Due Date</th>
              {/* <th>Assign</th> */}
              <th>Priority</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
           <tbody>
                 {paginatedProjects.slice().reverse().map((job, index) => (
                   <tr key={job._id}>
                     <td>
                       <input
                         type="checkbox"
                         checked={selectedJobs[job._id] || false}
                         onChange={() => handleCheckboxChange(job._id)}
                       />
                     </td>
                     <td onClick={() => JobDetails(job)}>
                       <Link style={{ textDecoration: 'none' }}>{job.JobNo}</Link>
                     </td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job.brandName}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job.subBrand}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job.packType}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job.packSize}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{job?.packCode}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                     <td style={{ whiteSpace: 'nowrap' }}>{new Date(job.createdAt).toLocaleDateString("en-GB")}</td>
                     {/* <td style={{ whiteSpace: 'nowrap' }}>{job.assign}</td> */}
                     <td>
                       <span className={getPriorityClass(job.priority)}>{job.priority}</span>
                     </td>
                     <td>
                       <span className={`badge ${getStatusClass(job.Status)} px-2 py-1`}>
                         {job.Status}
                       </span>
                     </td>
                     <td>
                       <div className="d-flex gap-2">
                         <Button id="icone_btn" size="sm"><FaFilePdf /></Button>
                         <Button id="icone_btn" size="sm"><FaUpload /></Button>
                         <Button id="icone_btn" size="sm"><FaLink /></Button>
                         <Button id="icone_btn" size="sm"><FaClock /></Button>
                         <Button
                           id="icone_btn"
                           size="sm"
                           onClick={() => handleUpdate(job)}
                         >
                           <FaEdit />
                         </Button>
                       </div>
                     </td>
                   </tr>
                 ))}
               </tbody>
        </Table>
      </div>


      {/* Assign Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee("");
                }}
              >
                <option value="">-- Select --</option>
                <option value="Production">Production</option>
                <option value="Designer">Designer</option>
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment.map((emp) => (
                  <option key={emp._id} value={emp._id}>
                    {emp.firstName || 'Unnamed Employee'}_
                    {emp.lastName || 'Unnamed Employee'}
                  </option>

                ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>


      {/* Reject Modal */}
      {/* <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Reject Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="alert alert-warning">
            Are you sure you want to reject this job?
          </div>
          <Form.Group className="mb-3">
            <Form.Label>Reason for Rejection</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
              placeholder="Enter reason..."
            />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowRejectModal(false)}>
            Cancel
          </Button>
          <Button variant="danger" onClick={handleSubmitRejection}>
            Reject
          </Button>
        </Modal.Footer>
      </Modal> */}

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredProjects.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default NewJobsList;









import React, { useEffect, useState } from 'react';
import { Table, Badge, Button, Row, Col, Card, Modal, Form, Dropdown, Spinner } from 'react-bootstrap';
import { FaEye, FaEdit, FaUpload, FaPlus, FaTrash } from 'react-icons/fa';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import './Project.css';
import { useDispatch, useSelector } from 'react-redux';
import { deleteproject, fetchProject } from '../../../redux/slices/ProjectsSlice';
import Swal from 'sweetalert2';
import { fetchClient } from '../../../redux/slices/ClientSlice';
import { Project_job_Id } from '../../../redux/slices/JobsSlice';

function ProjectList() {
  const [activeTab, setActiveTab] = useState('Active Project');
  const [currentPage, setCurrentPage] = useState(1);

  const dispatch = useDispatch();
  const navigate = useNavigate()
  const { project, loading, error } = useSelector((state) => state.projects);
  const [selectedJobs, setSelectedJobs] = useState({});

  const tabs = [
    'Active Project',
    'In Progress',
    'Completed',
    'Closed',
    'Cancelled',
    'On Hold',
    'All',
    // 'Completed (To Be Invoiced)',
  ];

  useEffect(() => {
    dispatch(fetchProject());
  }, [dispatch]);

  const filteredProjects =
    activeTab === 'All'
      ? project.data
      : activeTab === 'Completed (To Be Invoiced)'
        ? project.data?.filter(
          (project) => project.status === 'Completed' && !project.invoiceCreated
        )
        : project.data?.filter((project) => project.status === activeTab);

  const handleCheckboxChange = (projectId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [projectId]: !prev[projectId],
    }));
  };

  const handleDelete = (id) => {
    console.log(id);
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteproject(id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchProject());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }
  const handleUpdate = (project) => {
    navigate(/admin/AddProjectList, { state: { project } });
  };

  const CreatJobs = (id) => {
    navigate(/admin/ProjectOverview/${id}, { state: { id, openTab: 'jobs' } });
  };

  const getStatusClass = (status) => {
    switch ((status || "").toLowerCase().trim()) {
      case "active project":
        return "bg-primary text-white";
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "completed":
        return "bg-success text-white";
      case "closed":
        return "bg-dark text-white";
      case "cancelled":
        return "bg-danger text-white";
      case "on hold":
        return "bg-info text-dark";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "open":
        return "bg-primary text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const itemsPerPage = 10;
  const totalPages = Math.ceil((filteredProjects?.length || 0) / itemsPerPage);
  const paginatedProjects = filteredProjects?.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="project-container" >
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h5 className="m-0 fw-bold">Project List</h5>
      </div>

      {/* Search and Actions */}
      <div className="mb-4">
        <div className="row g-2">
          <div className="col-12 col-md-6">
            <input
              type="text"
              className="form-control"
              placeholder="Search projects.."
            />
          </div>
          <div className="col-12 col-md-6 d-flex justify-content-md-end gap-2">
            <Button variant="outline-secondary" size="sm">
              <FaUpload className="me-1" /> Import
            </Button>
            <Link to={"/admin/AddProjectList"}>
              <Button id="All_btn" variant="dark" size="sm">
                <FaPlus className="me-1" /> Add project
              </Button>
            </Link>
          </div>
        </div>
      </div>

      {/* Project Status Tabs */}
      {/* Project Status Tabs - Responsive */}
      <div className="project-tabs mb-4">
        {/* Large screens: show tabs */}
        <ul className="nav nav-tabs d-none d-md-flex">
          {tabs.map((tab) => (
            <li className="nav-item" key={tab}>
              <button
                className={nav-link ${activeTab === tab ? 'active' : ''}}
                onClick={() => setActiveTab(tab)}
                style={{ color: "#0d6efd", borderColor: "#0d6efd" }}
              >
                {tab}
              </button>
            </li>
          ))}
        </ul>

        {/* Small screens: show dropdown */}
        <div className="d-flex d-md-none">
          <Dropdown>
            <Dropdown.Toggle variant="outline-primary" id="dropdown-tabs" className="w-100">
              {activeTab}
            </Dropdown.Toggle>

            <Dropdown.Menu className="w-100">
              {tabs.map((tab) => (
                <Dropdown.Item
                  key={tab}
                  active={tab === activeTab}
                  onClick={() => setActiveTab(tab)}
                >
                  {tab}
                </Dropdown.Item>
              ))}
            </Dropdown.Menu>
          </Dropdown>
        </div>
      </div>

      {/* Loader */}
      {loading && (
        <div className="text-center my-5">
          <Spinner animation="border" variant="primary" />
          <div className="mt-2">Loading projects...</div>
        </div>
      )}

      {/* Error */}
      {error && (
        <div className="text-danger text-center my-5">
          Failed to load projects. Please try again later.
        </div>
      )}

      {/* Projects Table */}
      {!loading && !error && filteredProjects?.length > 0 && (
        <Table responsive className="project-table mb-4">
          <thead>
            <tr>
              <th>
                <input
                  type="checkbox"
                  onChange={() => {
                    const isChecked =
                      Object.keys(selectedJobs).length === project.data.length;
                    const newSelectedJobs = {};
                    project.data.forEach((project) => {
                      newSelectedJobs[project.id] = !isChecked;
                    });
                    setSelectedJobs(newSelectedJobs);
                  }}
                />
              </th>
              <th style={{ whiteSpace: 'nowrap' }}>Project No</th>
              <th style={{ textWrap: 'nowrap' }}>Project Name</th>
              <th>Description</th>
              <th style={{ whiteSpace: 'nowrap' }}>Start Date</th>
              <th style={{ whiteSpace: 'nowrap' }}>End Date</th>
              <th>Client</th>
              <th style={{ whiteSpace: 'nowrap' }}>project Requirements</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedProjects.slice().reverse().map((project, index) => (
              <tr key={project.id}>
                <td>
                  <input
                    type="checkbox"
                    checked={selectedJobs[project.id] || false}
                    onChange={() => handleCheckboxChange(project.id)}
                  />
                </td>
                {/* <td onClick={() => CreatJobs(project.id)}>
                  <Link>
                    {String(index + 1).padStart(4, '0')}
                  </Link>
                </td> */}
                <td onClick={() => CreatJobs(project.id)}>
                  <Link style={{ textDecoration: 'none' }}>{project.projectNo}</Link>
                </td>
                <td style={{ whiteSpace: 'nowrap' }}>{project.projectName}</td>
                <td style={{ whiteSpace: 'nowrap' }}>{project.description}</td>
                <td>{new Date(project.startDate).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                <td>{new Date(project.endDate).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
                <td>{project.client}Client</td>
                <th>
                  {project.projectRequirements && project.projectRequirements.length > 0
                    ? Object.entries(project.projectRequirements[0])
                      .filter(([_, value]) => value === true)
                      .map(([key]) => key)
                      .join(', ')
                    : 'N/A'}
                </th>
                <td>
                  <span className={badge ${getStatusClass(project.status)} px-2 py-1}>
                    {project.status}
                  </span>
                </td>
                <td>
                  <div className="action-buttons d-flex">
                    {/* <Button style={{ color: "#0d6efd" }} variant="link" className="p-0 me-2">
                      <FaEye />
                    </Button> */}
                    <Button style={{ color: "#0d6efd" }} variant="link" className="p-0 me-2" onClick={() => handleUpdate(project)}>
                      <FaEdit />
                    </Button>
                    {/* <Button
                      style={{ color: "red" }}
                      variant="link"
                      className="p-0"
                      onClick={() => handleDelete(project.id)}
                    >
                      <FaTrash />
                    </Button> */}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      )}

      {/* Pagination */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing 1 to {filteredProjects?.length || 0} of {project.data?.length || 0} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={page-item ${currentPage === 1 ? 'disabled' : ''}}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={page-item ${currentPage === i + 1 ? 'active' : ''}}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={page-item ${currentPage === totalPages ? 'disabled' : ''}}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>

        </div>
      )}
    </div>
  );
}

export default ProjectList;



















import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch, useSelector } from "react-redux";
import { createCostEstimate, updateCostEstimate } from "../../../redux/slices/costEstimatesSlice";
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";

const currencies = [
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];

const poStatuses = ["Approved","pending",  "Rejected"];
const statuses = [ "Active", "Inactive", "Completed"];

function AddCostEstimates() {
  const location = useLocation();
  const po = location.state?.po;
  const id = po?._id;
  const navigate = useNavigate();
  const dispatch = useDispatch();

  console.log("hhhhhhh", po);

  const { project } = useSelector((state) => state.projects);
  useEffect(() => {
    dispatch(fetchProject());
  }, [dispatch]);
  const reversedProjectList = project?.data?.slice().reverse() || [];

  const { Clients } = useSelector((state) => state.client);
  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === Clients);
      if (foundProject) {
        setFormData(prev => ({
          ...prev,
          projectsId: foundProject._id,
        }));
      }
    }
  }, [Clients, project]);

  useEffect(() => {
    dispatch(fetchClient());
  }, [dispatch]);

  const [items, setItems] = useState([
    { description: "", quantity: 0, rate: 0, amount: 0 },
  ]);

  const [formData, setFormData] = useState({
    clientId: [""],
    projectsId: [""],
    estimateDate: "",
    validUntil: "",
    Notes: "",
    currency: "USD",
    POStatus: "",
    Status: "",
  });

  useEffect(() => {
    if (po && project?.data?.length) {
      let projectId = '';
      if (Array.isArray(po.projectId) && po.projectId.length > 0) {
        projectId = po.projectId[0]._id;
      } else if (Array.isArray(po.projects) && po.projects.length > 0) {
        projectId = typeof po.projects[0] === 'object'
          ? po.projects[0]._id
          : po.projects[0];
      }

      let clientId = "";
      let clientName = "";
      if (po.clientId && Array.isArray(po.clientId) && po.clientId.length > 0) {
        clientId = po.clientId[0]._id || "";
        clientName = po.clientId[0].clientName || "";
      } else if (Array.isArray(po.clients) && po.clients.length > 0) {
        clientId = po.clients[0]?.clientId || "";
        // Try to get client name from Clients data if available
        const clientObj = Clients?.data?.find(c => c._id === clientId);
        clientName = clientObj ? clientObj.clientName : "";
      }

      setFormData((prev) => ({
        ...prev,
        ...po,
        projectsId: projectId ? [projectId] : [""],
        clientId: clientId ? [clientId] : [""],
        clientName: clientName,
        Notes: po.Notes || "",
        currency: po.currency || "USD",
        estimateDate: po.estimateDate ? po.estimateDate.substring(0, 10) : "",
        validUntil: po.validUntil ? po.validUntil.substring(0, 10) : "",
      }));

      if (Array.isArray(po.lineItems) && po.lineItems.length > 0) {
        setItems(po.lineItems);
      }
    }
  }, [po, project?.data, Clients]);


  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(
      newItems[index].quantity,
      newItems[index].rate
    );
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };

  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = {
      ...formData,
      VATRate: taxRate * 100,
      lineItems: items,
    };

    const isDuplicate = location.state?.isDuplicate;
    if (isDuplicate || !id) {
      dispatch(createCostEstimate(payload))
        .unwrap()
        .then(() => {
          toast.success("Estimates created successfully!");
          navigate('/admin/CostEstimates', { state: { openTab: 'jobs' } });
        })
        .catch(() => {
          toast.error("Failed to create estimates");
        });
    } else {
      dispatch(updateCostEstimate({ id, data: payload }))
        .unwrap()
        .then(() => {
          toast.success("Estimates updated successfully!");
          navigate('/admin/CostEstimates', { state: { openTab: 'jobs' } });
        })
        .catch(() => {
          toast.error("Failed to update estimates");
        });
    }
  };

  return (
    <>
      <ToastContainer />
      <div className="container py-4">
        <h4 className="fw-bold mb-4">Cost Estimates</h4>
        <div className="bg-white border rounded-3 p-4 shadow-sm">
          <h4 className="fw-semibold mb-4">Create New Estimate</h4>

          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId[0] || ""}
                onChange={(e) => {
                  const selectedClientId = e.target.value;
                  const selectedClient = Clients?.data?.find(c => c._id === selectedClientId);

                  setFormData({
                    ...formData,
                    clientId: [selectedClientId],
                    clientName: selectedClient ? selectedClient.clientName : "",
                  });
                }}
              >
                <option value="">Select Client</option>
                {Clients?.data?.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.clientName}
                  </option>
                ))}
              </select>

            </div>


            <div className="col-md-4 mb-3">
              <label className="form-label">Project</label>
              <select
                className="form-select"
                name="projectsId"
                value={formData.projectsId[0] || ""}
                onChange={(e) => {
                  const selectedId = e.target.value;
                  const selectedProject = project?.data?.find(p => p._id === selectedId);
                  setFormData({
                    ...formData,
                    projectsId: [selectedId],
                    projectName: selectedProject?.projectName || "",
                  });
                }}
              >
                <option value="">Select a project</option>
                {reversedProjectList.map((proj) => (
                  <option key={proj._id} value={proj._id}>
                    {proj.projectName}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Estimate Date</label>
              <input
                type="date"
                className="form-control"
                name="estimateDate"
                value={formData.estimateDate}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Valid Until</label>
              <input
                type="date"
                className="form-control"
                name="validUntil"
                value={formData.validUntil}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
              >
                {currencies.map((curr) => (
                  <option key={curr.value} value={curr.value}>
                    {curr.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">PO Status</label>
              <select
                className="form-select"
                name="POStatus"
                value={formData.POStatus}
                onChange={handleFormChange}
              >
                {poStatuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="Status"
                value={formData.Status}
                onChange={handleFormChange}
              >
                {statuses.map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
          <div className="row fw-semibold text-muted mb-2 px-2">
            <div className="col-md-5">Description</div>
            <div className="col-md-2">Quantity</div>
            <div className="col-md-2">Rate</div>
            <div className="col-md-2">Amount</div>
            <div className="col-md-1 text-end"></div>
          </div>

          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  value={item.description}
                  required
                  onChange={(e) =>
                    handleItemChange(index, "description", e.target.value)
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  value={item.rate}
                  onChange={(e) =>
                    handleItemChange(index, "rate", parseFloat(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="row mt-4">
            <div className="col-md-6">
              <label className="form-label">VAT Rate (%)</label>
              <input
                type="number"
                className="form-control"
                value={(taxRate * 100).toFixed(2)}
                onChange={(e) =>
                  setTaxRate(isNaN(parseFloat(e.target.value)) ? 0 : parseFloat(e.target.value) / 100)
                }
              />
              <div className="mt-3">
                Subtotal: {formData.currency} {subtotal.toFixed(2)}<br />
                VAT: {formData.currency} {tax.toFixed(2)}<br />
                <strong>Total: {formData.currency} {total.toFixed(2)}</strong>
              </div>
            </div>
            <div className="col-md-6">
              <label className="form-label">Notes</label>
              <textarea
                className="form-control"
                rows="4"
                name="Notes"
                value={formData.Notes}
                onChange={handleFormChange}
              ></textarea>
            </div>
          </div>

          <div className="text-end mt-4">
            <Link to="/admin/CostEstimates">
              <button className="btn btn-light me-2">Cancel</button>
            </Link>
            <button className="btn btn-dark" onClick={handleSubmit}>
              Create Estimate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddCostEstimates;
















import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch } from 'react-redux';
import { createClients, fetchClient, updateClients } from '../../../redux/slices/ClientSlice';
import "react-toastify/dist/ReactToastify.css";


function AddClientManagement() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mode
  const location = useLocation();
  const { client } = location.state || {};
  console.log(client);

  // Initial form state
  const [formData, setFormData] = useState({
    clientName: '',
    industry: '',
    website: '',
    clientAddress: '',
    TaxID_VATNumber: '',
    CSRCode: '',
    Status: 'Active'
  });

  // Contact persons state
  const [contactPersons, setContactPersons] = useState([
    {
      contactName: '',
      jobTitle: '',
      email: '',
      phone: '',
      department: '',
      salesRepresentative: ''
    }
  ]);

  // Billing information state
  const [billingInformation, setBillingInformation] = useState([
    {
      billingAddress: '',
      billingContactName: '',
      billingEmail: '',
      billingPhone: '',
      currency: '',
      preferredPaymentMethod: ''
    }
  ]);
  // Shipping information state
  const [shippingInformation, setShippingInformation] = useState([
    {
      shippingAddress: '',
      shippingContactName: '',
      shippingEmail: '',
      shippingPhone: '',
      preferredShippingMethod: '',
      specialInstructions: ''
    }
  ]);
  // Financial information state
  const [financialInformation, setFinancialInformation] = useState([
    {
      annualRevenue: '',
      creditRating: '',
      bankName: '',
      accountNumber: '',
      fiscalYearEnd: '',
      financialContact: ''
    }
  ]);

  // Ledger information state
  const [ledgerInformation, setLedgerInformation] = useState([
    {
      accountCode: '',
      accountType: '',
      openingBalance: '',
      balanceDate: '',
      taxCategory: '',
      costCenter: ''
    }
  ]);

  // Additional information state
  const [additionalInformation, setAdditionalInformation] = useState({
    paymentTerms: '',
    creditLimit: '',
    notes: ''
  });


useEffect(() => {
  const updateStates = (clientData) => {
    setFormData({
      clientName: clientData.clientName || '',
      industry: clientData.industry || '',
      website: clientData.website || '',
      clientAddress: clientData.clientAddress || '',
      TaxID_VATNumber: clientData.TaxID_VATNumber || '',
      CSRCode: clientData.CSRCode || '',
      Status: clientData.Status || 'Active'
    });

    setContactPersons(clientData.contactPersons || []);
    setBillingInformation(clientData.billingInformation || []);
    setShippingInformation(clientData.shippingInformation || []);
    setFinancialInformation(clientData.financialInformation || []);
    setLedgerInformation(clientData.ledgerInformation || []);
    setAdditionalInformation(clientData.additionalInformation || {
      paymentTerms: '',
      creditLimit: '',
      notes: ''
    });
  };

  if (client) {
    updateStates(client);
  } else if (id) {
    dispatch(fetchclientById(id)).then((res) => {
      const fetchedclient = res.payload;
      if (fetchedclient) {
        updateStates(fetchedclient);
      }
    });
  }
}, [id, dispatch, client]);



  // Handle basic form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle contact person changes
  const handleContactChange = (index, e) => {
    const { name, value } = e.target;
    const updatedContacts = [...contactPersons];
    updatedContacts[index] = {
      ...updatedContacts[index],
      [name]: value
    };
    setContactPersons(updatedContacts);
  };

  // Handle billing information changes
  const handleBillingChange = (index, e) => {
    const { name, value } = e.target;
    const updatedBilling = [...billingInformation];
    updatedBilling[index] = {
      ...updatedBilling[index],
      [name]: value
    };
    setBillingInformation(updatedBilling);
  };

  // Handle shipping information changes
  const handleShippingChange = (index, e) => {
    const { name, value } = e.target;
    const updatedShipping = [...shippingInformation];
    updatedShipping[index] = {
      ...updatedShipping[index],
      [name]: value
    };
    setShippingInformation(updatedShipping);
  };

  // Handle financial information changes
  const handleFinancialChange = (index, e) => {
    const { name, value } = e.target;
    const updatedFinancial = [...financialInformation];
    updatedFinancial[index] = {
      ...updatedFinancial[index],
      [name]: value
    };
    setFinancialInformation(updatedFinancial);
  };

  // Handle ledger information changes
  const handleLedgerChange = (index, e) => {
    const { name, value } = e.target;
    const updatedLedger = [...ledgerInformation];
    updatedLedger[index] = {
      ...updatedLedger[index],
      [name]: value
    };
    setLedgerInformation(updatedLedger);
  };


  const handleAdditionalChange = (e) => {
    const { name, value } = e.target;
    setAdditionalInformation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    const fullData = {
      ...formData,
      contactPersons,
      billingInformation,
      shippingInformation,
      financialInformation,
      ledgerInformation,
      additionalInformation
    };
    console.log('Full Data Object:', fullData);
    if (id) {
      dispatch(updateClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientupdated successfully!");
          navigate("/admin/clientManagement");
              dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Failed to update client!");
        });
    } else {
          dispatch(createClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientcreated successfully!");
          navigate("/admin/clientManagement");
              dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Error creating client");
        });
    }
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const fullData = {
  //     ...formData,
  //     contactPersons,
  //     billingInformation,
  //     shippingInformation,
  //     financialInformation,
  //     ledgerInformation,
  //     additionalInformation
  //   };
  //         dispatch(createClients(fullData))
  //       .unwrap()
  //       .then(() => {
  //         toast.success("clientcreated successfully!");
  //         navigate("/clientManagement");
  //       })
  //       .catch(() => {
  //         toast.error("Error creating client");
  //       });
    
  // };

  return (
    <>
      <ToastContainer />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-body">
            {/* <h1 className="card-title h4 mb-4">Add Company</h1> */}
                   <h2 className="mb-4">{id || client?._id ? "Edit client" : "New Company (Client)"}</h2>
            <form className="row g-3" onSubmit={handleSubmit}>
              <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
              <div className="col-md-6"></div>
              <div className="col-md-6">
                <label className="form-label">Name</label>
                <input type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
              </div>
              <div className="col-md-6">
                <label className="form-label">Industry</label>
                <select className="form-select" name="industry" value={formData.industry} onChange={handleChange}>
                  <option value="">Select industry</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="tech">Technology</option>
                  <option value="retail">Retail</option>
                </select>
              </div>
              <div className="col-md-6">
                <label className="form-label">Website</label>
                <input type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
              </div>
              <div className="col-md-6">
                <label className="form-label">Client Address</label>
                <textarea className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
              </div>
              <div className="col-md-6">
                <label className="form-label">Tax ID/VAT Number</label>
                <input type="text" name="TaxID_VATNumber" value={formData.TaxID_VATNumber} onChange={handleChange} className="form-control" />
              </div>
              <div className="col-md-6">
                <label className="form-label">CSR Code</label>
                <input type="text" name="CSRCode" value={formData.CSRCode} onChange={handleChange} className="form-control" />
              </div>
              <div className="col-md-6">
                <label className="form-label">Status</label>
                <select className="form-select" name="Status" value={formData.Status} onChange={handleChange}>
                  <option value="active">Active</option>
                  <option value="inactive">Inactive</option>
                </select>
              </div>
              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Contact Persons</h5>

                {contactPersons.map((contact, index) => (
                  <div className="border p-3 mb-3" key={index}>
                    <div className="row">
                      <div className="col-md-6">
                        <label className="form-label">Contact Name</label>
                        <input
                          type="text"
                          name="contactName"
                          value={contact.contactName}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Contact Name"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Job Title</label>
                        <input
                          type="text"
                          name="jobTitle"
                          value={contact.jobTitle}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Job Title"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                          type="email"
                          name="email"
                          value={contact.email}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Email"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Phone</label>
                        <input
                          type="tel"
                          name="phone"
                          value={contact.phone}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Phone"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Department</label>
                        <input
                          type="text"
                          name="department"
                          value={contact.department}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Department"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Sales Representative</label>
                        <input
                          type="text"
                          name="salesRepresentative"
                          value={contact.salesRepresentative}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Sales Representative"
                        />
                      </div>

                      <div className="col-md-12 mt-2 d-flex justify-content-end">
                        {contactPersons.length > 1 && (
                          <button
                            type="button"
                            className="btn btn-danger btn-sm"
                            onClick={() => {
                              const updatedContacts = [...contactPersons];
                              updatedContacts.splice(index, 1);
                              setContactPersons(updatedContacts);
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Add More Button */}
                <div className="mb-3">
                  <button
                    type="button"
                    className="btn btn-primary"
                    onClick={() => {
                      setContactPersons([
                        ...contactPersons,
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    }}
                  >
                    + Add Another Contact
                  </button>
                </div>
              </div>

              {/* Billing Information */}
              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Billing Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Billing Address</label>
                  <textarea className="form-control" rows="3" name="billingAddress" value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Contact Name</label>
                  <input type="text" className="form-control" name="billingContactName" value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Email</label>
                  <input type="email" className="form-control" name="billingEmail" value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Phone</label>
                  <input type="tel" className="form-control" name="billingPhone" value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <select className="form-select" name="currency" value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <select className="form-select" name="preferredPaymentMethod" value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Payment Method</option>
                    <option value="BankTransfer">BankTransfer</option>
                    <option value="CreditCard">CreditCard</option>
                    <option value="Check">Check</option>
                  </select>
                </div>

                {/* Shipping Information */}
                <h5 className="mb-3 mt-4">Shipping Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Shipping Address</label>
                  <textarea className="form-control" rows="3" name="shippingAddress" value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Contact Name</label>
                  <input type="text" className="form-control" name="shippingContactName" value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Email</label>
                  <input type="email" className="form-control" name="shippingEmail" value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Phone</label>
                  <input type="tel" className="form-control" name="shippingPhone" value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <select className="form-select" name="preferredShippingMethod" value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                    <option value="">Select Shipping Method</option>
                    <option value="Standard">Standard</option>
                    <option value="Express">Express</option>
                    <option value="Overnight">Overnight</option>
                    <option value="Ground">Ground</option>
                  </select>
                </div>
                <div className="col-md-12">
                  <label className="form-label">Special Instructions</label>
                  <textarea className="form-control" rows="3" name="specialInstructions" value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                </div>

                {/* Financial Information */}
                <h5 className="mb-3 mt-4">Financial Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Annual Revenue</label>
                  <input type="number" className="form-control" name="annualRevenue" value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Rating</label>
                  <input type="text" className="form-control" name="creditRating" value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Bank Name</label>
                  <input type="text" className="form-control" name="bankName" value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Number</label>
                  <input type="text" className="form-control" name="accountNumber" value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Fiscal Year End</label>
                  <input type="date" className="form-control" name="fiscalYearEnd" value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Financial Contact</label>
                  <input type="text" className="form-control" name="financialContact" value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                </div>

                {/* Ledger Information */}
                <h5 className="mb-3 mt-4">Ledger Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Account Code</label>
                  <input type="text" className="form-control" name="accountCode" value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <select className="form-select" name="accountType" value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="">Select Account Type</option>
                    <option value="AccountsReceivable">AccountsReceivable</option>
                    <option value="AccountsPayable">AccountsPayable</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Opening Balance</label>
                  <input type="number" className="form-control" name="openingBalance" value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Balance Date</label>
                  <input type="date" className="form-control" name="balanceDate" value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Tax Category</label>
                  <select className="form-select" name="taxCategory" value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="standard">Standard Rate</option>
                    <option value="reduced">Reduced Rate</option>
                    <option value="zero">Zero Rate</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Cost Center</label>
                  <input type="text" className="form-control" name="costCenter" value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                </div>

                {/* Additional Information */}
                <h5 className="mb-3 mt-4">Additional Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Payment Terms</label>
                  <select className="form-select" name="paymentTerms" value={additionalInformation.paymentTerms} onChange={handleAdditionalChange}>
                    <option value="net30">Net 30</option>
                    <option value="net60">Net 60</option>
                    <option value="net90">Net 90</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Limit</label>
                  <input type="number" className="form-control" name="creditLimit" value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                </div>
              </div>
              <div className="col-md-12">
                <label className="form-label">Notes</label>
                <textarea className="form-control" rows="3" name="notes" value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
              </div>


              <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>
                <button type="submit" id="btn-All" className="btn btn-dark">Create </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>

  );
}

export default AddClientManagement;









import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import "./Navbar.css";

const Navbar = ({ toggleSidebar }) => {
  const [roledata, setRoleData]= useState("")
  useEffect(()=>{
    const Role= localStorage.getItem("userRole")
     if(Role){
     setRoleData(Role)
     }else{
      setRoleData()
     }
  },[])

  
const handleLogout = () => {
  // Clear entire localStorage
  localStorage.clear();
  // Optionally redirect to login page
  window.location.href = "/"; // ya "/login"
};

  return (
    <>
      <nav className="navbar me-5 d-flex justify-content-end">
        <div className="navbar-left">
          <p className="navbar-logo">logo</p>
          <button onClick={toggleSidebar} className="toggle-button d-block d-md-none">
            <i className="fas fa-bars"></i>
          </button>
        </div>

        <div className="navbar-right">
          <div className="dropdown profile-dropdown d-none d-md-block">
            <div className="profile-trigger" data-bs-toggle="dropdown" aria-expanded="false">
              <div className="profile-info">
                <span className="profile-name">{roledata}</span>
                <span className="profile-role">Project Manager</span>
              </div>
              <div className="profile-avatar">
                <img src="https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654" alt="profile" />
              </div>
            </div>

            <ul className="dropdown-menu dropdown-menu-end profile-menu">
              <li>
              <Link to="/admin/profile" className="dropdown-item" style={{ textDecoration: 'none', color: 'inherit' }}>
                 <i className="fas fa-user" style={{ marginRight: '8px' }}></i>
                   <span>My Profile</span>
                </Link>
              </li>
              <li>
                <Link to="/admin/profile/update" className="dropdown-item">
                  <i className="fas fa-edit"></i>
                  <span>Update Profile</span>
                </Link>
              </li>
              <li>
                <Link to="/admin/profile/password" className="dropdown-item">
                  <i className="fas fa-lock"></i>
                  <span>Change Password</span>
                </Link>
              </li>
              <li><hr className="dropdown-divider"/></li>
              <li onClick={handleLogout}>
                <Link to="/" className="dropdown-item text-danger">
                  <i className="fas fa-sign-out-alt"></i>
                  <span>Logout</span>
                </Link>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </>
  );
};

export default Navbar;









import React from 'react'
import 'bootstrap/dist/css/bootstrap.min.css'

function Profile() {
  return (
    <div className="container py-5">
      <div className="row justify-content-center">
        <div className="col-lg-4 mb-4">
          <div className="card shadow-sm border-0 h-100">
            <div className="card-body text-center">
              <div className="d-flex flex-column align-items-center">
                <img
                  src="https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654"
                  alt="avatar"
                  className="rounded-circle img-fluid border border-3 border-primary mb-3"
                  style={{ width: '140px', height: '140px', objectFit: 'cover' }}
                />
                <h4 className="fw-bold mb-1">John Smith</h4>
                <span className="badge bg-primary mb-2">Full Stack Developer</span>
                <p className="text-muted mb-2"><i className="bi bi-geo-alt-fill me-1"></i>Bay Area, San Francisco, CA</p>
                <div className="d-flex gap-2 justify-content-center mt-2">
                  <button type="button" className="btn btn-primary px-4 shadow-sm">Follow</button>
                  <button type="button" className="btn btn-outline-primary px-4 shadow-sm">Message</button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="col-lg-8">
          <div className="card shadow-sm border-0 mb-4">
            <div className="card-body">
              <div className="row mb-3">
                <div className="col-sm-4 fw-semibold">Full Name</div>
                <div className="col-sm-8 text-muted">John Smith</div>
              </div>
              <div className="row mb-3">
                <div className="col-sm-4 fw-semibold">Email</div>
                <div className="col-sm-8 text-muted">example@example.com</div>
              </div>
              <div className="row mb-3">
                <div className="col-sm-4 fw-semibold">Phone</div>
                <div className="col-sm-8 text-muted">(097) 234-5678</div>
              </div>
              <div className="row mb-3">
                <div className="col-sm-4 fw-semibold">Mobile</div>
                <div className="col-sm-8 text-muted">(098) 765-4321</div>
              </div>
              <div className="row mb-3">
                <div className="col-sm-4 fw-semibold">Address</div>
                <div className="col-sm-8 text-muted">Bay Area, San Francisco, CA</div>
              </div>
            </div>
          </div>
          <div className="row g-3">
            <div className="col-md-6">
              <div className="card shadow-sm border-0 h-100">
                <div className="card-body">
                  <h6 className="mb-3 text-primary fw-bold">Account Status</h6>
                  <div className="mb-2">
                    <span className="fw-semibold">Status:</span> <span className="badge bg-success ms-2">Active</span>
                  </div>
                  <div className="mb-2">
                    <span className="fw-semibold">Department:</span> <span className="text-muted ms-2">Development</span>
                  </div>
                  <div className="mb-2">
                    <span className="fw-semibold">Role:</span> <span className="text-muted ms-2">Full Stack Developer</span>
                  </div>
                  <div className="mb-2">
                    <span className="fw-semibold">Joining Date:</span> <span className="text-muted ms-2">01 Jan 2022</span>
                  </div>
                </div>
              </div>
            </div>
            <div className="col-md-6">
              <div className="card shadow-sm border-0 h-100">
                <div className="card-body">
                  <h6 className="mb-3 text-primary fw-bold">About / Bio</h6>
                  <p className="text-muted mb-0">
                    Passionate developer with 5+ years of experience in building scalable web applications. Loves to work with modern JavaScript frameworks and always eager to learn new technologies.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Profile









import React, { useState, useRef } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';

// Example user data (replace with props or redux in real app)
const userData = {
  permissions: {
    dashboardAccess: true,
    userManagement: true,
    clientManagement: false,
    projectManagement: false,
    designTools: false,
    financialManagement: false,
    reportGeneration: false,
    systemSettings: false
  },
  accessLevel: {
    fullAccess: true,
    limitedAccess: false,
    viewOnly: false
  },
  _id: '68418bc45df221af4efdffee',
  firstName: 'employee',
  lastName: '1',
  email: 'employee@gmail.com',
  phone: '1234567890',
  role: 'employee',
  state: 'California',
  country: 'California',
  assign: 'Production',
  isAdmin: false,
  profileImage: [
    ''
  ],
  googleSignIn: false,
  createdAt: '2025-06-05T12:21:24.100Z',
  updatedAt: '2025-06-05T12:21:24.100Z',
};

function Profile() {
  // Form state
  const [form, setForm] = useState({
    firstName: userData.firstName,
    lastName: userData.lastName,
    email: userData.email,
    phone: userData.phone,
    state: userData.state,
    country: userData.country,
    assign: userData.assign,
    profileImage: userData.profileImage[0] || '',
  });
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const fileInputRef = useRef();

  // Handle form changes
  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'profileImage' && files && files[0]) {
      setForm({ ...form, profileImage: URL.createObjectURL(files[0]) });
    } else {
      setForm({ ...form, [name]: value });
    }
  };

  const handleImageClick = () => {
    fileInputRef.current.click();
  };

  // Handle form submit (simulate update)
  const handleSubmit = (e) => {
    e.preventDefault();
    setMessage('');
    setError('');
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      setMessage('Profile updated successfully!');
    }, 1200);
  };

  // Permissions badges
  const permissionBadges = Object.entries(userData.permissions).map(([key, value]) => (
    <span key={key} className={`badge me-2 mb-1 ${value ? 'bg-success' : 'bg-secondary'}`} title={key.replace(/([A-Z])/g, ' $1')}>
      {key.replace(/([A-Z])/g, ' $1')}
    </span>
  ));
  // Access level badges
  const accessBadges = Object.entries(userData.accessLevel).map(([key, value]) => (
    <span key={key} className={`badge me-2 mb-1 ${value ? 'bg-primary' : 'bg-light text-dark border'}`} title={key.replace(/([A-Z])/g, ' $1')}>
      {key.replace(/([A-Z])/g, ' $1')}
    </span>
  ));

  return (
    <div className="container py-5">
      <div className="row justify-content-center g-4">
        {/* Profile summary */}
        <div className="col-lg-4 mb-4">
          <div className="card border-0 shadow-lg h-100" style={{ background: 'linear-gradient(135deg, #f8fafc 60%, #e0e7ff 100%)' }}>
            <div className="card-body text-center p-4">
              <div className="position-relative d-inline-block mb-3">
                <img
                  src={form.profileImage || 'https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654'}
                  alt="avatar"
                  className="rounded-circle border border-3 border-primary shadow"
                  style={{ width: '140px', height: '140px', objectFit: 'cover', background: '#fff' }}
                />
                <button
                  type="button"
                  className="btn btn-light btn-sm rounded-circle position-absolute bottom-0 end-0 border shadow"
                  style={{ transform: 'translate(25%, 25%)' }}
                  onClick={handleImageClick}
                  title="Change profile picture"
                >
                  <i className="bi bi-pencil-fill"></i>
                </button>
                <input
                  type="file"
                  name="profileImage"
                  accept="image/*"
                  ref={fileInputRef}
                  style={{ display: 'none' }}
                  onChange={handleChange}
                />
              </div>
              <h4 className="fw-bold mb-1">{userData.firstName} {userData.lastName}</h4>
              <span className="badge bg-primary mb-2 text-capitalize">{userData.role}</span>
              <div className="d-flex align-items-center justify-content-center mb-2">
                <i className="bi bi-geo-alt-fill text-secondary me-1"></i>
                <span className="text-muted">{userData.state}, {userData.country}</span>
              </div>
              <div className="mb-2">
                <i className="bi bi-diagram-3-fill text-secondary me-1"></i>
                <span className="fw-semibold">Department:</span> <span className="text-muted ms-1">{userData.assign}</span>
              </div>
              <div className="mb-2">
                <i className="bi bi-person-badge-fill text-secondary me-1"></i>
                <span className="fw-semibold">Status:</span> <span className={`badge ms-2 ${userData.isAdmin ? 'bg-info' : 'bg-success'}`}>{userData.isAdmin ? 'Admin' : 'Active'}</span>
              </div>
              <div className="mb-2">
                <i className="bi bi-google text-secondary me-1"></i>
                <span className="fw-semibold">Google Sign In:</span> <span className={`badge ms-2 ${userData.googleSignIn ? 'bg-success' : 'bg-secondary'}`}>{userData.googleSignIn ? 'Yes' : 'No'}</span>
              </div>
              <div className="mb-2">
                <i className="bi bi-calendar-event text-secondary me-1"></i>
                <span className="fw-semibold">Account Created:</span> <span className="text-muted ms-1">{new Date(userData.createdAt).toLocaleDateString()}</span>
              </div>
              <div className="mb-2 text-start">
                <span className="fw-semibold">Access Level:</span>
                <div className="d-flex flex-wrap mt-1" style={{ gap: '0.25rem' }}>{accessBadges}</div>
              </div>
              <div className="mb-2 text-start">
                <span className="fw-semibold">Permissions:</span>
                <div className="d-flex flex-wrap mt-1" style={{ gap: '0.25rem', maxWidth: 260, overflowX: 'auto' }}>{permissionBadges}</div>
              </div>
            </div>
          </div>
        </div>
        {/* Profile details & update form */}
        <div className="col-lg-8">
          <div className="card border-0 shadow-lg mb-4">
            <div className="card-body p-4">
              <h5 className="mb-4 fw-bold"><i className="bi bi-pencil-square me-2"></i>Update Profile</h5>
              <form onSubmit={handleSubmit} autoComplete="off">
                <div className="row g-3">
                  <div className="col-md-6 form-floating">
                    <input type="text" className="form-control" id="firstName" name="firstName" value={form.firstName} onChange={handleChange} required placeholder="First Name" />
                    <label htmlFor="firstName">First Name</label>
                  </div>
                  <div className="col-md-6 form-floating">
                    <input type="text" className="form-control" id="lastName" name="lastName" value={form.lastName} onChange={handleChange} required placeholder="Last Name" />
                    <label htmlFor="lastName">Last Name</label>
                  </div>
                  <div className="col-md-6 form-floating">
                    <input type="email" className="form-control" id="email" name="email" value={form.email} onChange={handleChange} required placeholder="Email" />
                    <label htmlFor="email">Email</label>
                  </div>
                  <div className="col-md-6 form-floating">
                    <input type="text" className="form-control" id="phone" name="phone" value={form.phone} onChange={handleChange} placeholder="Phone" />
                    <label htmlFor="phone">Phone</label>
                  </div>
                  <div className="col-md-6 form-floating">
                    <input type="text" className="form-control" id="state" name="state" value={form.state} onChange={handleChange} placeholder="State" />
                    <label htmlFor="state">State</label>
                  </div>
                  <div className="col-md-6 form-floating">
                    <input type="text" className="form-control" id="country" name="country" value={form.country} onChange={handleChange} placeholder="Country" />
                    <label htmlFor="country">Country</label>
                  </div>
                  <div className="col-md-6 form-floating">
                    <input type="text" className="form-control" id="assign" name="assign" value={form.assign} onChange={handleChange} placeholder="Department/Assign" />
                    <label htmlFor="assign">Department/Assign</label>
                  </div>
                  <div className="col-md-6 d-flex align-items-center">
                    <label className="form-label me-2 mb-0">Profile Image</label>
                    <input type="file" className="form-control" name="profileImage" accept="image/*" onChange={handleChange} />
                  </div>
                </div>
                {error && <div className="alert alert-danger mt-4 d-flex align-items-center"><i className="bi bi-x-circle-fill me-2"></i>{error}</div>}
                {message && <div className="alert alert-success mt-4 d-flex align-items-center"><i className="bi bi-check-circle-fill me-2"></i>{message}</div>}
                <button type="submit" className="btn btn-primary mt-4 px-4" disabled={loading}>
                  {loading ? <span><span className="spinner-border spinner-border-sm me-2"></span>Updating...</span> : 'Update Profile'}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Profile;



import React, { useState, useRef } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';

const initialUser = {
  _id: '68418bc45df221af4efdffee',
  firstName: 'employee',
  lastName: '1',
  email: 'employee@gmail.com',
  phone: '1234567890',
  role: 'employee',
  state: 'California',
  country: 'California',
  assign: 'Production',
  profileImage: '',
  googleSignIn: false,
  createdAt: '2025-06-05T12:21:24.100Z',
  isAdmin: false,
};

function UpdateProfile() {
  const [form, setForm] = useState(initialUser);
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const fileInputRef = useRef();

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'profileImage' && files && files[0]) {
      setForm({ ...form, profileImage: URL.createObjectURL(files[0]) });
    } else {
      setForm({ ...form, [name]: value });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    setMessage('');
    setError('');
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      setMessage('Profile updated successfully!');
    }, 1200);
  };

  return (
    <div className="container py-5 d-flex justify-content-center align-items-center" style={{ minHeight: '90vh' }}>
      <div className="w-100" style={{ maxWidth: 540 }}>
        <div className="bg-white rounded-4 shadow-sm border p-4 p-md-5">
          <h2 className="fw-bold mb-4 text-primary text-center"><i className="bi bi-pencil-square me-2"></i>Update Profile</h2>
          <form onSubmit={handleSubmit} autoComplete="off">
            <div className="d-flex flex-column align-items-center mb-4">
              <div className="position-relative mb-2">
                <img
                  src={form.profileImage || 'https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654'}
                  alt="Preview"
                  className="rounded-circle border border-2 shadow"
                  style={{ width: 90, height: 90, objectFit: 'cover', background: '#fff' }}
                />
                <input
                  type="file"
                  className="form-control mt-2"
                  name="profileImage"
                  accept="image/*"
                  onChange={handleChange}
                  ref={fileInputRef}
                  style={{ width: 180, margin: '0 auto', display: 'block' }}
                />
              </div>
            </div>
            <div className="row g-4">
              <div className="col-md-6 form-floating">
                <input type="text" className="form-control" id="firstName" name="firstName" value={form.firstName} onChange={handleChange} required placeholder="First Name" />
                <label htmlFor="firstName">First Name</label>
              </div>
              <div className="col-md-6 form-floating">
                <input type="text" className="form-control" id="lastName" name="lastName" value={form.lastName} onChange={handleChange} required placeholder="Last Name" />
                <label htmlFor="lastName">Last Name</label>
              </div>
              <div className="col-md-6 form-floating">
                <input type="email" className="form-control" id="email" name="email" value={form.email} onChange={handleChange} required placeholder="Email" />
                <label htmlFor="email">Email</label>
              </div>
              <div className="col-md-6 form-floating">
                <input type="text" className="form-control" id="phone" name="phone" value={form.phone} onChange={handleChange} placeholder="Phone" />
                <label htmlFor="phone">Phone</label>
              </div>
              <div className="col-md-6 form-floating">
                <input type="text" className="form-control" id="state" name="state" value={form.state} onChange={handleChange} placeholder="State" />
                <label htmlFor="state">State</label>
              </div>
              <div className="col-md-6 form-floating">
                <input type="text" className="form-control" id="country" name="country" value={form.country} onChange={handleChange} placeholder="Country" />
                <label htmlFor="country">Country</label>
              </div>
              <div className="col-md-12 form-floating">
                <input type="text" className="form-control" id="assign" name="assign" value={form.assign} onChange={handleChange} placeholder="Department/Assign" />
                <label htmlFor="assign">Department/Assign</label>
              </div>
              {/* Non-editable fields */}
              <div className="col-md-6 form-floating">
                <input type="text" className="form-control" id="role" name="role" value={form.role} readOnly disabled placeholder="Role" />
                <label htmlFor="role">Role</label>
              </div>
              <div className="col-md-6 d-flex align-items-center">
                <span className={`badge ${form.googleSignIn ? 'bg-success' : 'bg-secondary'} fs-6 px-3 py-2`}><i className="bi bi-google me-1"></i>Google Sign In: {form.googleSignIn ? 'Yes' : 'No'}</span>
              </div>
              <div className="col-md-6 d-flex align-items-center">
                <span className="badge bg-success fs-6 px-3 py-2"><i className="bi bi-check-circle-fill me-1"></i>Status: Active</span>
              </div>
              <div className="col-md-6 d-flex align-items-center">
                <span className="text-secondary small"><i className="bi bi-calendar-event me-1"></i>Account Created: {new Date(form.createdAt).toLocaleDateString('en-GB')}</span>
              </div>
              <div className="col-12 d-flex align-items-center justify-content-end">
                <span className="text-secondary small"><i className="bi bi-hash me-1"></i>User ID: {form._id}</span>
              </div>
            </div>
            {error && <div className="alert alert-danger mt-4 d-flex align-items-center"><i className="bi bi-x-circle-fill me-2"></i>{error}</div>}
            {message && <div className="alert alert-success mt-4 d-flex align-items-center"><i className="bi bi-check-circle-fill me-2"></i>{message}</div>}
            <button type="submit" className="btn btn-primary mt-4 px-4 w-100" style={{ fontWeight: 600, fontSize: '1.1rem' }} disabled={loading}>
              {loading ? <span><span className="spinner-border spinner-border-sm me-2"></span>Updating...</span> : 'Update Profile'}
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UpdateProfile;







import React from 'react'
import 'bootstrap/dist/css/bootstrap.min.css'

function Profile() {
  return (
    <div className="container py-5">
      <div className="row">
        <div className="col-lg-4">
          <div className="card mb-4">
            <div className="card-body text-center">
              <img src="https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654" 
                   alt="avatar" className="rounded-circle img-fluid" style={{ width: '150px',marginLeft:"80px" }} />
              <h5 className="my-3">John Smith</h5>
              <p className="text-muted mb-1">Full Stack Developer</p>
              <p className="text-muted mb-4">Bay Area, San Francisco, CA</p>
              <div className="d-flex justify-content-center mb-2">
                <button type="button" className="btn btn-primary">Follow</button>
                <button type="button" className="btn btn-outline-primary ms-1">Message</button>
              </div>
            </div>
          </div>
        </div>
        <div className="col-lg-8">
          <div className="card mb-4">
            <div className="card-body">
              <div className="row">
                <div className="col-sm-3">
                  <p className="mb-0">Full Name</p>
                </div>
                <div className="col-sm-9">
                  <p className="text-muted mb-0">John Smith</p>
                </div>
              </div>
              <hr />
              <div className="row">
                <div className="col-sm-3">
                  <p className="mb-0">Email</p>
                </div>
                <div className="col-sm-9">
                  <p className="text-muted mb-0">example@example.com</p>
                </div>
              </div>
              <hr />
              <div className="row">
                <div className="col-sm-3">
                  <p className="mb-0">Phone</p>
                </div>
                <div className="col-sm-9">
                  <p className="text-muted mb-0">(097) 234-5678</p>
                </div>
              </div>
              <hr />
              <div className="row">
                <div className="col-sm-3">
                  <p className="mb-0">Mobile</p>
                </div>
                <div className="col-sm-9">
                  <p className="text-muted mb-0">(098) 765-4321</p>
                </div>
              </div>
              <hr />
              <div className="row">
                <div className="col-sm-3">
                  <p className="mb-0">Address</p>
                </div>
                <div className="col-sm-9">
                  <p className="text-muted mb-0">Bay Area, San Francisco, CA</p>
                </div>
              </div>
            </div>
          </div>
          <div className="row">
            <div className="col-md-6">
              <div className="card mb-4 mb-md-0">
                <div className="card-body">
                  <p className="mb-4"><span className="text-primary font-italic me-1">Skills</span></p>
                  <p className="mb-1">Web Design</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '80%' }} aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Website Markup</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '72%' }} aria-valuenow="72" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">One Page</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '89%' }} aria-valuenow="89" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Mobile Template</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '55%' }} aria-valuenow="55" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Backend API</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '66%' }} aria-valuenow="66" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                </div>
              </div>
            </div>
            <div className="col-md-6">
              <div className="card mb-4 mb-md-0">
                <div className="card-body">
                  <p className="mb-4"><span className="text-primary font-italic me-1">Projects</span></p>
                  <p className="mb-1">E-commerce Website</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '90%' }} aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Social Media App</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '85%' }} aria-valuenow="85" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Portfolio Website</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '75%' }} aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Blog Platform</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '80%' }} aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                  <p className="mb-1">Task Management System</p>
                  <div className="progress rounded mb-2" style={{ height: '5px' }}>
                    <div className="progress-bar" role="progressbar" style={{ width: '70%' }} aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Profile

















import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import "./Navbar.css";

const Navbar = ({ toggleSidebar }) => {
  const [roledata, setRoleData]= useState("")
  useEffect(()=>{
    const Role= localStorage.getItem("userRole")
     if(Role){
     setRoleData(Role)
     }else{
      setRoleData()
     }
  },[])

  
const handleLogout = () => {
  // Clear entire localStorage
  localStorage.clear();
  // Optionally redirect to login page
  window.location.href = "/"; // ya "/login"
};

  return (
    <>
      <nav className="navbar me-5 d-flex justify-content-end">
        <div className="navbar-left">
          <p className="navbar-logo">logo</p>
          <button onClick={toggleSidebar} className="toggle-button d-block d-md-none">
            <i className="fas fa-bars"></i>
          </button>
        </div>

        <div className="navbar-right">
          <div className="dropdown profile-dropdown d-none d-md-block">
            <div className="profile-trigger" data-bs-toggle="dropdown" aria-expanded="false">
              <div className="profile-info">
                <span className="profile-name">{roledata}</span>
                <span className="profile-role">Project Manager</span>
              </div>
              <div className="profile-avatar">
                <img src="https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654" alt="profile" />
              </div>
            </div>

            <ul className="dropdown-menu dropdown-menu-end profile-menu">
              <li>
              <Link to="/admin/profile" className="dropdown-item" style={{ textDecoration: 'none', color: 'inherit' }}>
                 <i className="fas fa-user" style={{ marginRight: '8px' }}></i>
                   <span>My Profile</span>
                </Link>
              </li>
              <li>
                <Link to="/admin/profile/update" className="dropdown-item">
                  <i className="fas fa-edit"></i>
                  <span>Update Profile</span>
                </Link>
              </li>
              <li>
                <Link to="/admin/profile/password" className="dropdown-item">
                  <i className="fas fa-lock"></i>
                  <span>Change Password</span>
                </Link>
              </li>
              <li><hr className="dropdown-divider"/></li>
              <li onClick={handleLogout}>
                <Link to="/" className="dropdown-item text-danger">
                  <i className="fas fa-sign-out-alt"></i>
                  <span>Logout</span>
                </Link>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </>
  );
};

export default Navbar;






import React, { useState, useRef } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';

// Example user data (replace with props or redux in real app)
const userData = {
  permissions: {
    dashboardAccess: true,
    userManagement: true,
   
  },
  accessLevel: {
    fullAccess: true,
    limitedAccess: false,
    viewOnly: false
  },
  _id: '68418bc45df221af4efdffee',
  firstName: 'employee',
  lastName: '1',
  email: 'employee@gmail.com',
  phone: '1234567890',
  role: 'employee',
  state: 'California',
  country: 'California',
  assign: 'Production',
  isAdmin: false,
  profileImage: [
    ''
  ],
  googleSignIn: false,
  createdAt: '2025-06-05T12:21:24.100Z',
  updatedAt: '2025-06-05T12:21:24.100Z',
};


// // Example user data (replace with props or redux in real app)
const Data = {
  permissions: {
    dashboardAccess: true,
    userManagement: true,
    clientManagement: false,
    projectManagement: false,
    designTools: false,
    financialManagement: false,
    reportGeneration: false,
    systemSettings: false
  },
  accessLevel: {
    fullAccess: true,
    limitedAccess: false,
    viewOnly: false
  },
  _id: '68418bc45df221af4efdffee',
  firstName: 'employee',
  lastName: '1',
  email: 'employee@gmail.com',
  phone: '1234567890',
  role: 'employee',
  state: 'California',
  country: 'California',
  assign: 'Production',
  isAdmin: false,
  profileImage: [
    ''
  ],
  googleSignIn: false,
  createdAt: '2025-06-05T12:21:24.100Z',
  updatedAt: '2025-06-05T12:21:24.100Z',
};
function Profile() {
  // Form state
  const [form, setForm] = useState({
    firstName: userData.firstName,
    lastName: userData.lastName,
    email: userData.email,
    phone: userData.phone,
    state: userData.state,
    country: userData.country,
    assign: userData.assign,
    profileImage: userData.profileImage[0] || '',
  });
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const fileInputRef = useRef();

  // Handle form changes
  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === 'profileImage' && files && files[0]) {
      setForm({ ...form, profileImage: URL.createObjectURL(files[0]) });
    } else {
      setForm({ ...form, [name]: value });
    }
  };

  const handleImageClick = () => {
    fileInputRef.current.click();
  };

  // Handle form submit (simulate update)
  const handleSubmit = (e) => {
    e.preventDefault();
    setMessage('');
    setError('');
    setLoading(true);
    setTimeout(() => {
      setLoading(false);
      setMessage('Profile updated successfully!');
    }, 1200);
  };

  // Permissions badges
  const permissionBadges = Object.entries(userData.permissions).map(([key, value]) => (
    <span key={key} className={`badge me-2 mb-1 ${value ? 'bg-success' : 'bg-secondary'}`} title={key.replace(/([A-Z])/g, ' $1')}>
      {key.replace(/([A-Z])/g, ' $1')}
    </span>
  ));
  // Access level badges
  const accessBadges = Object.entries(userData.accessLevel).map(([key, value]) => (
    <span key={key} className={`badge me-2 mb-1 ${value ? 'bg-primary' : 'bg-light text-dark border'}`} title={key.replace(/([A-Z])/g, ' $1')}>
      {key.replace(/([A-Z])/g, ' $1')}
    </span>
  ));




  const createdDate = new Date(userData.createdAt).toLocaleDateString('en-GB');
  const updatedDate = new Date(userData.updatedAt).toLocaleDateString('en-GB');

  // Access Level list
  const accessLevels = Object.entries(userData.accessLevel).map(([key, value]) => (
    <li key={key} className="mb-2">
      <span className={`badge px-3 py-2 fs-6 d-flex align-items-center gap-2 ${value ? 'bg-primary' : 'bg-light text-dark border'}`}
        title={key.replace(/([A-Z])/g, ' $1').toLowerCase()}>
        <i className="bi bi-shield-lock-fill"></i>
        {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
      </span>
    </li>
  ));

  // Permissions list
  const permissions = Object.entries(userData.permissions).map(([key, value]) => (
    <li key={key} className="mb-2">
      <span className={`badge px-3 py-2 fs-6 d-flex align-items-center gap-2 ${value ? 'bg-success' : 'bg-secondary'}`}
        title={key.replace(/([A-Z])/g, ' $1').toLowerCase()}>
        <i className="bi bi-check2-circle"></i>
        {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
      </span>
    </li>
  ));

  return (
    <>
      <div className="container py-2">
        <div className="row justify-content-center g-4">
          {/* Profile summary */}
          <div className="col-lg-4 mb-4">
            <div className="card border-0 shadow-lg " style={{ background: 'linear-gradient(135deg, #f8fafc 60%, #e0e7ff 100%)', borderRadius: '1.5rem' }}>
              <div className="card-body text-center p-4 d-flex flex-column align-items-center justify-content-between h-100">
                <div className="position-relative d-inline-block mb-3">
                  <img
                    src={form.profileImage || 'https://wac-cdn.atlassian.com/dam/jcr:ba03a215-2f45-40f5-8540-b2015223c918/Max-R_Headshot%20(1).jpg?cdnVersion=2654'}
                    alt="avatar"
                    className="rounded-circle border border-3 border-primary shadow"
                    style={{ width: '140px', height: '140px', objectFit: 'cover', background: '#fff', boxShadow: '0 4px 24px rgba(0,0,0,0.08)' }}
                  />
                </div>
                <h4 className="fw-bold mb-1 mt-2">{userData.firstName} {userData.lastName}</h4>
                <div className="mb-2">
                  <i className="bi bi-envelope-at me-1"></i>
                  <span className="fw-semibold">{Data.email}</span>
                </div>
                <div className="mb-2">
                  <i className="bi bi-telephone me-1"></i>
                  <span className="fw-semibold">{Data.phone}</span>
                </div>
                <div className="d-flex flex-wrap gap-2 justify-content-center mt-3">
                  <span className="small text-secondary"><i className="bi bi-clock-history me-1"></i>Last Updated: {updatedDate}</span>
                  <span className="small text-secondary"><i className="bi bi-hash me-1"></i>User ID: {Data._id}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Profile details & update form */}
          <div className="col-lg-8">
            <div className="card border-0 shadow-lg mb-4" style={{ background: 'linear-gradient(135deg, #f8fafc 60%, #e0e7ff 100%)', borderRadius: '1.5rem' }}>
              <div className="card-body p-4">
                <h5 className="mb-4 fw-bold d-flex align-items-center"><i className="bi bi-pencil-square me-2"></i>Profile Details</h5>
                {/* User Details Section */}
                <div className="row mb-3 g-3">
                  <div className="col-md-6">
                    <div className="mb-3">
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-envelope-at me-2 text-primary"></i>
                        <span className="fw-semibold">{Data.email}</span>
                      </div>
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-telephone me-2 text-primary"></i>
                        <span className="fw-semibold">{Data.phone}</span>
                      </div>
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-geo-alt me-2 text-primary"></i>
                        <span className="fw-semibold">{Data.state}, {Data.country}</span>
                      </div>
                      <div className="mb-2">
                        <span className="fw-semibold">Access Level:</span>
                        <span className="badge bg-primary ms-2 text-capitalize">Full Access</span>
                      </div>
                      <div className="mb-2 text-muted small">
                        {Data.role && <span className="badge bg-info text-dark me-1 text-capitalize">{Data.role}</span>}
                      </div>
                    </div>
                  </div>
                  <div className="col-md-6">
                    <div className="mb-3">
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-google me-2 text-primary"></i>
                        <span className="fw-semibold">Google Sign In:</span>
                        <span className={`badge ms-2 ${Data.googleSignIn ? 'bg-success' : 'bg-secondary'}`}>{Data.googleSignIn ? 'Yes' : 'No'}</span>
                      </div>
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-diagram-3-fill me-2 text-primary"></i>
                        <span className="fw-semibold">Department:</span>
                        <span className="text-muted ms-1">{Data.assign}</span>
                      </div>
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-check-circle-fill me-2 text-primary"></i>
                        <span className="fw-semibold">Status:</span>
                        <span className="badge ms-2 bg-success">Active</span>
                      </div>
                      <div className="d-flex align-items-center mb-2">
                        <i className="bi bi-calendar-event me-2 text-primary"></i>
                        <span className="fw-semibold">Account Created:</span>
                        <span className="text-muted ms-1">{createdDate}</span>
                      </div>
                      <div>
                        <h5 className="fw-bold mb-3 d-flex align-items-center"><i className="bi bi-check2-circle me-2"></i>Permissions</h5>
                        <ul className="list-unstyled d-flex flex-wrap gap-2 mb-0">
                          {permissions}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <div className=" mt-4 border-0 ">
                  <div className="card-body p-4">
                    <h5 className="fw-bold mb-2 d-flex align-items-center"><i className="bi bi-info-circle me-2"></i>About</h5>
                    <p className="text-muted mb-2">This is a placeholder for user bio or additional information. You can add more details about the employee here.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>


    </>
  );
}

export default Profile;


import React, { useRef, useState } from "react";
import { Card, Row, Col, Button, Table, OverlayTrigger, Tooltip, Modal, Badge } from "react-bootstrap";
import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
import { FaUpload, FaFileExcel, FaTimes, FaBarcode, FaUser, FaClock, FaCalendarAlt, FaInfoCircle, FaPlus } from "react-icons/fa";
import { useDispatch } from "react-redux";

const OvervieJobsTracker = ({ onClose }) => {
  const fileInputRef = useRef(null);
  const [showModal, setShowModal] = useState(false);
  const [modalContent, setModalContent] = useState("");

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      alert(`Selected file: ${file.name}`);
    }
  };

  const handleShowDetails = (title) => {
    setModalContent(title);
    setShowModal(true);
  };

  const assignments = [
    {
      date: "25/03/2025",
      title: "Design Brief",
      assignedTo: "Designer",
      timeSpent: "3:00",
    },
    {
      date: "25/03/2025",
      title: "Color Palette Selection",
      assignedTo: "Designer",
      timeSpent: "3:00",
    },
    {
      date: "25/03/2025",
      title: "Client Review",
      assignedTo: "Designer",
      timeSpent: "3:00",
    },
  ];

  // Sample job data
  const jobs = {
    jobNo: "Banner Design - Spring Campaign",
    status: "In Progress",
    dueDate: "April 25, 2025",
    instructions:
      "Create a visually appealing banner for the Spring Sale. Use pastel color palette and add product highlights.",
    brand: "BrandA",
    subBrand: "SubBrandA",
    flavour: "Vanilla",
    packType: "Box",
    packSize: "500g",
    priority: "High",
  };

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mode
  const location = useLocation();
  const { job } = location.state || {};

  // Responsive two-column grid for job details
  const jobDetails = [
    { label: "Job No", value: jobs.jobNo, icon: <FaCalendarAlt className="me-2 text-primary" /> },
    { label: "Status", value: job?.Status || jobs.status, icon: <FaInfoCircle className="me-2 text-primary" /> },
    { label: "Due Date", value: job?.createdAt ? new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/') : jobs.dueDate, icon: <FaCalendarAlt className="me-2 text-primary" /> },
    { label: "Brand", value: job?.brandName, icon: <FaUser className="me-2 text-primary" /> },
    { label: "Flavour", value: job?.flavour, icon: <FaUser className="me-2 text-primary" /> },
    { label: "SubBrand", value: job?.subBrand, icon: <FaUser className="me-2 text-primary" /> },
    { label: "Pack Type", value: job?.packType, icon: <FaUser className="me-2 text-primary" /> },
    { label: "Pack Size", value: job?.packSize, icon: <FaUser className="me-2 text-primary" /> },
    { label: "Priority", value: job?.priority, icon: <FaUser className="me-2 text-primary" /> },
    { label: "Project Name", value: job?.packType, icon: <FaBarcode className="me-2 text-primary" /> },
    { label: "Assign", value: job?.assign, icon: <FaUser className="me-2 text-primary" /> },
    { label: "Total Time", value: job?.totalTime, icon: <FaClock className="me-2 text-primary" /> },
    { label: "Project Barcode", value: job?.barcode, icon: <FaBarcode className="me-2 text-primary" /> },
  ];

  return (
    <div className="container py-4 px-1 px-md-4">
      {/* Modern Header */}
      

      {/* Job Details Grid */}
      <Card className="border-0 shadow-sm rounded-4 mb-4 p-4">
      <div className="d-flex justify-content-between align-items-center mb-4 p-3 rounded-4 shadow-sm" style={{ background: "linear-gradient(90deg, #4e54c8 0%, #8f94fb 100%)" }}>
        <div className="d-flex align-items-center gap-2">
          <FaInfoCircle className="text-white" size={28} />
          <h2 className="mb-0 fw-bold text-white" style={{ letterSpacing: 1 }}>Job Details</h2>
        </div>
        <Link to={"/admin/JobTracker"}>
          <Button variant="light" size="sm" className="rounded-circle d-flex align-items-center justify-content-center shadow-sm border-0" style={{ width: 36, height: 36 }}>
            <FaTimes className="text-primary" size={18} />
          </Button>
        </Link>
      </div>
        <Row className="g-4">
          {jobDetails.map((item, idx) => (
            <Col xs={12} md={6} key={idx}>
              <div className="d-flex align-items-center bg-light rounded-3 p-3 mb-2 shadow-sm h-100">
                {item.icon}
                <span className="fw-semibold text-secondary" style={{ minWidth: 120 }}>{item.label}:</span>
                <span className="ms-2 fs-6 text-dark">{item.value || <span className="text-muted">-</span>}</span>
              </div>
            </Col>
          ))}
        </Row>
        {/* Instructions Section */}
        <div className="mt-4 border-top pt-3">
          <h5 className="fw-bold text-primary mb-2">Instructions</h5>
          <div className="fs-6 text-dark">{jobs.instructions}</div>
        </div>
      </Card>

      {/* Assignments Table Section */}
      {/* <Card className="border-0 shadow-sm rounded-4 mb-4 p-4">
        <div className="d-flex justify-content-between align-items-center mb-3">
          <h5 className="fw-bold text-danger mb-0">Assignments</h5>
          <Button variant="primary" size="sm" className="d-flex align-items-center gap-1 shadow-sm" style={{ borderRadius: 20 }}>
            <FaPlus /> Add Assignment
          </Button>
        </div>
        <Table responsive hover className="align-middle bg-white rounded overflow-hidden" style={{ fontSize: "1rem" }}>
          <thead className="table-light">
            <tr>
              <th>Date</th>
              <th>Instruction</th>
              <th>Assigned To</th>
              <th>Time Spent</th>
              <th>Uploaded File/Link</th>
            </tr>
          </thead>
          <tbody>
            {assignments.map((assignment, index) => (
              <tr key={index} className={index % 2 === 0 ? "bg-light" : ""}>
                <td>{assignment.date}</td>
                <td>
                  <OverlayTrigger placement="top" overlay={<Tooltip>Click for details</Tooltip>}>
                    <a
                      href="#"
                      className="text-decoration-none text-primary fw-semibold"
                      onClick={(e) => {
                        e.preventDefault();
                        handleShowDetails(assignment.title);
                      }}
                      style={{ cursor: "pointer" }}
                    >
                      {assignment.title}
                    </a>
                  </OverlayTrigger>
                </td>
                <td>
                  <Badge bg="info" className="text-dark px-3 py-1 rounded-pill shadow-sm" style={{ fontSize: "0.95em" }}>{assignment.assignedTo}</Badge>
                </td>
                <td>
                  <span className="d-flex align-items-center gap-1">
                    <FaClock className="text-primary" /> {assignment.timeSpent}
                  </span>
                </td>
                <td className="d-flex gap-2 align-items-center">
                  <OverlayTrigger placement="top" overlay={<Tooltip>Upload File</Tooltip>}>
                    <Button size="sm" variant="outline-primary" onClick={() => fileInputRef.current.click()}>
                      <FaUpload />
                    </Button>
                  </OverlayTrigger>
                  <input type="file" ref={fileInputRef} style={{ display: "none" }} onChange={handleFileChange} />
                  <OverlayTrigger placement="top" overlay={<Tooltip>Export to Excel</Tooltip>}>
                    <Button size="sm" variant="outline-success" onClick={() => alert("Excel export functionality")}> <FaFileExcel /> </Button>
                  </OverlayTrigger>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card> */}

      {/* Assignment Details Modal */}
      {/* <Modal show={showModal} onHide={() => setShowModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Assignment Details</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p>{modalContent}</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal> */}
    </div>
  );
};

export default OvervieJobsTracker;













import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch, useSelector } from 'react-redux';
import { fetchusers, fetchusersById, updateusers } from '../../../redux/slices/userSlice';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const { user } = location.state || {};
  const userId = location.state?.id;
    console.log("hhhhhhhhhh", user);

    const { userAll, loading, error } = useSelector((state) => state.user);
  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    password: '',
    passwordConfirm: '',
    role: '',
    roleDescription: '',
    assign: 'Not Assign',
    state: '',
    country: '',
    image: null,
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: ''
  });

  const handleInputChange = (e) => {
    const { name, value, type, files } = e.target;
    if (type === 'file') {
      setFormData(prev => ({
        ...prev,
        [name]: files[0]
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  useEffect(() => {
    if (user) {
      let parsedPermissions = {};
      let parsedAccessLevel = 'fullAccess';

      try {
        parsedPermissions = typeof user.permissions === 'string'
          ? JSON.parse(user.permissions)
          : user.permissions || {};

        const accessLevelData = typeof user.accessLevel === 'string'
          ? JSON.parse(user.accessLevel)
          : {};

        parsedAccessLevel = Object.keys(accessLevelData).find(key => accessLevelData[key]) || 'fullAccess';
      } catch (error) {
        console.error('Error parsing permissions or access level:', error);
      }

      setFormData({
         _id: user._id || '',  
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        phone: user.phone || '',
        password: '',
        passwordConfirm: '',
        state: user.state || '',
        country: user.country || '',
        assign: user.assign || 'Not Assign',
        image: user.image || null,
        role: user.role?.charAt(0).toUpperCase() + user.role?.slice(1).toLowerCase() || '',
        roleDescription: user.roleDescription || '',
        permissions: {
          dashboardAccess: false,
          clientManagement: false,
          projectManagement: false,
          designTools: false,
          financialManagement: false,
          userManagement: false,
          reportGeneration: false,
          systemSettings: false,
          ...parsedPermissions
        },
        accessLevel: parsedAccessLevel
      });

    }
  }, [user]);

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedpermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );
    setFormData(prev => ({
      ...prev,
      permissions: updatedpermissions
    }));
  };

  const handleaccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };
  
const handleSubmit = (e) => {
  e.preventDefault();
  if (formData.password !== formData.passwordConfirm) {
    toast.error('Passwords do not match!');
    return;
  }
  const filteredpermissions = Object.fromEntries(
    Object.entries(formData.permissions).filter(([_, value]) => value === true)
  );
  const payload = {
    _id: formData._id,
    firstName: formData.firstName,
    lastName: formData.lastName,
    email: formData.email,
    phone: formData.phone,
    password: formData.password,
    state: formData.state,
    country: formData.country,
    assign: formData.assign,
    image: formData.image,
    role: formData.role,
    roleDescription: formData.roleDescription,
    permissions: filteredpermissions,
    accessLevel: formData.accessLevel
  };
  console.log('Payload to be sent hh:', payload);

  if (formData._id) {
    dispatch(fetchusersById({ _id: formData._id, data: payload }))
      .unwrap()
      .then(() => {
        toast.success("user updated successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchusers());
      })
      .catch(() => {
        toast.error("Failed to update user!");
      });
  } else {
    dispatch(createuser(payload))
      .unwrap()
      .then(() => {
        toast.success("user created successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchProject());
      })
      .catch(() => {
        toast.error("Error creating user");
      });
  }
};

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const filteredpermissions = Object.fromEntries(
  //     Object.entries(formData.permissions).filter(([_, value]) => value === true)
  //   );

  //   const payload = {
  //     role: formData.role,
  //     roleDescription: formData.roleDescription,
  //     permissions: filteredpermissions,
  //     accessLevel: formData.accessLevel
  //   };

  //   console.log('Payload to be sent:', payload);
  //   try {
  //     await axios.post('/api/roles', payload);
  //     navigate(-1);
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('Failed to create role. Please try again.');
  //   }
  // };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New User</h5>
          <form onSubmit={handleSubmit}>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">First Name</label>
                <input type="text" className="form-control" name="firstName" value={formData.firstName} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Last Name</label>
                <input type="text" className="form-control" name="lastName" value={formData.lastName} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Email</label>
                <input type="email" className="form-control" name="email" value={formData.email} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Phone</label>
                <input type="text" className="form-control" name="phone" value={formData.phone} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Password</label>
                <input type="password" className="form-control" name="password" value={formData.password} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Confirm Password</label>
                <input type="password" className="form-control" name="passwordConfirm" value={formData.passwordConfirm} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">State</label>
                <input type="text" className="form-control" name="state" value={formData.state} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Country</label>
                <input type="text" className="form-control" name="country" value={formData.country} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Assign</label>
                <select className="form-select" name="assign" value={formData.assign} onChange={handleInputChange} required>
                  <option value="Not Assign">Not Assign</option>
                  <option value="Production">Production</option>
                  <option value="Employee">Employee</option>
                  <option value="Client">Client</option>
                  <option value="Admin">Admin</option>
                </select>
              </div>
              <div className="col-md-6">
                <label className="form-label">Profile Image</label>
                <input type="file" className="form-control" name="image" accept="image/*" onChange={handleInputChange} />
                {formData.image && (
                  <img src={typeof formData.image === 'string' ? formData.image : URL.createObjectURL(formData.image)} alt="Preview" className="img-thumbnail mt-2" style={{ maxWidth: '120px' }} />
                )}
              </div>
            </div>
            <div className="mb-3">
              <label className="form-label">Role Description</label>
              <textarea
                className="form-control"
                name="roleDescription"
                value={formData.roleDescription}
                onChange={handleInputChange}
                placeholder="Brief description of the role"
                rows="3" />
            </div>

            <div className="mb-4">
              <label className="form-label">permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleaccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create User</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;













import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch, useSelector } from 'react-redux';
import { fetchusers, fetchusersById, updateusers } from '../../../redux/slices/userSlice';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const { user } = location.state || {};
  const userId = location.state?.id;
    console.log("hhhhhhhhhh", user);

    const { userAll, loading, error } = useSelector((state) => state.user);
  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [formData, setFormData] = useState({
    role: '',
    roleDescription: '',
    assign:'Not Assign',
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: ''
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  useEffect(() => {
    if (user) {
      let parsedPermissions = {};
      let parsedAccessLevel = 'fullAccess';

      try {
        parsedPermissions = typeof user.permissions === 'string'
          ? JSON.parse(user.permissions)
          : user.permissions || {};

        const accessLevelData = typeof user.accessLevel === 'string'
          ? JSON.parse(user.accessLevel)
          : {};

        parsedAccessLevel = Object.keys(accessLevelData).find(key => accessLevelData[key]) || 'fullAccess';
      } catch (error) {
        console.error('Error parsing permissions or access level:', error);
      }

      setFormData({
         _id: user._id || '',  
        role: user.role?.charAt(0).toUpperCase() + user.role?.slice(1).toLowerCase() || '',
        roleDescription: user.roleDescription || '',
        permissions: {
          dashboardAccess: false,
          clientManagement: false,
          projectManagement: false,
          designTools: false,
          financialManagement: false,
          userManagement: false,
          reportGeneration: false,
          systemSettings: false,
          ...parsedPermissions
        },
        accessLevel: parsedAccessLevel
      });

    }
  }, [user]);

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedpermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );
    setFormData(prev => ({
      ...prev,
      permissions: updatedpermissions
    }));
  };

  const handleaccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };
  
const handleSubmit = (e) => {
  e.preventDefault();
  const filteredpermissions = Object.fromEntries(
    Object.entries(formData.permissions).filter(([_, value]) => value === true)
  );
  const payload = {
    _id: formData._id,
    role: formData.role,
    roleDescription: formData.roleDescription,
    permissions: filteredpermissions,
    accessLevel: formData.accessLevel
  };
  console.log('Payload to be sent hh:', payload);

  if (formData._id) {
    dispatch(fetchusersById({ _id: formData._id, data: payload }))
      .unwrap()
      .then(() => {
        toast.success("user updated successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchusers());
      })
      .catch(() => {
        toast.error("Failed to update user!");
      });
  } else {
    dispatch(createuser(payload))
      .unwrap()
      .then(() => {
        toast.success("user created successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchProject());
      })
      .catch(() => {
        toast.error("Error creating user");
      });
  }
};

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const filteredpermissions = Object.fromEntries(
  //     Object.entries(formData.permissions).filter(([_, value]) => value === true)
  //   );

  //   const payload = {
  //     role: formData.role,
  //     roleDescription: formData.roleDescription,
  //     permissions: filteredpermissions,
  //     accessLevel: formData.accessLevel
  //   };

  //   console.log('Payload to be sent:', payload);
  //   try {
  //     await axios.post('/api/roles', payload);
  //     navigate(-1);
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('Failed to create role. Please try again.');
  //   }
  // };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New Role</h5>
          <form onSubmit={handleSubmit}>
            <div className="mb-3">
              <label className="form-label">Role Name</label>
              <select
                className="form-select"
                name="role"
                value={formData.role}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a role</option>
                <option value="Admin">Admin</option>
                <option value="Client">Client</option>
                <option value="Production">Production</option>
                <option value="Employee">Employee</option>
              </select>
            </div>


            <div className="mb-3">
              <label className="form-label">Role Description</label>
              <textarea
                className="form-control"
                name="roleDescription"
                value={formData.roleDescription}
                onChange={handleInputChange}
                placeholder="Brief description of the role"
                rows="3" />
            </div>

            <div className="mb-4">
              <label className="form-label">permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleaccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create Role</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;




































// import React, { useRef } from 'react';
// import { Card, Row, Col, Button, ProgressBar, Table } from 'react-bootstrap';
// import { Link } from 'react-router-dom';
// import { FaPlus, FaUpload } from "react-icons/fa";

// const OvervieJobsTracker = ({ onClose }) => {
//   const fileInputRef = useRef(null);

//   const handleFileChange = (e) => {
//     const file = e.target.files[0];
//     if (file) {
//       alert(`Selected file: ${file.name}`);
//       // Aap apni file handling logic yahan likh sakte hain
//     }
//   };

//   const assignments = [
//     {
//       date: '25/03/2025',
//       title: '',
//       assignedTo: 'Designer',
//       timeSpent: '3:00',
//     },
//     {
//       date: '25/03/2025',
//       title: '',
//       assignedTo: 'Designer',
//       timeSpent: '3:00',
//     },
//     {
//       date: '25/03/2025',
//       title: '',
//       assignedTo: 'Designer',
//       timeSpent: '3:00',
//     },
//   ];

//   return (
//     <div className="container mt-5">
//       <Card className="shadow-lg p-4 border-0 rounded-4">
//         <div className="d-flex justify-content-between align-items-center mb-4">
//           <h4 className="mb-0 fw-bold text-primary">Job Details</h4>
//           <Link to={"/JobTracker"}>
//             <Button variant="outline-secondary" size="sm" onClick={onClose}>Close</Button>
//           </Link>
//         </div>

//         <Row className="mb-4">
//           <Col md={6}>
//             <p><strong>Job No:</strong><br />Banner Design - Spring Campaign</p>
//           </Col>
//           <Col md={6}>
//             <p><strong>Status:</strong><br />In Progress</p>
//           </Col>
//           <Col md={6}>
//             <p><strong>Due Date:</strong><br />April 25, 2025</p>
//           </Col>
//           <Col md={12}>
//             <p><strong>Instructions:</strong><br />Create a visually appealing banner for the Spring Sale. Use pastel color palette and add product highlights.</p>
//           </Col>
//         </Row>

//         <h5 className="fw-bold text-primary mb-3">Progress</h5>

//         <Row className="mb-4">
//           <Col md={12}>
//             <Card className="p-3 text-center border-0 shadow-sm">
//               <h6 className="mb-2">Job Progress</h6>
//               <ProgressBar now={45} variant="info" />
//               <small className="text-muted mt-1 d-block">45% Completed</small>
//             </Card>
//           </Col>
//         </Row>

//         <h5 className="fw-bold text-danger mb-3">Assignments:</h5>
//         <Table responsive hover className="align-middle bg-white rounded shadow-sm overflow-hidden">
//           <thead className="table-light">
//             <tr>
//               <th className="text-nowrap">Date</th>
//               <th className="text-nowrap">Instruction</th>
//               <th className="text-nowrap">Assigned To</th>
//               <th className="text-nowrap">Time Spent</th>
//               <th className="text-nowrap">Uploaded File/Link</th>
//             </tr>
//           </thead>
//           <tbody>
//             {assignments.map((assignment, index) => (
//               <tr key={index}>
//                 <td>{assignment.date}</td>
//                 <td>
//                   <a
//                     href="#"
//                     className=" text-decoration-none"
//                     onClick={(e) => {
//                       e.preventDefault();
//                       alert(`Details for: ${assignment.title}`);
//                     }}
//                   >
//                     {assignment.title} - wasaadasdadasdsa
//                   </a>
//                 </td>
//                 <td className="">{assignment.assignedTo}</td>
//                 <td className="">{assignment.timeSpent}</td>
             
//                 <td className="d-flex gap-2">
//                   <input
//                     type="file"
//                     ref={fileInputRef}
//                     style={{ display: 'none' }}
//                     onChange={handleFileChange}
//                   />

//                   <Button
//                     size="sm"
//                     variant="dark"
//                     className="me-2"
//                     onClick={() => {
//                       const workbook = XLSX.utils.book_new();
//                       const worksheet = XLSX.utils.json_to_sheet(jobs.map(job => ({
//                         'Job #': job.id,
//                         'BrandName': job.brandName,
//                         'SubBrand': job.subBrand,
//                         'Flavour': job.flavour,
//                         'PackType': job.packType,
//                         'PackSize': job.packSize,
//                         'PackCode': job.packCode,
//                         'Deadline': job.deadline,
//                         'Brief': job.brief,
//                         'Status': job.status
//                       })));
//                       XLSX.utils.book_append_sheet(workbook, worksheet, 'Jobs');
//                       XLSX.writeFile(workbook, 'jobs_data.xlsx');
//                     }}
//                   >
//                     <FaUpload className="me-1" />
//                     Excel
//                   </Button>
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </Table>
//       </Card>
//     </div>
//   );
// };

// export default OvervieJobsTracker;








import React, { useRef } from "react";
import { Card, Row, Col, Button, ProgressBar, Table } from "react-bootstrap";
import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
import { FaUpload } from "react-icons/fa";
import { useDispatch } from "react-redux";

const OvervieJobsTracker = ({ onClose }) => {
  const fileInputRef = useRef(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      alert(`Selected file: ${file.name}`);
    }
  };

  const assignments = [
    {
      date: "25/03/2025",
      title: "Design Brief",
      assignedTo: "Designer",
      timeSpent: "3:00",
    },
    {
      date: "25/03/2025",
      title: "Color Palette Selection",
      assignedTo: "Designer",
      timeSpent: "3:00",
    },
    {
      date: "25/03/2025",
      title: "Client Review",
      assignedTo: "Designer",
      timeSpent: "3:00",
    },
  ];

  // Sample job data
  const jobs = {
    jobNo: "Banner Design - Spring Campaign",
    status: "In Progress",
    dueDate: "April 25, 2025",
    instructions:
      "Create a visually appealing banner for the Spring Sale. Use pastel color palette and add product highlights.",
    brand: "BrandA",
    subBrand: "SubBrandA",
    flavour: "Vanilla",
    packType: "Box",
    packSize: "500g",
    priority: "High",
  };


  // /////
    const navigate = useNavigate();
    const dispatch = useDispatch();
    const { id } = useParams(); // for edit mode
    const location = useLocation();
    const { job } = location.state || {};
  console.log(job);

  return (
    <div className="container mt-5">
      <Card className="shadow-lg p-4 border-0 rounded-4">
        {/* Header Section */}
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h4 className="mb-0 fw-bold text-primary">Job Details</h4>
          <Link to={"/admin/JobTracker"}>
            <Button variant="outline-secondary" size="sm">
              Close
            </Button>
          </Link>
        </div>

        {/* Job Information Section */}
        <Row className="mb-4">
          <Col md={6}>
            <p>
              <strong>Job No:</strong>
              <br />
              {jobs.jobNo}
            </p>
          </Col>
          <Col md={6}>
            <p>
              <strong>Status:</strong>
              <br />
              {job?.Status}
            </p>
          </Col>
          <Col md={6}>
            <p>
              <strong>Due Date:</strong>
              <br />
              <td>{new Date(job?.createdAt).toLocaleDateString('en-GB').replace(/\/20/, '/')}</td>
            </p>
          </Col>
          <Col md={12}>
            <p>
              <strong>Instructions:</strong>
              <br />
              {jobs.instructions}
            </p>
          </Col>
        </Row>

        {/* Job Additional Information */}

        <Row className="mb-4">
  <Col md={4} className="mb-3">
    <h6 className="text-bold">Brand:</h6>
    <p className="mb-0">{job?.brandName}</p>
  </Col>

  <Col md={4} className="mb-3">
    <h6 className="text-bold">Flavour:</h6>
    <p className="mb-0">{job?.flavour}</p>
  </Col>

  <Col md={4} className="mb-3">
    <h6 className="text-bold">SubBrand:</h6>
    <p className="mb-0">{job?.subBrand}</p>
  </Col>
</Row>

<Row className="mb-4">
  <Col md={4} className="mb-3">
    <h6 className="text-bold">Pack Type:</h6>
    <p className="mb-0">{job?.packType}</p>
  </Col>

  <Col md={4} className="mb-3">
    <h6 className="text-bold">Pack Size:</h6>
    <p className="mb-0">{job?.packSize}</p>
  </Col>

  <Col md={4} className="mb-3">
    <h6 className="text-bold">Priority:</h6>
    <p className="mb-0">{job?.priority}</p>
  </Col>
</Row>

<Row className="mb-4">
  <Col md={4} className="mb-3">
    <h6 className="text-bold">Project Name:</h6>
    <p className="mb-0">{job?.packType}</p>
  </Col>

  <Col md={4} className="mb-3">
    <h6 className="text-bold">Assign:</h6>
    <p className="mb-0">{job?.assign}</p>
  </Col>

  <Col md={4} className="mb-3">
    <h6 className="text-bold">Total Time:</h6>
    <p className="mb-0">{job?.totalTime}</p>
  </Col>
</Row>

{/* <div className="col-md-6 text-center mt-4">
  <label className="form-label">Project Barcode</label>
  <div className="border p-3 d-inline-block bg-light rounded shadow-sm">
  
    <div className="mt-2 fw-bold">POS-123456</div>
  </div>
</div> */}
<div className="col-md-6 mt-4 mb-4">
<label className="fw-bold">Project Barcode</label>
<div className="mt-2 form-label ">{job?.barcode || "POS-123456"}</div>
</div>

        {/* Progress Section */}
        {/* <h5 className="fw-bold text-primary mb-3">Progress</h5>
        <Row className="mb-4">
          <Col md={12}>
            <Card className="p-3 text-center border-0 shadow-sm">
              <h6 className="mb-2">Job Progress</h6>
              <ProgressBar now={45} variant="info" />
              <small className="text-muted mt-1 d-block">45% Completed</small>
            </Card>
          </Col>
        </Row> */}

        {/* Assignments Table */}
        <h5 className="fw-bold text-danger mb-3">Assignments:</h5>
        <Table
          responsive
          hover
          className="align-middle bg-white rounded shadow-sm overflow-hidden"
        >
          <thead className="table-light">
            <tr>
              <th className="text-nowrap">Date</th>
              <th className="text-nowrap">Instruction</th>
              <th className="text-nowrap">Assigned To</th>
              <th className="text-nowrap">Time Spent</th>
              <th className="text-nowrap">Uploaded File/Link</th>
            </tr>
          </thead>
          <tbody>
            {assignments.map((assignment, index) => (
              <tr key={index}>
                <td>{assignment.date}</td>
                <td>
                  <a
                    href="#"
                    className="text-decoration-none"
                    onClick={(e) => {
                      e.preventDefault();
                      alert(`Details for: ${assignment.title}`);
                    }}
                  >
                    {assignment.title}
                  </a>
                </td>
                <td>{assignment.assignedTo}</td>
                <td>{assignment.timeSpent}</td>
                <td className="d-flex gap-2">
                  <input
                    type="file"
                    ref={fileInputRef}
                    style={{ display: "none" }}
                    onChange={handleFileChange}
                  />
                  <Button
                    size="sm"
                    variant="dark"
                    className="me-2"
                    onClick={() => {
                      alert("Excel export functionality");
                    }}
                  >
                    <FaUpload className="me-1" />
                    Excel
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card>
    </div>
  );
};

export default OvervieJobsTracker;





import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch, useSelector } from 'react-redux';
import { fetchusers, fetchusersById, updateusers } from '../../../redux/slices/userSlice';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const { user } = location.state || {};
  const userId = location.state?.id;
    console.log("hhhhhhhhhh", user);

    const { userAll, loading, error } = useSelector((state) => state.user);
  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    password: '',
    passwordConfirm: '',
    role: '',
    assign: 'Not Assign',
    state: '',
    country: '',
    image: null,
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: ''
  });

  const handleInputChange = (e) => {
    const { name, value, type, files } = e.target;
    if (type === 'file') {
      setFormData(prev => ({
        ...prev,
        [name]: files[0]
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  useEffect(() => {
    if (user) {
      let parsedPermissions = {};
      let parsedAccessLevel = 'fullAccess';

      try {
        parsedPermissions = typeof user.permissions === 'string'
          ? JSON.parse(user.permissions)
          : user.permissions || {};

        const accessLevelData = typeof user.accessLevel === 'string'
          ? JSON.parse(user.accessLevel)
          : {};

        parsedAccessLevel = Object.keys(accessLevelData).find(key => accessLevelData[key]) || 'fullAccess';
      } catch (error) {
        console.error('Error parsing permissions or access level:', error);
      }

      setFormData({
         _id: user._id || '',  
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        phone: user.phone || '',
        password: '',
        passwordConfirm: '',
        state: user.state || '',
        country: user.country || '',
        assign: user.assign || 'Not Assign',
        image: user.image || null,
        role: user.role?.charAt(0).toUpperCase() + user.role?.slice(1).toLowerCase() || '',
        permissions: {
          dashboardAccess: false,
          clientManagement: false,
          projectManagement: false,
          designTools: false,
          financialManagement: false,
          userManagement: false,
          reportGeneration: false,
          systemSettings: false,
          ...parsedPermissions
        },
        accessLevel: parsedAccessLevel
      });

    }
  }, [user]);

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedpermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );
    setFormData(prev => ({
      ...prev,
      permissions: updatedpermissions
    }));
  };

  const handleaccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };
  
const handleSubmit = (e) => {
  e.preventDefault();
  if (formData.password !== formData.passwordConfirm) {
    toast.error('Passwords do not match!');
    return;
  }
  const filteredpermissions = Object.fromEntries(
    Object.entries(formData.permissions).filter(([_, value]) => value === true)
  );
  const payload = {
    _id: formData._id,
    firstName: formData.firstName,
    lastName: formData.lastName,
    email: formData.email,
    phone: formData.phone,
    password: formData.password,
    state: formData.state,
    country: formData.country,
    assign: formData.assign,
    image: formData.image,
    role: formData.role,
    permissions: filteredpermissions,
    accessLevel: formData.accessLevel
  };
  console.log('Payload to be sent hh:', payload);

  if (formData._id) {
    dispatch(fetchusersById({ _id: formData._id, data: payload }))
      .unwrap()
      .then(() => {
        toast.success("user updated successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchusers());
      })
      .catch(() => {
        toast.error("Failed to update user!");
      });
  } else {
    dispatch(createuser(payload))
      .unwrap()
      .then(() => {
        toast.success("user created successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchProject());
      })
      .catch(() => {
        toast.error("Error creating user");
      });
  }
};

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const filteredpermissions = Object.fromEntries(
  //     Object.entries(formData.permissions).filter(([_, value]) => value === true)
  //   );

  //   const payload = {
  //     role: formData.role,
  //     roleDescription: formData.roleDescription,
  //     permissions: filteredpermissions,
  //     accessLevel: formData.accessLevel
  //   };

  //   console.log('Payload to be sent:', payload);
  //   try {
  //     await axios.post('/api/roles', payload);
  //     navigate(-1);
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('Failed to create role. Please try again.');
  //   }
  // };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New User</h5>
          <form onSubmit={handleSubmit}>
          
          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginBottom: '1rem' }}>
            {formData.image && (
              <img
                src={typeof formData.image === 'string' ? formData.image : URL.createObjectURL(formData.image)}
                alt="Preview"
                className="img-thumbnail mt-2"
                style={{ width: '120px', height: '120px', objectFit: 'cover', borderRadius: '50%', border: '2px solid #ddd', boxShadow: '0 2px 8px rgba(0,0,0,0.05)' }}
              />
            )}
          </div>
          <div className="col-md-6">
            <label className="form-label">Profile Image</label>
            <input type="file" className="form-control" name="image" accept="image/*" onChange={handleInputChange} />
          </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">First Name</label>
                <input type="text" className="form-control" name="firstName" value={formData.firstName} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Last Name</label>
                <input type="text" className="form-control" name="lastName" value={formData.lastName} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Email</label>
                <input type="email" className="form-control" name="email" value={formData.email} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Phone</label>
                <input type="text" className="form-control" name="phone" value={formData.phone} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Password</label>
                <input type="password" className="form-control" name="password" value={formData.password} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Confirm Password</label>
                <input type="password" className="form-control" name="passwordConfirm" value={formData.passwordConfirm} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">State</label>
                <input type="text" className="form-control" name="state" value={formData.state} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Country</label>
                <input type="text" className="form-control" name="country" value={formData.country} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Assign</label>
                <select className="form-select" name="assign" value={formData.assign} onChange={handleInputChange} required>
                  <option value="Not Assign">Not Assign</option>
                  <option value="Production">Designer</option>
                  <option value="Employee">Production</option>
                </select>
              </div>
          
              <div className="col-md-6">
              <label className="form-label">Role Name</label>
              <select
                className="form-select"
                name="role"
                value={formData.role}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a role</option>
                <option value="Admin">Admin</option>
                <option value="Client">Client</option>
                <option value="Production">Production</option>
                <option value="Employee">Employee</option>
              </select>
            </div>
            </div>
            

            <div className="mb-4">
              <label className="form-label">permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleaccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create User</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;












import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import axios from 'axios';
import { useDispatch, useSelector } from 'react-redux';
import { fetchusers, SignUp, UpdateUsers, updateusers } from '../../../redux/slices/userSlice';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

function UserRoleModal() {
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const { id } = useParams();
  const location = useLocation();
  const { user } = location.state || {};
  const _id = user?._id;
    console.log("hhhhhhhhhh", user);

    const { userAll, loading, error } = useSelector((state) => state.user);
  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    password: '',
    passwordConfirm: '',
    role: '',
    assign: '',
    state: '',
    country: '',
    image: null,
    permissions: {
      dashboardAccess: false,
      clientManagement: false,
      projectManagement: false,
      designTools: false,
      financialManagement: false,
      userManagement: false,
      reportGeneration: false,
      systemSettings: false
    },
    accessLevel: ''
  });
  const [showPasswordMismatch, setShowPasswordMismatch] = useState(false);

  const handleInputChange = (e) => {
    const { name, value, type, files } = e.target;
    if (type === 'file') {
      setFormData(prev => ({
        ...prev,
        [name]: files[0]
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
      // Real-time password match check
      if (name === 'password' || name === 'passwordConfirm') {
        setShowPasswordMismatch(
          name === 'password'
            ? value !== formData.passwordConfirm && formData.passwordConfirm !== ''
            : value !== formData.password && value !== ''
        );
      }
    }
  };
  useEffect(() => {
    if (user) {
      let parsedPermissions = {};
      let parsedAccessLevel = 'fullAccess';

      try {
        parsedPermissions = typeof user.permissions === 'string'
          ? JSON.parse(user.permissions)
          : user.permissions || {};

        const accessLevelData = typeof user.accessLevel === 'string'
          ? JSON.parse(user.accessLevel)
          : {};

        parsedAccessLevel = Object.keys(accessLevelData).find(key => accessLevelData[key]) || 'fullAccess';
      } catch (error) {
        console.error('Error parsing permissions or access level:', error);
      }

      setFormData({
        firstName: user.firstName || '',
        lastName: user.lastName || '',
        email: user.email || '',
        phone: user.phone || '',
        password: '',
        passwordConfirm: '',
        state: user.state || '',
        country: user.country || '',
        assign: user.assign || 'Not Assign',
        image: user.image || null,
        role: user.role?.charAt(0).toUpperCase() + user.role?.slice(1).toLowerCase() || '',
        permissions: {
          dashboardAccess: false,
          clientManagement: false,
          projectManagement: false,
          designTools: false,
          financialManagement: false,
          userManagement: false,
          reportGeneration: false,
          systemSettings: false,
          ...parsedPermissions
        },
        accessLevel: parsedAccessLevel
      });

    }
  }, [user]);

  const handlePermissionChange = (e) => {
    const { name } = e.target;
    const updatedpermissions = Object.fromEntries(
      Object.keys(formData.permissions).map((key) => [key, key === name])
    );
    setFormData(prev => ({
      ...prev,
      permissions: updatedpermissions
    }));
  };

  const handleaccessLevelChange = (e) => {
    setFormData(prev => ({
      ...prev,
      accessLevel: e.target.value
    }));
  };
  
const handleSubmit = (e) => {
  e.preventDefault();

  if (formData.password !== formData.passwordConfirm) {
    toast.error('Passwords do not match!');
    return;
  }

  const filteredpermissions = Object.fromEntries(
    Object.entries(formData.permissions).filter(([_, value]) => value === true)
  );

  const accessLevelPayload = {
    fullAccess: formData.accessLevel === 'fullAccess',
    limitedAccess: formData.accessLevel === 'limitedAccess',
    viewOnly: formData.accessLevel === 'viewOnly'
  };

  // Use FormData to send image as binary
  const data = new FormData();
  data.append('firstName', formData.firstName);
  data.append('lastName', formData.lastName);
  data.append('email', formData.email);
  data.append('phone', formData.phone);
  data.append('password', formData.password);
  data.append('passwordConfirm', formData.passwordConfirm);
  data.append('state', formData.state);
  data.append('country', formData.country);
  data.append('assign', formData.assign);
  data.append('role', formData.role);
  data.append('permissions', JSON.stringify(filteredpermissions));
  data.append('accessLevel', JSON.stringify(accessLevelPayload));
  if (formData.image && typeof formData.image !== 'string') {
    data.append('image', formData.image);
  }

  console.log('Payload to be sent (FormData):', data);

  if (_id) {
    // For update, you may need to adjust the action to accept FormData
       dispatch(UpdateUsers({ _id, data }))
      .unwrap()
      .then(() => {
        toast.success("User updated successfully!");
        navigate('/admin/ProjectOverview', { state: { openTab: 'users' } });
        dispatch(fetchusers());
      })
      .catch(() => {
        toast.error("Failed to update user!");
      });
  } else {
    dispatch(SignUp(data))
      .unwrap()
      .then(() => {
        toast.success("User created successfully!");
        navigate('/admin/UserRoles', { state: { openTab: 'users' } });
        dispatch(fetchusers());
      })
      .catch(() => {
        toast.error("Error creating user");
      });
  }
};


  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const filteredpermissions = Object.fromEntries(
  //     Object.entries(formData.permissions).filter(([_, value]) => value === true)
  //   );

  //   const payload = {
  //     role: formData.role,
  //     roleDescription: formData.roleDescription,
  //     permissions: filteredpermissions,
  //     accessLevel: formData.accessLevel
  //   };

  //   console.log('Payload to be sent:', payload);
  //   try {
  //     await axios.post('/api/roles', payload);
  //     navigate(-1);
  //   } catch (error) {
  //     console.error('Error submitting form:', error);
  //     alert('Failed to create role. Please try again.');
  //   }
  // };

  const handleCancel = () => {
    navigate(-1);
  };

  return (
    <div className="container py-4">
      <div className="card shadow-sm">
        <div className="card-body">
          <h5 className="card-title mb-4">Add New User</h5>
          <form onSubmit={handleSubmit}>
          
          <div style={{display:"flex",alignItems:"center",justifyContent:"center"}}>
             {formData.image && (
                  <img src={typeof formData.image === 'string' ? formData.image : URL.createObjectURL(formData.image)} alt="Preview" className="img-thumbnail mt-2" style={{ maxWidth: '120px' }} />
                )}
          </div>
          <div className="col-md-6">
                <label className="form-label">Profile Image</label>
                <input type="file" className="form-control" name="image" accept="image/*" onChange={handleInputChange} />
               
              </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">First Name</label>
                <input type="text" className="form-control" name="firstName" value={formData.firstName} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Last Name</label>
                <input type="text" className="form-control" name="lastName" value={formData.lastName} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Email</label>
                <input type="email" className="form-control" name="email" value={formData.email} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Phone</label>
                <input type="text" className="form-control" name="phone" value={formData.phone} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Password</label>
                <input type="password" className="form-control" name="password" value={formData.password} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Confirm Password</label>
                <input type="password" className="form-control" name="passwordConfirm" value={formData.passwordConfirm} onChange={handleInputChange} required />
                {showPasswordMismatch && (
                  <div style={{ color: 'red', fontSize: '0.9em' }}>Passwords do not match!</div>
                )}
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">State</label>
                <input type="text" className="form-control" name="state" value={formData.state} onChange={handleInputChange} required />
              </div>
              <div className="col-md-6">
                <label className="form-label">Country</label>
                <input type="text" className="form-control" name="country" value={formData.country} onChange={handleInputChange} required />
              </div>
            </div>
            <div className="row g-3 mb-3">
              <div className="col-md-6">
                <label className="form-label">Assign</label>
                <select className="form-select" name="assign" value={formData.assign} onChange={handleInputChange} required>
                  <option value="Not Assign">Not Assign</option>
                  <option value="Designer">Designer</option>
                  <option value="Production">Production</option>
                </select>
              </div>
          
              <div className="col-md-6">
              <label className="form-label">Role Name</label>
              <select
                className="form-select"
                name="role"
                value={formData.role}
                onChange={handleInputChange}
                required
              >
                <option value="">Select a role</option>
                <option value="admin">Admin</option>
                <option value="client">Client</option>
                <option value="production">Production</option>
                <option value="employee">Employee</option>
              </select>
            </div>
            </div>
            

            <div className="mb-4">
              <label className="form-label">permissions (Select Only One)</label>
              <div className="row g-3">
                {Object.keys(formData.permissions).map((key) => (
                  <div className="col-md-6" key={key}>
                    <div className="form-check">
                      <input
                        type="checkbox"
                        className="form-check-input"
                        name={key}
                        checked={formData.permissions[key]}
                        onChange={handlePermissionChange}
                      />
                      <label className="form-check-label text-capitalize">
                        {key.replace(/([A-Z])/g, ' $1')}
                      </label>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="mb-4">
              <label className="form-label">Access Level</label>
              <div>
                {['fullAccess', 'limitedAccess', 'viewOnly'].map((level) => (
                  <div className="form-check" key={level}>
                    <input
                      type="radio"
                      className="form-check-input"
                      name="accessLevel"
                      value={level}
                      checked={formData.accessLevel === level}
                      onChange={handleaccessLevelChange}
                    />
                    <label className="form-check-label text-capitalize">{level.replace(/([A-Z])/g, ' $1')}</label>
                  </div>
                ))}
              </div>
            </div>

            <div className="d-flex justify-content-end gap-2">
              <button type="button" className="btn btn-outline-secondary" onClick={handleCancel}>Cancel</button>
              <button type="submit" className="btn btn-dark">Create User</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default UserRoleModal;















import React, { useEffect, useState } from "react";
import { Modal, Form, Table, Badge, Dropdown, Button } from "react-bootstrap";
import { BsPlusLg, BsPencil, BsTrash, BsUpload, BsClipboard } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import { deleteCostEstimate, fetchCostEstimates } from "../../../redux/slices/costEstimatesSlice";
import { useDispatch, useSelector } from "react-redux";
import { FaDownload, FaTrash } from "react-icons/fa";
import Swal from 'sweetalert2';
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";
import { createReceivablePurchase, fetchReceivablePurchases } from "../../../redux/slices/receivablePurchaseSlice";
import { jsPDF } from "jspdf";
import autoTable from 'jspdf-autotable';
import { FaRegCopy  } from "react-icons/fa";

function CostEstimates() {
  const dispatch = useDispatch()
  const navigate = useNavigate()

  // State declarations
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedClient, setSelectedClient] = useState("All Clients");
  const [selectedPOStatus, setSelectedPOStatus] = useState("All PO Status");
  const [selectedStatus, setSelectedStatus] = useState("All Status");
  const [selectedDate, setSelectedDate] = useState("");
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [selectedPO, setSelectedPO] = useState(null);
  const [showAddPOModal, setShowAddPOModal] = useState(false);

  // PO Form states
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [selectedClientId, setSelectedClientId] = useState("");
  const [costEstimatesId, setCostEstimatesId] = useState("");

  const [poDate, setPODate] = useState("");
  const [status, setStatus] = useState("");
  const [amount, setAmount] = useState("");
  const [poDocument, setPODocument] = useState(null);

  const { project } = useSelector((state) => state.projects);
  const { Clients } = useSelector((state) => state.client);
  const statuses = ["Pending", "Received", "Cancelled", "Completed", "open", "invoiced"];

  useEffect(() => {
    dispatch(fetchProject());
    dispatch(fetchClient());
    dispatch(fetchCostEstimates());
  }, [dispatch]);

  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === selectedClientId);
      if (foundProject) {
        setSelectedProjectId(foundProject._id);
      }
    }
  }, [Clients, project, selectedClientId]);

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        Swal.fire({
          icon: 'error',
          title: 'File too large',
          text: 'Please upload a file smaller than 10MB'
        });
        return;
      }
      setPODocument(file);
    }
  };


  const handleSavePO = async () => {
    if (!selectedProjectId || !selectedClientId || !poDate || !status || !amount) {
      Swal.fire({
        icon: 'error',
        title: 'Required Fields Missing',
        text: 'Please fill all required fields'
      });
      return;
    }

    const formData = new FormData();
    formData.append('projectsId', JSON.stringify([selectedProjectId]));
    formData.append('ClientId', selectedClientId);
    formData.append('ReceivedDate', poDate);
    formData.append('Status', status);
    formData.append('Amount', amount);
    formData.append('CostEstimatesId', JSON.stringify([costEstimatesId]));

    if (poDocument) {
      formData.append('image', poDocument);
    }

    try {
      const result = await dispatch(createReceivablePurchase(formData));

      // Agar API success ho jaye tab fetch karo
      if (createReceivablePurchase.fulfilled.match(result)) {
        Swal.fire({
          icon: 'success',
          title: 'PO Created',
          text: 'Purchase order created successfully'
        });

        // Reset fields
        setSelectedProjectId("");
        setSelectedClientId("");
        setCostEstimatesId("");
        setPODate("");
        setStatus("");
        setAmount("");
        setPODocument(null);
        setShowAddPOModal(false);

        // ✅ Now fetch updated list
        dispatch(fetchReceivablePurchases());
        navigate("/admin/receivable");
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Creation Failed',
          text: 'Failed to create purchase order.'
        });
      }
    } catch (err) {
      console.error("Error creating PO:", err);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong while creating purchase order.'
      });
    }
  };


  // Convert to Invoice handler
  const handleConvertToInvoice = (po) => {
    setSelectedPO(po);
    setShowInvoiceModal(true);
  };


  // Add PO Modal
  const renderAddPOModal = () => (
    <Modal show={showAddPOModal} onHide={() => setShowAddPOModal(false)} size="lg">
      <Modal.Header closeButton>
        <Modal.Title>Add Purchase Order</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-2">
            <div className="row justify-content-center">
              <div className="col-md-6">
                <Form.Label className="d-block ">Project</Form.Label>
                <Form.Select
                  value={selectedProjectId}
                  onChange={(e) => setSelectedProjectId(e.target.value)}
                  className="form-control"
                  required
                >
                  <option value="">-- Select Project --</option>
                  {project?.data?.map((proj) => (
                    <option key={proj._id} value={proj._id}>
                      {proj.projectName || proj.name}
                    </option>
                  ))}
                </Form.Select>
              </div>
              <div className="col-md-6">
                <Form.Label className="d-block ">Client</Form.Label>
                <Form.Select
                  value={selectedClientId}
                  onChange={(e) => setSelectedClientId(e.target.value)}
                  className="form-control"
                  required
                >
                  <option value="">-- Select Client --</option>
                  {Clients?.data?.map((client) => (
                    <option key={client._id} value={client._id}>
                      {client.clientName}
                    </option>
                  ))}
                </Form.Select>
              </div>
            </div>
          </Form.Group>


          <Form.Group className="mb-3">
            <div className="row justify-content-center">
              <div className="col-md-6">
                <Form.Label className="d-block ">PO Date</Form.Label>
                <Form.Control
                  type="date"
                  value={poDate}
                  onChange={(e) => setPODate(e.target.value)}
                  className="form-control"
                  required
                />
              </div>

              <div className="col-md-6">
                <Form.Label className="d-block ">PO Status</Form.Label>
                <Form.Select
                  value={status}
                  onChange={(e) => setStatus(e.target.value)}
                  className="form-control"
                  required
                >
                  <option value="">-- Select Status --</option>
                  {statuses.map((s) => (
                    <option key={s} value={s}>{s}</option>
                  ))}
                </Form.Select>
              </div>
            </div>
          </Form.Group>

          <Form.Group className="mb-3">
            <div className="row justify-content-center align-items-start">
              {/* PO Amount Field */}
              <div className="col-md-6 mb-3 mb-md-0">
                <Form.Label className="d-block ">PO Amount</Form.Label>
                <Form.Control
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  className="form-control"
                  placeholder="Enter amount"
                  required
                />
              </div>

              {/* File Upload Field */}
              <div className="col-md-6">
                <Form.Label className="d-block ">Upload Document</Form.Label>
                <div className="file-upload">
                  <Form.Control
                    type="file"
                    accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                    onChange={handleFileUpload}
                    className="form-control"
                  />

                  <small className="text-muted d-flex align-items-center mt-1">
                    <BsUpload className="me-2" /> Upload a file (PDF, DOC up to 10MB)
                  </small>
                </div>
              </div>
            </div>
          </Form.Group>

        </Form>
      </Modal.Body>
      <Modal.Footer className="d-flex justify-content-end gap-2">
        <Button variant="secondary" onClick={() => setShowAddPOModal(false)}>Cancel</Button>
        <Button variant="primary" onClick={handleSavePO}>Save PO</Button>
      </Modal.Footer>
    </Modal>
  );



  // //////////
  const { estimates, loading, error } = useSelector((state) => state.costEstimates);
  console.log("Cost Estimates:", estimates.costEstimates);

  useEffect(() => {
    dispatch(fetchCostEstimates());
  }, [dispatch]);


  // ye ok code hai 
  const getStatusClass = (status) => {
    switch ((status || "").toLowerCase().trim()) {
      case "active":
      case "active project":
      case "open":
        return "bg-primary text-white";
      case "inactive":
        return "bg-secondary text-white";
      case "in progress":
      case "pending":
        return "bg-warning text-dark";
      case "completed":
        return "bg-success text-white";
      case "closed":
        return "bg-dark text-white";
      case "cancelled":
        return "bg-danger text-white";
      case "on hold":
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteCostEstimate(_id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchCostEstimates());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }

  const Duplicate = (po) => {
    navigate(`/admin/AddCostEstimates`, {
      state: {
        po,
        isDuplicate: true
      }
    });
  }
  const UpdateEstimate = (po) => {
    navigate(`/admin/AddCostEstimates`, {
      state: {
        po,
      }
    });
  }

  //     const Duplicate =(po)=>{    
  //  navigate(`/duplicate/AddCostEstimates/${po._id}`, { state: { po}});
  //   }


  // PAGINATION SETUP FOR ESTIMATES
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;

  // Add filtering logic before pagination
  const filteredEstimates = estimates?.costEstimates
    ?.slice()
    .reverse()
    .filter((estimate) => {
      const searchLower = searchQuery.toLowerCase().trim();
      const matchesSearch = !searchQuery ||
        (estimate.estimateRef?.toLowerCase().includes(searchLower) ||
          estimate.clientId[0]?.clientName?.toLowerCase().includes(searchLower) ||
          estimate.projectId?.some(project =>
            project.projectName?.toLowerCase().includes(searchLower) ||
            project.name?.toLowerCase().includes(searchLower)
          ) ||
          estimate.Status?.toLowerCase().includes(searchLower) ||
          estimate.POStatus?.toLowerCase().includes(searchLower));

      const matchesClient = selectedClient === "All Clients" ||
        estimate.clientId[0]?.clientName === selectedClient;

      const matchesPOStatus = selectedPOStatus === "All PO Status" ||
        estimate.POStatus === selectedPOStatus;

      const matchesStatus = selectedStatus === "All Status" ||
        estimate.Status === selectedStatus;

      const matchesDate = !selectedDate ||
        new Date(estimate.estimateDate).toLocaleDateString() === new Date(selectedDate).toLocaleDateString();

      return matchesSearch && matchesClient && matchesPOStatus && matchesStatus && matchesDate;
    });

  // Update pagination to use filtered data
  const totalItems = filteredEstimates?.length || 0;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const paginatedEstimates = filteredEstimates
    ?.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);


  // ... handleDownloadPDF ...
  const handleDownloadPDF = (invoiceDataFromState) => {
    if (!invoiceDataFromState) {
      console.error("No data provided to handleDownloadPDF");
      Swal.fire("Error", "No data available to generate PDF.", "error");
      return;
    }

    const doc = new jsPDF('p', 'pt', 'a4');
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 40;
    let finalY = margin;

    // --- START: Data from 'invoiceDataFromState' object ---
    const companyDetails = {
      logoText: invoiceDataFromState.companyLogoText || 'COMPANY LOGO',
      addressDetails: invoiceDataFromState.companyAddressDetails || 'COMPANY ADDRESS DETAILS',
      name: invoiceDataFromState.companyNameHeader || 'Company name',
      trn: invoiceDataFromState.companyTRN || '100000000000002',
    };

    const invoiceMeta = {
      date: invoiceDataFromState.date || '22.03.2025',
      invoiceNo: invoiceDataFromState.invoiceNo || '5822',
    };

    const clientDetails = {
      name: invoiceDataFromState.clientName || 'Client Company Name',
      address1: invoiceDataFromState.clientAddress1 || 'Client Address Line 1',
      address2: invoiceDataFromState.clientAddress2 || 'Client Address Line 2, Country',
      tel: invoiceDataFromState.clientTel || '00000000000',
      contactPerson: invoiceDataFromState.clientContactPerson || 'Client Contact Person',
      email: invoiceDataFromState.clientEmail || 'client.email@example.com',
      trn: invoiceDataFromState.clientTRN || "Client's TRN No.",
    };

    const projectInfo = {
      costEstNo: invoiceDataFromState.costEstNo || 'CE No.',
      poNo: invoiceDataFromState.purchaseOrderNo || 'PO Number',
      projectNo: invoiceDataFromState.projectNo || 'Project No.',
    };

    const bankDetails = {
      accountName: invoiceDataFromState.bankAccountName || 'Company Name',
      bankName: invoiceDataFromState.bankName || "Company's Bank Name",
      iban: invoiceDataFromState.iban || 'XX000000000000000000001',
      swiftCode: invoiceDataFromState.swiftCode || 'XXXAAACC',
      terms: invoiceDataFromState.paymentTerms || 'Net 30',
    };

    const items = invoiceDataFromState.items && invoiceDataFromState.items.length > 0
      ? invoiceDataFromState.items.map((item, index) => [
        (index + 1).toString() + '.',
        item.description,
        item.qty,
        item.rate,
        parseFloat(item.amount).toFixed(2)
      ])
      : [
        ['1.', 'Print Samples', 6, 2, '12.00'], // Default item
      ];

    const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
    const vatRate = invoiceDataFromState.vatRate !== undefined ? invoiceDataFromState.vatRate : 0.10; // 10% VAT from image, or from state
    const vatAmount = subTotal * vatRate;
    const grandTotal = subTotal + vatAmount;
    const amountInWords = invoiceDataFromState.amountInWords || `US Dollars ${numberToWords(grandTotal)} Only`;
    // --- END: Data from 'invoiceDataFromState' object ---

    // 1. Company Logo Block (Top Left) - Assuming this part is okay from previous version
    doc.setFillColor(192, 0, 0);
    doc.rect(margin, finalY, 220, 60, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(companyDetails.logoText, margin + 10, finalY + 25);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);

    // 2. Company Name (Top Right) - Assuming this part is okay
    const companyNameBlockY = finalY;
    doc.setFillColor(192, 0, 0);
    doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });

    // 3. Tax Invoice Title - Assuming this part is okay
    let titleY = companyNameBlockY + 30 + 20;
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Tax Invoice', pageWidth - margin, titleY, { align: 'right' });

    // 4. TRN, Date, Invoice No. Table - Assuming this part is okay
    let tableDetailsY = titleY + 10;
    autoTable(doc, {
      startY: tableDetailsY,
      head: [['TRN:', 'Date', 'Invoice No.']],
      body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [255, 255, 255], textColor: [0, 0, 0], fontStyle: 'bold' },
      columnStyles: {
        0: { cellWidth: 150, halign: 'left' },
        1: { cellWidth: 80, halign: 'left' },
        2: { cellWidth: 80, halign: 'left' },
      },
      margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) - 10 },
      tableWidth: 'wrap',
    });
    finalY = doc.lastAutoTable.finalY + 20;

    // 5. Invoice To Section - Assuming this part is okay
    const invoiceToBoxWidth = 250;
    doc.setDrawColor(0, 0, 0);
    doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S');
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text('Invoice To', margin + 5, finalY + 15);
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    let textYInvoiceTo = finalY + 30;
    [clientDetails.name, clientDetails.address1, clientDetails.address2, `Tel: ${clientDetails.tel}`, `Contact: ${clientDetails.contactPerson}`, `Email: ${clientDetails.email}`].forEach(line => {
      doc.text(line, margin + 5, textYInvoiceTo);
      textYInvoiceTo += 12;
    });
    finalY += 100 + 10;
    // 6. TRN, Cost Est. No., P.O. No., Project Table - Assuming this part is okay
    autoTable(doc, {
      startY: finalY,
      head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project']],
      body: [[clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
      margin: { left: margin, right: margin },
    });
    finalY = doc.lastAutoTable.finalY + 10;

    // 7. Bank Details Table - Assuming this part is okay
    autoTable(doc, {
      startY: finalY,
      head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
      body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0], fontStyle: 'bold' },
      margin: { left: margin, right: margin },
    });
    finalY = doc.lastAutoTable.finalY + 10;

    // 8. Items Table - Assuming this part is okay
    autoTable(doc, {
      startY: finalY,
      head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
      body: items,
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
      columnStyles: {
        0: { cellWidth: 40, halign: 'center' },
        1: { cellWidth: 'auto' },
        2: { cellWidth: 40, halign: 'right' },
        3: { cellWidth: 50, halign: 'right' },
        4: { cellWidth: 70, halign: 'right' },
      },
      margin: { left: margin, right: margin },
      didDrawPage: function (data) {
        // Ensure finalY is updated correctly if table spans multiple pages
        finalY = data.cursor.y;
      }
    });
    const amountInWordsY = finalY + 20;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text(amountInWords, margin, amountInWordsY, { maxWidth: pageWidth - margin - 220 }); // Ensure it doesn't overlap with totals

    // 10. Totals Section (NEW - Subtotal, VAT, Total - Right Aligned)
    const totalsTableWidth = 200;
    const totalsTableX = pageWidth - margin - totalsTableWidth;
    let totalsTableY = finalY + 10;

    autoTable(doc, {
      startY: totalsTableY,
      body: [
        ['Subtotal', `USD ${subTotal.toFixed(2)}`],
        [`VAT (${(vatRate * 100).toFixed(0)}%)`, `USD ${vatAmount.toFixed(2)}`],
        ['Total', `USD ${grandTotal.toFixed(2)}`]
      ],
      theme: 'grid',
      styles: {
        fontSize: 9,
        cellPadding: 5,
        lineWidth: 0.5,
        lineColor: [0, 0, 0]
      },
      headStyles: {
        fillColor: [255, 255, 255],
        textColor: [0, 0, 0],
      },
      columnStyles: {
        0: { halign: 'left', fontStyle: 'bold', cellWidth: totalsTableWidth * 0.6 },
        1: { halign: 'right', cellWidth: totalsTableWidth * 0.4 }
      },
      margin: { left: totalsTableX },
      tableWidth: totalsTableWidth,
      didDrawPage: function (data) {
        totalsTableY = data.cursor.y;
      }
    });

    finalY = Math.max(amountInWordsY + 10, totalsTableY + 10);

    const footerStartY = finalY + 30;
    const stampWidth = 100;
    const stampHeight = 70;
    const stampX = margin + 150;

    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text('For Company Name', margin, footerStartY);
    doc.text('Accounts Department', margin, footerStartY + stampHeight - 10);

    // Placeholder for Stamp Image
    doc.setFillColor(200, 200, 200);
    doc.rect(stampX, footerStartY - 15, stampWidth, stampHeight, 'F');
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(8);
    doc.text('Insert Stamp Image', stampX + stampWidth / 2, footerStartY - 15 + stampHeight / 2, { align: 'center' });

    doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
  };
  const numberToWords = (num) => {
    const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    if (num === 0) return 'Zero';
    let words = '';
    if (num >= 1000000000) { words += numberToWords(Math.floor(num / 1000000000)) + ' Billion '; num %= 1000000000; }
    if (num >= 1000000) { words += numberToWords(Math.floor(num / 1000000)) + ' Million '; num %= 1000000; }
    if (num >= 1000) { words += numberToWords(Math.floor(num / 1000)) + ' Thousand '; num %= 1000; }
    if (num >= 100) { words += ones[Math.floor(num / 100)] + ' Hundred '; num %= 100; }
    if (num >= 20) { words += tens[Math.floor(num / 10)] + ' '; num %= 10; }
    if (num > 0) { words += ones[num] + ' '; }
    // Handle cents if your number includes them, e.g., by splitting num.toFixed(2)
    const numStr = parseFloat(num).toFixed(2);
    const parts = numStr.split('.');
    let dollars = parseInt(parts[0]);
    let cents = parseInt(parts[1]);

    words = ''; // Reset words for dollar part only
    if (dollars === 0) words = 'Zero';
    else {
      if (dollars >= 1000000000) { words += numberToWords(Math.floor(dollars / 1000000000)) + ' Billion '; dollars %= 1000000000; }
      if (dollars >= 1000000) { words += numberToWords(Math.floor(dollars / 1000000)) + ' Million '; dollars %= 1000000; }
      if (dollars >= 1000) { words += numberToWords(Math.floor(dollars / 1000)) + ' Thousand '; dollars %= 1000; }
      if (dollars >= 100) { words += ones[Math.floor(dollars / 100)] + ' Hundred '; dollars %= 100; }
      if (dollars >= 20) { words += tens[Math.floor(dollars / 10)] + (dollars % 10 !== 0 ? ' ' : ''); dollars %= 10; }
      if (dollars > 0) { words += ones[dollars] + ' '; }
    }
    words = words.trim();

    if (cents > 0) {
      words += ` and ${cents.toString()}/100`;
    }
    return words.trim();
  };
  // ... existing code ...

  return (
    <div
      className="p-4 m-2"
      style={{ backgroundColor: "white", borderRadius: "10px" }}
    >
   <div style={{display:"flex",alignItems:"center",justifyContent:"space-between"}}>
   <h2 className="fw-semibold mb-3">Cost Estimates</h2>
      <Link to={"/admin/AddCostEstimates"}>
            <button id="btn-All" className=" btn-dark" style={{ border: "none", borderRadius: "10px" }}>
              <BsPlusLg className="me-2" /> New Estimate
            </button>
          </Link>
   </div>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="filters d-flex flex-wrap gap-1 mb-4">
          <div className="search-container flex-grow-1">
            <Form.Control
              type="search"
              placeholder="Search by Job #, Brand Name, Sub Brand, Flavour, Pack Type, Pack Size..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>
          <div className="search-container flex-grow-1">
            <Form.Control
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="form-control"
            />
          </div>
          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="designer-dropdown"
              className="custom-dropdown"
            >
              {selectedClient}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedClient("All Clients")}>All Clients</Dropdown.Item>
              {[...new Set(estimates?.costEstimates?.map(po => po.clientId[0]?.clientName || 'N/A'))]
                .filter(name => name !== 'N/A')
                .map((clientName, index) => (
                  <Dropdown.Item key={index} onClick={() => setSelectedClient(clientName)}>
                    {clientName}
                  </Dropdown.Item>
                ))}
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="viewall-dropdown"
              className="custom-dropdown"
            >
              {selectedPOStatus}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedPOStatus("All PO Status")}>All PO Status</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedPOStatus("Approved")}>Approved</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedPOStatus("Rejected")}>Rejected</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedPOStatus("pending")}>Pending</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="status-dropdown"
              className="custom-dropdown"
            >
              {selectedStatus}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedStatus("All Status")}>All Status</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedStatus("Active")}>Active</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedStatus("Invoice")}>Invoice</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedStatus("Completed")}>Completed</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

    
        </div>
      </div>

      <div className="table-responsive" style={{ maxHeight: "900px", overflowY: "auto" }}>
        <Table hover className="align-middle sticky-header">
          <thead style={{ backgroundColor: "#f8f9fa", position: "sticky", top: 0, zIndex: 1 }}>
            <tr>
              <th><input type="checkbox" /></th>
              <th>CENo</th>
              <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
              <th>Client</th>
              <th>Date</th>
              {/* <th>ProjectNo</th> */}
              <th>Amount</th>
              <th>CotStatus</th>
              {/* <th>POStatus</th> */}
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedEstimates?.map((po, index) => (

              <tr style={{ whiteSpace: "nowrap" }} key={po.poNumber}>
                <td><input type="checkbox" /></td>
                <td onClick={() => CreatJobs(po.projectId)}>
                  <Link to={"/admin/receivable"} style={{ textDecoration: 'none', border: 'none' }}>
                    {po.estimateRef}
                  </Link>
                </td>
                <td>
                  {po.projectId?.map((project) => project.projectName || project.name).join(", ")}
                </td>
                <td>{po.clientId[0]?.clientName || 'N/A'}</td>
                <td>{new Date(po.estimateDate).toLocaleDateString("en-GB").slice(0, 8)}</td>
                {/* <td>
                  {po.projectId?.map((project, i) => `${String(i + 1).padStart(4, '0')}`).join(", ")}
                </td> */}
                <td>
                  {po.lineItems?.reduce((total, item) => total + (item.amount || 0), 0).toFixed(2)}
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td>
                {/* <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td> */}
                <td>
                  <div className="d-flex gap-2">
                      {/* <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td> */}
                  <button
                      className="btn btn-sm btn-success"
                      onClick={() => {
                        setCostEstimatesId(po._id); // Store the ID
                        setShowAddPOModal(true);   // Open Modal
                      }}
                    >
                     PO Add
                            <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.POStatus}
                  </span>
                </td>
                    </button>
              
                    <button className="btn btn-sm btn-primary" onClick={() => Duplicate(po)}><FaRegCopy /></button>
                    {/* <button className="btn btn-sm btn-primary" onClick={() => handleConvertToInvoice(po)}>ConvertInvoice</button> */}
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateEstimate(po)}><BsPencil /></button>
                    {/* <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(po._id)}>
                          <FaTrash />
                        </button> */}
                    <button
                      className="btn btn-sm btn-outline-primary"
                      onClick={handleDownloadPDF}
                    >
                      <FaDownload />
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Modal for converting to invoice */}
      <Modal
        show={showInvoiceModal}
        onHide={() => setShowInvoiceModal(false)}
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>Convert Estimate to Invoice</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Number</Form.Label>
              {/* <Form.Control
                type="text"
                defaultValue={
                  selectedPO
                    ? `INV-${selectedPO.estimateRef.split("-")[1]}`
                    : ""
                }
                disabled
              /> */}
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Client</Form.Label>
              <Form.Control
                type="text"
                defaultValue={selectedPO?.client}
                readOnly
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Due Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <hr />
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control type="text" defaultValue="Web Design Services" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Quantity</Form.Label>
              <Form.Control type="number" defaultValue="1" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Rate</Form.Label>
              <Form.Control type="number" defaultValue={selectedPO?.amount} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Amount</Form.Label>
              <Form.Control
                type="text"
                // value={`$${selectedPO?.amount.toFixed(2)}`}
                disabled
              />
            </Form.Group>
            <hr />
            <div className="d-flex justify-content-between">
              <div>
                <strong>Subtotal:</strong>
                {/* <span> ${selectedPO?.amount.toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Tax (10%):</strong>
                {/* <span> ${calculateTax(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Total:</strong>
                {/* <span> ${calculateTotal(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => setShowInvoiceModal(false)}
          >
            Cancel
          </Button>
          <Button variant="primary">Create Invoice</Button>
        </Modal.Footer>
      </Modal>

      {renderAddPOModal()}
      {/* Modal for converting to invoice */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mt-3">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default CostEstimates;












import React, { useEffect, useState } from 'react';
import { Form, Table, Badge, InputGroup, Button,Dropdown  } from 'react-bootstrap';
import { FaSearch, FaSort, FaEdit, FaTrash, FaDownload, FaFilter } from 'react-icons/fa';
import { Link, useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import { jsPDF } from "jspdf";
import autoTable from 'jspdf-autotable'; // Only this import should remain
import { deleteInvoicingBilling, fetchInvoicingBilling } from '../../../redux/slices/InvoicingBillingSlice';
import { useDispatch, useSelector } from 'react-redux';
import axiosInstance from '../../../redux/utils/axiosInstance';

function Invoicing_Billing() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedProject, setSelectedProject] = useState('All Projects');
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const initialInvoices = [
    {
      invoiceNumber: 'INV-12345',
      client: 'Acme Corp',
      project: 'Holiday Package Design',
      amount: 2500.00,
      status: 'Paid',
      dueDate: '2024-01-15'
    },
    {
      invoiceNumber: 'INV-12345',
      client: 'Tech Solutions',
      project: 'Product Catalog',
      amount: 3750.00,
      status: 'Pending',
      dueDate: '2024-01-30'
    },
    {
      invoiceNumber: 'INV-12345',
      client: 'Global Inc',
      project: 'Brand Guidelines',
      amount: 5000.00,
      status: 'Overdue',
      dueDate: '2024-01-10'
    }
  ];

  const [invoices, setInvoices] = useState(initialInvoices);

  const getStatusBadgeVariant = (status) => {
    switch (status.toLowerCase()) {
      case 'paid': 
        return 'success';
      case 'pending': 
        return 'warning';
      case 'overdue': 
        return 'danger';
      case 'Inactive': 
        return 'secondary';
      case 'completed': 
        return 'primary';
      case 'active': 
        return 'success';
      default: 
        return 'secondary';
    }
  };
  

  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = initialInvoices.filter(invoice =>
      invoice.invoiceNumber.toLowerCase().includes(query) ||
      invoice.client.toLowerCase().includes(query) ||
      invoice.project.toLowerCase().includes(query)
    );
    setInvoices(filtered);
  };

  const handleSort = (field) => {
    const isAsc = sortField === field && sortDirection === 'asc';
    setSortDirection(isAsc ? 'desc' : 'asc');
    setSortField(field);

    const sorted = [...invoices].sort((a, b) => {
      if (field === 'amount') {
        return isAsc ? b[field] - a[field] : a[field] - b[field];
      }
      return isAsc
        ? b[field].localeCompare(a[field])
        : a[field].localeCompare(b[field]);
    });
    setInvoices(sorted);
  };

 // ... handleDownloadPDF ...
  // const handleDownloadPDF = (invoiceDataFromState) => {
  //   if (!invoiceDataFromState) {
  //     console.error("No data provided to handleDownloadPDF");
  //     Swal.fire("Error", "No data available to generate PDF.", "error");
  //     return;
  //   }

  //   const doc = new jsPDF('p', 'pt', 'a4');
  //   const pageWidth = doc.internal.pageSize.width;
  //   const pageHeight = doc.internal.pageSize.height;
  //   const margin = 40;
  //   let finalY = margin;

  
  //   const companyDetails = {
  //     logoText: invoiceDataFromState.companyLogoText || 'COMPANY LOGO',
  //     addressDetails: invoiceDataFromState.companyAddressDetails || 'COMPANY ADDRESS DETAILS',
  //     name: invoiceDataFromState.companyNameHeader || 'Company name',
  //     trn: invoiceDataFromState.companyTRN || '100000000000002',
  //   };

  //   const invoiceMeta = {
  //     date: invoiceDataFromState.date || '22.03.2025',
  //     invoiceNo: invoiceDataFromState.invoiceNo || '5822',
  //   };

  //   const clientDetails = {
  //     name: invoiceDataFromState.clientName || 'Client Company Name',
  //     address1: invoiceDataFromState.clientAddress1 || 'Client Address Line 1',
  //     address2: invoiceDataFromState.clientAddress2 || 'Client Address Line 2, Country',
  //     tel: invoiceDataFromState.clientTel || '00000000000',
  //     contactPerson: invoiceDataFromState.clientContactPerson || 'Client Contact Person',
  //     email: invoiceDataFromState.clientEmail || 'client.email@example.com',
  //     trn: invoiceDataFromState.clientTRN || "Client's TRN No.",
  //   };

  //   const projectInfo = {
  //     costEstNo: invoiceDataFromState.costEstNo || 'CE No.',
  //     poNo: invoiceDataFromState.purchaseOrderNo || 'PO Number',
  //     projectNo: invoiceDataFromState.projectNo || 'Project No.',
  //   };

  //   const bankDetails = {
  //     accountName: invoiceDataFromState.bankAccountName || 'Company Name',
  //     bankName: invoiceDataFromState.bankName || "Company's Bank Name",
  //     iban: invoiceDataFromState.iban || 'XX000000000000000000001',
  //     swiftCode: invoiceDataFromState.swiftCode || 'XXXAAACC',
  //     terms: invoiceDataFromState.paymentTerms || 'Net 30',
  //   };

  //   const items = invoiceDataFromState.items && invoiceDataFromState.items.length > 0
  //     ? invoiceDataFromState.items.map((item, index) => [
  //       (index + 1).toString() + '.',
  //       item.description,
  //       item.qty,
  //       item.rate,
  //       parseFloat(item.amount).toFixed(2)
  //     ])
  //     : [
  //       ['1.', 'Print Samples', 6, 2, '12.00'], 
  //     ];

  //   const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
  //   const vatRate = invoiceDataFromState.vatRate !== undefined ? invoiceDataFromState.vatRate : 0.10; 
  //   const vatAmount = subTotal * vatRate;
  //   const grandTotal = subTotal + vatAmount;
  //   const amountInWords = invoiceDataFromState.amountInWords || `US Dollars ${numberToWords(grandTotal)} Only`;
    
  //   doc.setFillColor(192, 0, 0);
  //   doc.rect(margin, finalY, 220, 60, 'F');
  //   doc.setTextColor(255, 255, 255);
  //   doc.setFontSize(14);
  //   doc.setFont('helvetica', 'bold');
  //   doc.text(companyDetails.logoText, margin + 10, finalY + 25);
  //   doc.setFontSize(8);
  //   doc.setFont('helvetica', 'normal');
  //   doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);

    
  //   const companyNameBlockY = finalY;
  //   doc.setFillColor(192, 0, 0);
  //   doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F');
  //   doc.setTextColor(255, 255, 255);
  //   doc.setFontSize(12);
  //   doc.setFont('helvetica', 'bold');
  //   doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });

   
  //   let titleY = companyNameBlockY + 30 + 20;
  //   doc.setTextColor(0, 0, 0);
  //   doc.setFontSize(18);
  //   doc.setFont('helvetica', 'bold');
  //   doc.text('Tax Invoice', pageWidth - margin, titleY, { align: 'right' });

  //   let tableDetailsY = titleY + 10;
  //   autoTable(doc, {
  //     startY: tableDetailsY,
  //     head: [['TRN:', 'Date', 'Invoice No.']],
  //     body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
  //     theme: 'grid',
  //     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
  //     headStyles: { fillColor: [255, 255, 255], textColor: [0, 0, 0], fontStyle: 'bold' },
  //     columnStyles: {
  //       0: { cellWidth: 150, halign: 'left' },
  //       1: { cellWidth: 80, halign: 'left' },
  //       2: { cellWidth: 80, halign: 'left' },
  //     },
  //     margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) - 10 },
  //     tableWidth: 'wrap',
  //   });
  //   finalY = doc.lastAutoTable.finalY + 20;

   
  //   const invoiceToBoxWidth = 250;
  //   doc.setDrawColor(0, 0, 0);
  //   doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S');
  //   doc.setFontSize(10);
  //   doc.setFont('helvetica', 'bold');
  //   doc.text('Invoice To', margin + 5, finalY + 15);
  //   doc.setFontSize(9);
  //   doc.setFont('helvetica', 'normal');
  //   let textYInvoiceTo = finalY + 30;
  //   [clientDetails.name, clientDetails.address1, clientDetails.address2, `Tel: ${clientDetails.tel}`, `Contact: ${clientDetails.contactPerson}`, `Email: ${clientDetails.email}`].forEach(line => {
  //     doc.text(line, margin + 5, textYInvoiceTo);
  //     textYInvoiceTo += 12;
  //   });
  //   finalY += 100 + 10;
   
  //   autoTable(doc, {
  //     startY: finalY,
  //     head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project']],
  //     body: [[clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]],
  //     theme: 'grid',
  //     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
  //     headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
  //     margin: { left: margin, right: margin },
  //   });
  //   finalY = doc.lastAutoTable.finalY + 10;

    
  //   autoTable(doc, {
  //     startY: finalY,
  //     head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
  //     body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
  //     theme: 'grid',
  //     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
  //     headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0], fontStyle: 'bold' },
  //     margin: { left: margin, right: margin },
  //   });
  //   finalY = doc.lastAutoTable.finalY + 10;

 
  //   autoTable(doc, {
  //     startY: finalY,
  //     head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
  //     body: items,
  //     theme: 'grid',
  //     styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
  //     headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
  //     columnStyles: {
  //       0: { cellWidth: 40, halign: 'center' },
  //       1: { cellWidth: 'auto' },
  //       2: { cellWidth: 40, halign: 'right' },
  //       3: { cellWidth: 50, halign: 'right' },
  //       4: { cellWidth: 70, halign: 'right' },
  //     },
  //     margin: { left: margin, right: margin },
  //     didDrawPage: function (data) {
     
  //       finalY = data.cursor.y;
  //     }
  //   });
  //   const amountInWordsY = finalY + 20;
  //   doc.setFontSize(9);
  //   doc.setFont('helvetica', 'normal');
  //   doc.text(amountInWords, margin, amountInWordsY, { maxWidth: pageWidth - margin - 220 }); 


  //   const totalsTableWidth = 200;
  //   const totalsTableX = pageWidth - margin - totalsTableWidth;
  //   let totalsTableY = finalY + 10;

  //   autoTable(doc, {
  //     startY: totalsTableY,
  //     body: [
  //       ['Subtotal', `USD ${subTotal.toFixed(2)}`],
  //       [`VAT (${(vatRate * 100).toFixed(0)}%)`, `USD ${vatAmount.toFixed(2)}`],
  //       ['Total', `USD ${grandTotal.toFixed(2)}`]
  //     ],
  //     theme: 'grid',
  //     styles: {
  //       fontSize: 9,
  //       cellPadding: 5,
  //       lineWidth: 0.5,
  //       lineColor: [0, 0, 0]
  //     },
  //     headStyles: {
  //       fillColor: [255, 255, 255],
  //       textColor: [0, 0, 0],
  //     },
  //     columnStyles: {
  //       0: { halign: 'left', fontStyle: 'bold', cellWidth: totalsTableWidth * 0.6 },
  //       1: { halign: 'right', cellWidth: totalsTableWidth * 0.4 }
  //     },
  //     margin: { left: totalsTableX },
  //     tableWidth: totalsTableWidth,
  //     didDrawPage: function (data) {
  //       totalsTableY = data.cursor.y;
  //     }
  //   });

  //   finalY = Math.max(amountInWordsY + 10, totalsTableY + 10);

  //   const footerStartY = finalY + 30;
  //   const stampWidth = 100;
  //   const stampHeight = 70;
  //   const stampX = margin + 150;

  //   doc.setFontSize(9);
  //   doc.setFont('helvetica', 'normal');
  //   doc.text('For Company Name', margin, footerStartY);
  //   doc.text('Accounts Department', margin, footerStartY + stampHeight - 10);

    
  //   doc.setFillColor(200, 200, 200);
  //   doc.rect(stampX, footerStartY - 15, stampWidth, stampHeight, 'F');
  //   doc.setTextColor(0, 0, 0);
  //   doc.setFontSize(8);
  //   doc.text('Insert Stamp Image', stampX + stampWidth / 2, footerStartY - 15 + stampHeight / 2, { align: 'center' });

  //   doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
  // };
  // const numberToWords = (num) => {
  //   const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
  //   const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
  //   if (num === 0) return 'Zero';
  //   let words = '';
  //   if (num >= 1000000000) { words += numberToWords(Math.floor(num / 1000000000)) + ' Billion '; num %= 1000000000; }
  //   if (num >= 1000000) { words += numberToWords(Math.floor(num / 1000000)) + ' Million '; num %= 1000000; }
  //   if (num >= 1000) { words += numberToWords(Math.floor(num / 1000)) + ' Thousand '; num %= 1000; }
  //   if (num >= 100) { words += ones[Math.floor(num / 100)] + ' Hundred '; num %= 100; }
  //   if (num >= 20) { words += tens[Math.floor(num / 10)] + ' '; num %= 10; }
  //   if (num > 0) { words += ones[num] + ' '; }

  //   const numStr = parseFloat(num).toFixed(2);
  //   const parts = numStr.split('.');
  //   let dollars = parseInt(parts[0]);
  //   let cents = parseInt(parts[1]);

  //   words = ''; 
  //   if (dollars === 0) words = 'Zero';
  //   else {
  //     if (dollars >= 1000000000) { words += numberToWords(Math.floor(dollars / 1000000000)) + ' Billion '; dollars %= 1000000000; }
  //     if (dollars >= 1000000) { words += numberToWords(Math.floor(dollars / 1000000)) + ' Million '; dollars %= 1000000; }
  //     if (dollars >= 1000) { words += numberToWords(Math.floor(dollars / 1000)) + ' Thousand '; dollars %= 1000; }
  //     if (dollars >= 100) { words += ones[Math.floor(dollars / 100)] + ' Hundred '; dollars %= 100; }
  //     if (dollars >= 20) { words += tens[Math.floor(dollars / 10)] + (dollars % 10 !== 0 ? ' ' : ''); dollars %= 10; }
  //     if (dollars > 0) { words += ones[dollars] + ' '; }
  //   }
  //   words = words.trim();

  //   if (cents > 0) {
  //     words += ` and ${cents.toString()}/100`;
  //   }
  //   return words.trim();
  // };

  const handleDownloadPDF = async (invoice) => {
  try {
    const response = await axiosInstance.get(
      `/pdf/invoice?InvoiceBillingId=${invoice._id}`,
      {
        responseType: "blob",
      }
    );
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", `${invoice.invoiceNumber || "invoice"}.pdf`);
    document.body.appendChild(link);
    link.click();
    link.remove();
  } catch (error) {
    console.error("❌ Error downloading invoice PDF:", error);
    alert("Failed to download invoice PDF.");
  }

  
};

  const { invocing, loading, error } = useSelector((state) => state.InvoicingBilling);
  console.log(invocing?.InvoicingBilling);

  useEffect(() => {
    dispatch(fetchInvoicingBilling());
  }, [dispatch]);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;


  const filteredEstimates = invocing?.InvoicingBilling
    ?.slice()
    .reverse()
    .filter((invoice) => {
     
      const terms = searchQuery.toLowerCase().trim().split(/\s+/).filter(Boolean);
  
      const invoiceNumber = (invoice.invoiceNumber || '').toLowerCase();
      const clientName = (invoice.clients?.[0]?.clientName || '').toLowerCase();
      const projectName = (invoice.projectId?.[0]?.projectName || '').toLowerCase();
      const status = (invoice.status || '').toLowerCase();
      const amount = (invoice.lineItems?.[0]?.amount || '').toString().toLowerCase();
      const fields = [
        invoiceNumber,
        clientName,
        projectName,
        status,
        amount
      ];
    
      const matchesSearch = terms.length === 0 || terms.every(term =>
        fields.some(field => field.includes(term))
      );
      const matchesProject = selectedProject === 'All Projects' || 
        invoice.projectId?.[0]?.projectName === selectedProject;
      const matchesDate = !selectedDate || 
        new Date(invoice.date).toLocaleDateString() === new Date(selectedDate).toLocaleDateString();
      return matchesSearch && matchesProject && matchesDate;
    });

  const totalItems = filteredEstimates?.length || 0;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const paginatedEstimates = filteredEstimates
    ?.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);


  const handleDelete = (_id) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You want to mark this job as Cancelled?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, mark as Cancelled!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteInvoicingBilling(_id))
          .unwrap()
          .then(() => {
            Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
            dispatch(fetchInvoicingBilling());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong while updating.", "error");
          });
      }
    });
  };

  const UpdateInvocing = (invoice) => {
    navigate(`/admin/AddInvoice`, {
      state: { invoice }
    });
  };

  const [showFilters, setShowFilters] = useState(false);
  return (
    <div className="p-4 m-3" style={{ backgroundColor: "white", borderRadius: "10px" }}>
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <h2>Invoicing & Billing</h2>
        {/* Desktop generate button only */}
        {/* <div className="d-none d-md-block">
          <Link to={"/admin/AddInvoice"}>
            <button id="All_btn" className="btn btn-dark">
              Generate New Invoice
            </button>
          </Link>
        </div> */}
      </div>

      <div
        className={`row g-3 mb-4 
          ${showFilters ? 'd-block' : 'd-none d-md-flex'}
        `}
      >
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaSearch className="text-muted" />
            </span>
            <input
              type="text"
              className="form-control border-start-0"
              placeholder="Search invoices..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              {/* <FaCalendarAlt className="text-muted" /> */}
            </span>
            <input
              type="date"
              className="form-control border-start-0"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <Dropdown>
            <Dropdown.Toggle variant="light" id="project-dropdown" className="w-100">
              {selectedProject}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>
                All Projects
              </Dropdown.Item>
              {[...new Set((invocing?.InvoicingBilling || []).map((invoice) => 
                invoice.projectId?.[0]?.projectName || "N/A"
              ))].filter(name => name !== "N/A").map((projectName, index) => (
                <Dropdown.Item key={index} onClick={() => setSelectedProject(projectName)}>
                  {projectName}
                </Dropdown.Item>
              ))}
            </Dropdown.Menu>
          </Dropdown>
        </div>
      </div>

      {/* Mobile filter dropdown panel */}
      {showFilters && (
        <div id="mobile-filters"
          className="d-md-none mb-3 p-3 border rounded"
          style={{ backgroundColor: '#f8f9fa' }}>
          {/* Search inside mobile filters */}
          <InputGroup className="mb-3">
            <InputGroup.Text>
              <FaSearch />
            </InputGroup.Text>
            <Form.Control
              placeholder="Search invoices..." value={searchQuery}   onChange={handleSearch} />
          </InputGroup>

          {/* <Form.Select className="mb-2">
            <option>All Clients</option>
          </Form.Select> */}
          <Form.Select className="mb-2">
            <option>All Status</option>
          </Form.Select>
          <Button className="w-100 mb-3" variant="outline-secondary">
            <FaSort /> Sort
          </Button>

          {/* Generate New Invoice inside filter panel on mobile */}
          <Link to={"/admin/AddInvoice"}>
            <Button variant="dark" className="w-100">
              Generate New Invoice
            </Button>
          </Link>
        </div>
      )}

      {/* Table */}
      <Table hover responsive>
        <thead>
          <tr>
            <th onClick={() => handleSort('invoiceNumber')} style={{ whiteSpace: "nowrap" }}>Invoice #</th>
            <th onClick={() => handleSort('client')} style={{ cursor: 'pointer' }}>Client</th>
            <th onClick={() => handleSort('project')} style={{ cursor: 'pointer' }}>Project</th>
            <th onClick={() => handleSort('amount')} style={{ cursor: 'pointer' }}>Amount</th>
            <th onClick={() => handleSort('status')} style={{ cursor: 'pointer' }}>Status</th>
            <th onClick={() => handleSort('dueDate')} style={{ cursor: 'pointer' }}>Due Date</th>
            <th>Actions</th>
          </tr>
        </thead>
          <tbody>
            {paginatedEstimates?.map((invoice, index) => (
              <tr key={invoice.invoiceNumber || index}>
                <td style={{ whiteSpace: "nowrap" }} /* onClick={() => JobDetails(invoice._id)} */>
                  INV-{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
                </td>

                <td style={{ whiteSpace: "nowrap" }}>{invoice.clients?.[0]?.clientName || "N/A"}</td>
                <td style={{ whiteSpace: "nowrap" }}>{invoice.projectId?.[0]?.projectName || "N/A"}</td>
                <td style={{ whiteSpace: "nowrap" }}>${invoice.lineItems?.[0]?.amount || "N/A"}</td>
                <td>
                  <Badge bg={getStatusBadgeVariant(invoice.status)}>
                    {invoice.status}
                  </Badge>
                </td>
                <td>{invoice.date ? new Date(invoice.date).toLocaleDateString("en-GB") : 'N/A'}</td>
                <td>
                  <div className="d-flex gap-2">
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateInvocing(invoice)}>
                      <FaEdit />
                    </button>
                    {/* <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(invoice._id)}>
                      <FaTrash />
                    </button> */}
                   <button
  className="btn btn-sm btn-outline-primary"
  onClick={() => handleDownloadPDF(invoice)} // Pass current invoice
>
  <FaDownload />
</button>
                  </div>
                </td>
              </tr>
             ))}
          </tbody>
      </Table>

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mt-3 flex-wrap">
          <div className="text-muted small mb-2 mb-md-0">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default Invoicing_Billing;

















import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch } from 'react-redux';
import { createClients, fetchClient, UpdateClients } from '../../../redux/slices/ClientSlice';
import "react-toastify/dist/ReactToastify.css";


function AddClientManagement() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mo
  const location = useLocation();
  const { client } = location.state || {};
  const _id = client?._id 
  console.log("oo",_id);
  // Initial form state
  const [formData, setFormData] = useState({
    clientName: '',
    industry: '',
    website: '',
    clientAddress: '',
    TaxID_VATNumber: '',
    CSRCode: '',
    Status: ''
  });

  // Contact persons state
  const [contactPersons, setContactPersons] = useState([
    {
      contactName: '',
      jobTitle: '',
      email: '',
      phone: '',
      department: '',
      salesRepresentative: ''
    }
  ]);

  // Billing information state
  const [billingInformation, setBillingInformation] = useState([
    {
      billingAddress: '',
      billingContactName: '',
      billingEmail: '',
      billingPhone: '',
      currency: '',
      preferredPaymentMethod: ''
    }
  ]);
  // Shipping information state
  const [shippingInformation, setShippingInformation] = useState([
    {
      shippingAddress: '',
      shippingContactName: '',
      shippingEmail: '',
      shippingPhone: '',
      preferredShippingMethod: '',
      specialInstructions: ''
    }
  ]);
  // Financial information state
  const [financialInformation, setFinancialInformation] = useState([
    {
      annualRevenue: '',
      creditRating: '',
      bankName: '',
      accountNumber: '',
      fiscalYearEnd: '',
      financialContact: ''
    }
  ]);

  // Ledger information state
  const [ledgerInformation, setLedgerInformation] = useState([
    {
      accountCode: '',
      accountType: '',
      openingBalance: '',
      balanceDate: '',
      taxCategory: '',
      costCenter: ''
    }
  ]);

  // Additional information state
  const [additionalInformation, setAdditionalInformation] = useState({
    paymentTerms: '',
    creditLimit: '',
    notes: ''
  });


  useEffect(() => {
    const updateStates = (clientData) => {
      setFormData({
        clientName: clientData.clientName || '',
        industry: clientData.industry || '',
        website: clientData.website || '',
        clientAddress: clientData.clientAddress || '',
        TaxID_VATNumber: clientData.TaxID_VATNumber || '',
        CSRCode: clientData.CSRCode || '',
        Status: clientData.Status || ''
      });

      setContactPersons(clientData.contactPersons || []);
      setBillingInformation(clientData.billingInformation || []);
      setShippingInformation(clientData.shippingInformation || []);
      setFinancialInformation(clientData.financialInformation || []);
      setLedgerInformation(clientData.ledgerInformation || []);
      setAdditionalInformation(clientData.additionalInformation || {
        paymentTerms: '',
        creditLimit: '',
        notes: ''
      });
    };

    if (client) {
      updateStates(client);
    } else if (id) {
      dispatch(fetchclientById(id)).then((res) => {
        const fetchedclient = res.payload;
        if (fetchedclient) {
          updateStates(fetchedclient);
        }
      });
    }
  }, [id, dispatch, client]);



  // Handle basic form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle contact person changes
  const handleContactChange = (index, e) => {
    const { name, value } = e.target;
    const updatedContacts = [...contactPersons];
    updatedContacts[index] = {
      ...updatedContacts[index],
      [name]: value
    };
    setContactPersons(updatedContacts);
  };

  // Handle billing information changes
  const handleBillingChange = (index, e) => {
    const { name, value } = e.target;
    const updatedBilling = [...billingInformation];
    updatedBilling[index] = {
      ...updatedBilling[index],
      [name]: value
    };
    setBillingInformation(updatedBilling);
  };

  // Handle shipping information changes
  const handleShippingChange = (index, e) => {
    const { name, value } = e.target;
    const updatedShipping = [...shippingInformation];
    updatedShipping[index] = {
      ...updatedShipping[index],
      [name]: value
    };
    setShippingInformation(updatedShipping);
  };

  // Handle financial information changes
  const handleFinancialChange = (index, e) => {
    const { name, value } = e.target;
    const updatedFinancial = [...financialInformation];
    updatedFinancial[index] = {
      ...updatedFinancial[index],
      [name]: value
    };
    setFinancialInformation(updatedFinancial);
  };

  // Handle ledger information changes
  const handleLedgerChange = (index, e) => {
    const { name, value } = e.target;
    const updatedLedger = [...ledgerInformation];
    updatedLedger[index] = {
      ...updatedLedger[index],
      [name]: value
    };
    setLedgerInformation(updatedLedger);
  };


  const handleAdditionalChange = (e) => {
    const { name, value } = e.target;
    setAdditionalInformation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    const fullData = {
      ...formData,
      contactPersons,
      billingInformation,
      shippingInformation,
      financialInformation,
      ledgerInformation,
      additionalInformation
    };
    console.log('Full Data Object:', fullData);
    if (_id) {
      dispatch(UpdateClients({ _id, data: fullData }))
        .unwrap()
        .then(() => {
          toast.success("clientupdated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Failed to update client!");
        });
    } else {
      dispatch(createClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientcreated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Error creating client");
        });
    }
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const fullData = {
  //     ...formData,
  //     contactPersons,
  //     billingInformation,
  //     shippingInformation,
  //     financialInformation,
  //     ledgerInformation,
  //     additionalInformation
  //   };
  //         dispatch(createClients(fullData))
  //       .unwrap()
  //       .then(() => {
  //         toast.success("clientcreated successfully!");
  //         navigate("/clientManagement");
  //       })
  //       .catch(() => {
  //         toast.error("Error creating client");
  //       });

  // };

  return (
    <>
      <ToastContainer />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-body">
            {/* <h1 className="card-title h4 mb-4">Add Company</h1> */}
            <h2 className="mb-4">{id || client?._id ? "Edit client" : "New Company (Client)"}</h2>
            <form className="row g-3" onSubmit={handleSubmit}>
              <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
              <div className="col-md-6"></div>
              <div className="col-md-6">
                <label className="form-label">Name</label>
                <input required type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
              </div>
              <div className="col-md-6">
                <label className="form-label">Industry</label>
                <select className="form-select" name="industry" required value={formData.industry} onChange={handleChange}>
                  <option value="">Select industry</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="tech">Technology</option>
                  <option value="retail">Retail</option>
                </select>
              </div>
              <div className="col-md-6">
                <label className="form-label">Website</label>
                <input required type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
              </div>
              <div className="col-md-6">
                <label className="form-label">Client Address</label>
                <textarea required className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
              </div>
              <div className="col-md-6">
                <label className="form-label">Tax ID/VAT Number</label>
                <input required type="text" name="TaxID_VATNumber" value={formData.TaxID_VATNumber} onChange={handleChange} className="form-control" />
              </div>
              <div className="col-md-6">
                <label className="form-label">CSR Code</label>
                <input type="text" name="CSRCode" required value={formData.CSRCode} onChange={handleChange} className="form-control" />
              </div>
              <div className="col-md-6">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="Status"
                  required
                  value={formData.Status}
                  onChange={handleChange}
                >
                  <option value="">Select Status</option> {/* empty option for forcing selection */}
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
              </div>

              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Contact Persons</h5>

                {contactPersons.map((contact, index) => (
                  <div className="border p-3 mb-3" key={index}>
                    <div className="row">
                      <div className="col-md-6">
                        <label className="form-label">Contact Name</label>
                        <input
                          type="text"
                          name="contactName"
                          required
                          value={contact.contactName}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Contact Name"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Job Title</label>
                        <input
                          type="text"
                          name="jobTitle"
                          required
                          value={contact.jobTitle}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Job Title"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                          type="email"
                          name="email"
                          required
                          value={contact.email}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Email"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Phone</label>
                        <input
                          type="tel"
                          name="phone"
                          required
                          value={contact.phone}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Phone"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Department</label>
                        <input
                          type="text"
                          name="department"
                          required
                          value={contact.department}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Department"
                        />
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Sales Representative</label>
                        <input
                          type="text"
                          name="salesRepresentative"
                          required
                          value={contact.salesRepresentative}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Sales Representative"
                        />
                      </div>

                      <div className="col-md-12 mt-2 d-flex justify-content-end">
                        {contactPersons.length > 1 && (
                          <button
                            type="button"
                            className="btn btn-danger btn-sm"
                            onClick={() => {
                              const updatedContacts = [...contactPersons];
                              updatedContacts.splice(index, 1);
                              setContactPersons(updatedContacts);
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Add More Button */}
                <div className="mb-3">
                  <button
                    type="button"
                    className="btn btn-primary"
                    onClick={() => {
                      setContactPersons([
                        ...contactPersons,
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    }}
                  >
                    + Add Another Contact
                  </button>
                </div>
              </div>

              {/* Billing Information */}
              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Billing Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Billing Address</label>
                  <textarea className="form-control" rows="3" name="billingAddress" required value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Contact Name</label>
                  <input type="text" className="form-control" name="billingContactName" required value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Email</label>
                  <input type="email" className="form-control" name="billingEmail" required value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Phone</label>
                  <input type="tel" className="form-control" name="billingPhone" required value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <select className="form-select" name="currency" required value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <select className="form-select" name="preferredPaymentMethod" required value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Payment Method</option>
                    <option value="BankTransfer">BankTransfer</option>
                    <option value="CreditCard">CreditCard</option>
                    <option value="Check">Check</option>
                  </select>
                </div>

                {/* Shipping Information */}
                <h5 className="mb-3 mt-4">Shipping Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Shipping Address</label>
                  <textarea className="form-control" rows="3" name="shippingAddress" required value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Contact Name</label>
                  <input type="text" className="form-control" name="shippingContactName" required value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Email</label>
                  <input type="email" className="form-control" name="shippingEmail" required value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Phone</label>
                  <input type="tel" className="form-control" name="shippingPhone" required value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <select className="form-select" name="preferredShippingMethod" required value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                    <option value="">Select Shipping Method</option>
                    <option value="Standard">Standard</option>
                    <option value="Express">Express</option>
                    <option value="Overnight">Overnight</option>
                    <option value="Ground">Ground</option>
                  </select>
                </div>
                <div className="col-md-12">
                  <label className="form-label">Special Instructions</label>
                  <textarea className="form-control" rows="3" name="specialInstructions" required value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                </div>

                {/* Financial Information */}
                <h5 className="mb-3 mt-4">Financial Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Annual Revenue</label>
                  <input type="number" className="form-control" name="annualRevenue" required value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Rating</label>
                  <input type="text" className="form-control" name="creditRating" required value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Bank Name</label>
                  <input type="text" className="form-control" name="bankName" required value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Number</label>
                  <input type="text" className="form-control" name="accountNumber" required value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Fiscal Year End</label>
                  <input type="date" className="form-control" name="fiscalYearEnd" required value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Financial Contact</label>
                  <input type="text" className="form-control" name="financialContact" required value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                </div>

                {/* Ledger Information */}
                <h5 className="mb-3 mt-4">Ledger Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Account Code</label>
                  <input type="text" className="form-control" name="accountCode" required value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <select className="form-select" name="accountType" required value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="">Select Account Type</option>
                    <option value="AccountsReceivable">AccountsReceivable</option>
                    <option value="AccountsPayable">AccountsPayable</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Opening Balance</label>
                  <input type="number" className="form-control" name="openingBalance" required value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Balance Date</label>
                  <input type="date" className="form-control" name="balanceDate" required value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                </div>
                <div className="col-md-6">
                  <label className="form-label">Tax Category</label>
                  <select className="form-select" name="taxCategory" required value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="standard">Standard Rate</option>
                    <option value="reduced">Reduced Rate</option>
                    <option value="zero">Zero Rate</option>
                  </select>
                </div>
                <div className="col-md-6">
                  <label className="form-label">Cost Center</label>
                  <input type="text" className="form-control" name="costCenter" required value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                </div>

                {/* Additional Information */}
                <h5 className="mb-3 mt-4">Additional Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Payment Terms</label>
                  <select
                    className="form-select"
                    name="paymentTerms"
                    required
                    value={additionalInformation.paymentTerms}
                    onChange={handleAdditionalChange}
                  >
                    <option value="">Select Payment Terms</option>  {/* <-- placeholder */}
                    <option value="net30">Net 30</option>
                    <option value="net60">Net 60</option>
                    <option value="net90">Net 90</option>
                  </select>
                </div>

                <div className="col-md-6">
                  <label className="form-label">Credit Limit</label>
                  <input type="number" className="form-control" name="creditLimit" required value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                </div>
              </div>
              <div className="col-md-12">
                <label className="form-label">Notes</label>
                <textarea className="form-control" rows="3" name="notes" required value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
              </div>


              <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>
                <button type="submit" id="btn-All" className="btn btn-dark">{id || client?._id ? "Update client" : "Create"}</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>

  );
}

export default AddClientManagement;








import React, { useState } from "react";
import { Container, Row, Col, Form, Button, Nav, Tab, Tabs, Card, Table,} from "react-bootstrap";

const SettingsPage = () => {
  const [darkMode, setDarkMode] = useState(false);
  const [compactView, setCompactView] = useState(false);
  const [autoSave, setAutoSave] = useState(true);

  return (
    <Container fluid className="p-4">
      <h4 className="mb-4 fw-bold">Settings</h4>
      <Tab.Container defaultActiveKey="general">
        <Nav variant="tabs" className="mb-3">
          <Nav.Item>
            <Nav.Link eventKey="general">General Preferences</Nav.Link>
          </Nav.Item>
          {/* <Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="email">Email Notifications</Nav.Link>
            </Nav.Item>
          </Nav.Item>
          <Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="cloud">Cloud Storage</Nav.Link>
            </Nav.Item>
          </Nav.Item>
          <Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="mobile">Mobile Access</Nav.Link>
            </Nav.Item>
          </Nav.Item>
          <Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="system">System</Nav.Link>
            </Nav.Item>
          </Nav.Item>
          <Nav.Item>
            <Nav.Item>
              <Nav.Link eventKey="document-layout">Document</Nav.Link>
            </Nav.Item>
          </Nav.Item> */}
        </Nav>

        <Tab.Content>
          <Tab.Pane eventKey="general">
            <Row className="mb-4">
              <Col md={6}>
                <h5>Interface Settings</h5>
                <Form.Check type="switch" label="Enable Dark Mode" checked={darkMode}
                  onChange={() => setDarkMode(!darkMode)}
                />
                <Form.Check type="switch" label="Compact View" checked={compactView}
                  onChange={() => setCompactView(!compactView)}/>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Language & Region</h5>
                <Form.Group className="mb-2">
                  <Form.Label>Language</Form.Label>
                  <Form.Select>
                    <option>English (US)</option>
                  </Form.Select>
                </Form.Group>
              </Col>
              <Col md={6}>
                <Form.Group className="mb-2 mt-4 pt-2">
                  <Form.Label>Time Zone</Form.Label>
                  <Form.Select>
                    <option>UTC-08:00 Pacific Time</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Default Settings</h5>
                <Form.Group className="mb-2">
                  <Form.Label>Default Project View</Form.Label>
                  <Form.Select>
                    <option>List View</option>
                  </Form.Select>
                </Form.Group>
                <Form.Group className="mb-2">
                  <Form.Label>Default Dashboard</Form.Label>
                  <Form.Select>
                    <option>Project Overview</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Session Settings</h5>
                <Form.Check  type="switch" label="Auto-save Changes"
                  checked={autoSave}
                  onChange={() => setAutoSave(!autoSave)}/>
                <Form.Group className="mt-2">
                  <Form.Label>Session Timeout</Form.Label>
                  <Form.Select>
                    <option>30 minutes</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <div className="d-flex gap-2">
              <Button variant="secondary">Reset to Default</Button>
              <Button id="All_btn" variant="dark">Save Changes</Button>
            </div>
          </Tab.Pane>

          <Tab.Pane eventKey="email">
            <Row className="mb-4">
              <Col md={6}>
                <h5>Notification Types</h5>
                <Form.Check
                  type="switch"
                  label={
                    <>
                      <div className="fw-semibold">Project Updates</div>
                      <div className="text-muted small">
                        Receive updates about project status changes and
                        milestones
                      </div>
                    </>
                  }
                  className="mb-3"
                  defaultChecked
                />
                <Form.Check
                  type="switch"
                  label={
                    <>
                      <div className="fw-semibold">Task Assignments</div>
                      <div className="text-muted small">
                        Get notified when you are assigned to new tasks
                      </div>
                    </>
                  }
                  className="mb-3"
                  defaultChecked
                />
                <Form.Check
                  type="switch"
                  label={
                    <>
                      <div className="fw-semibold">Due Date Reminders</div>
                      <div className="text-muted small">
                        Receive reminders before task due dates
                      </div>
                    </>
                  }
                  className="mb-3"
                  defaultChecked
                />
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Email Frequency</h5>
                <Form.Group className="mb-3">
                  <Form.Label>Daily Digest</Form.Label>
                  <Form.Select defaultValue="Send at 9:00 AM">
                    <option>Send at 9:00 AM</option>
                    <option>Send at 12:00 PM</option>
                    <option>Send at 6:00 PM</option>
                  </Form.Select>
                </Form.Group>

                <Form.Group>
                  <Form.Label>Weekly Summary</Form.Label>
                  <Form.Select defaultValue="Send on Monday">
                    <option>Send on Monday</option>
                    <option>Send on Friday</option>
                    <option>Send on Sunday</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Notification Preferences</h5>
                <Form.Check
                  type="switch"
                  label={
                    <>
                      <div className="fw-semibold">Desktop Notifications</div>
                      <div className="text-muted small">
                        Show notifications on your desktop
                      </div>
                    </>
                  }
                  className="mb-3"
                  defaultChecked
                />
                <Form.Check
                  type="switch"
                  label={
                    <>
                      <div className="fw-semibold">
                        Mobile Push Notifications
                      </div>
                      <div className="text-muted small">
                        Receive notifications on your mobile device
                      </div>
                    </>
                  }
                  defaultChecked
                />
              </Col>
            </Row>

            <div className="d-flex gap-2">
              <Button variant="secondary">Reset to Default</Button>
              <Button id="All_btn" variant="dark">Save Changes</Button>
            </div>
          </Tab.Pane>

          <Tab.Pane eventKey="cloud">
            <Row className="mb-4">
              <Col md={8}>
                <h5>Connected Storage Services</h5>

                <div className="border rounded p-3 mb-3 d-flex justify-content-between align-items-center bg-light">
                  <div>
                    <div className="fw-semibold">Google Drive</div>
                    <div className="text-muted small">
                      Connected · 15 GB used of 100 GB
                    </div>
                  </div>
                  <Button variant="link" className="text-danger p-0">
                    Disconnect
                  </Button>
                </div>

                <div className="border rounded p-3 mb-4 d-flex justify-content-between align-items-center bg-light">
                  <div>
                    <div className="fw-semibold">Dropbox</div>
                    <div className="text-muted small">
                      Connected · 8 GB used of 50 GB
                    </div>
                  </div>
                  <Button variant="link" className="text-danger p-0">
                    Disconnect
                  </Button>
                </div>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col>
                <h5>Add New Storage</h5>
                <div className="d-flex flex-wrap gap-3">
                  <Card
                    style={{
                      width: "10rem",
                      textAlign: "center",
                      cursor: "pointer",
                    }}
                    className="p-3"
                  >
                    <div className="text-muted">Image</div>
                    <div className="fw-semibold mt-2">Connect OneDrive</div>
                  </Card>
                  <Card
                    style={{
                      width: "10rem",
                      textAlign: "center",
                      cursor: "pointer",
                    }}
                    className="p-3"
                  >
                    <div className="text-muted">Image</div>
                    <div className="fw-semibold mt-2">Connect Box</div>
                  </Card>
                  <Card
                    style={{
                      width: "10rem",
                      textAlign: "center",
                      cursor: "pointer",
                    }}
                    className="p-3"
                  >
                    <div className="text-muted">Image</div>
                    <div className="fw-semibold mt-2">Connect AWS S3</div>
                  </Card>
                </div>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Storage Settings</h5>
                <Form.Group className="mb-3">
                  <Form.Label>Default Upload Location</Form.Label>
                  <Form.Select defaultValue="Google Drive">
                    <option>Google Drive</option>
                    <option>Dropbox</option>
                    <option>OneDrive</option>
                  </Form.Select>
                </Form.Group>

                <Form.Group className="mb-3">
                  <Form.Label>File Sync Frequency</Form.Label>
                  <Form.Select defaultValue="Real-time">
                    <option>Real-time</option>
                    <option>Every 15 minutes</option>
                    <option>Every hour</option>
                  </Form.Select>
                </Form.Group>

                <Form.Check type="switch" id="auto-sync"
                  label={
                    <>
                      <div className="fw-semibold">Auto-sync Files</div>
                      <div className="text-muted small">  Automatically sync files between services </div>
                    </>}
                  defaultChecked/>
              </Col>
            </Row>
          </Tab.Pane>

          <Tab.Pane eventKey="mobile">
            <Row className="mb-4">
              <Col md={6}>
                <h5>Mobile App Settings</h5>
                <Form.Check
                  type="switch"
                  id="enable-mobile-access"
                  label={
                    <>
                      <div className="fw-semibold">Enable Mobile Access</div>
                      <div className="text-muted small">
                        Allow access to the system through mobile devices
                      </div>
                    </>
                  }
                  defaultChecked className="mb-3"/>

                <Form.Group>
                  <Form.Label>Push Notifications</Form.Label>
                  <Form.Select defaultValue="All notifications">
                    <option>All notifications</option>
                    <option>Only important</option>
                    <option>None</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Connected Devices</h5>
                <div className="border rounded p-3 mb-3 d-flex justify-content-between align-items-center bg-light">
                  <div>
                    <div className="fw-semibold">iPhone 13 Pro</div>
                    <div className="text-muted small">
                      Last active: 2 minutes ago
                    </div>
                  </div>
                  <Button variant="link" className="text-danger p-0">
                    Remove
                  </Button>
                </div>
                <div className="border rounded p-3 d-flex justify-content-between align-items-center bg-light">
                  <div>
                    <div className="fw-semibold">iPad Pro</div>
                    <div className="text-muted small">
                      Last active: 2 hours ago
                    </div>
                  </div>
                  <Button variant="link" className="text-danger p-0">
                    Remove
                  </Button>
                </div>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Security Settings</h5>
                <Form.Check
                  type="switch"
                  id="biometric-auth"
                  label={
                    <>
                      <div className="fw-semibold"> Biometric Authentication </div>
                      <div className="text-muted small">  Use fingerprint or face recognition to login </div>
                    </>
                  }
                  defaultChecked
                  className="mb-3"
                />

                <Form.Check
                  type="switch"
                  id="location-services"
                  label={
                    <>
                      <div className="fw-semibold">Location Services</div>
                      <div className="text-muted small"> Allow app to access device location</div>
                    </>
                  } className="mb-3"/>
                <Form.Group>
                  <Form.Label>Session Timeout</Form.Label>
                  <Form.Select defaultValue="15 minutes">
                    <option>5 minutes</option>
                    <option>15 minutes</option>
                    <option>30 minutes</option>
                    <option>1 hour</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Data Usage</h5>
                <Form.Check
                  type="switch"
                  id="offline-access"
                  label={
                    <>
                      <div className="fw-semibold">Offline Access</div>
                      <div className="text-muted small">
                        Cache data for offline use
                      </div>
                    </>
                  }
                  defaultChecked
                  className="mb-3"
                />

                <Form.Group>
                  <Form.Label>Download Quality</Form.Label>
                  <Form.Select defaultValue="Auto (Network dependent)">
                    <option>Auto (Network dependent)</option>
                    <option>High</option>
                    <option>Medium</option>
                    <option>Low</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>
          </Tab.Pane>

          <Tab.Pane eventKey="system">
            <Row className="mb-4">
              <Col md={6}>
                <h5>System Information</h5>
                <div className="border rounded p-3 bg-light">
                  <div className="d-flex justify-content-between">
                    <div>
                      <div className="text-muted small">Version</div>
                      <div className="fw-semibold">2.1.0</div>
                    </div>
                    <div>
                      <div className="text-muted small">Last Updated</div>
                      <div className="fw-semibold">March 15, 2024</div>
                    </div>
                  </div>
                </div>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>Database Management</h5>
                <div className="d-flex justify-content-between align-items-center mb-3">
                  <div>
                    <div className="fw-semibold">Database Backup</div>
                    <div className="text-muted small">
                      Last backup: 2 hours ago
                    </div>
                  </div>
                  <Button id="All_btn" variant="dark">Backup Now</Button>
                </div>

                <div className="mb-3">
                  <div className="fw-semibold">Storage Usage</div>
                  <div className="text-muted small mb-1">75% of 1TB used</div>
                  <div className="progress">
                    <div  id="All_btn"
                      className="progress-bar"
                      role="progressbar"
                      style={{ width: "75%" }} />
                  </div>
                </div>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={6}>
                <h5>System Maintenance</h5>
                <Form.Check
                  type="switch"
                  id="auto-updates"
                  label={
                    <>
                      <div className="fw-semibold">Automatic Updates</div>
                      <div className="text-muted small">
                        Install updates automatically
                      </div>
                    </>
                  }
                  defaultChecked
                  className="mb-3"
                />

                <Form.Group>
                  <Form.Label>Maintenance Window</Form.Label>
                  <Form.Select defaultValue="12:00 AM - 4:00 AM">
                    <option>12:00 AM - 4:00 AM</option>
                    <option>2:00 AM - 6:00 AM</option>
                    <option>1:00 AM - 3:00 AM</option>
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>

            <Row className="mb-4">
              <Col md={8}>
                <h5>System Logs</h5>
                <Table striped bordered hover responsive>
                  <thead>
                    <tr>
                      <th>Event</th>
                      <th>Time</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>System Backup</td>
                      <td>2 hours ago</td>
                      <td>
                        <span className="badge bg-success">Success</span>
                      </td>
                    </tr>
                    <tr>
                      <td>Security Update</td>
                      <td>1 day ago</td>
                      <td>
                        <span className="badge bg-success">Success</span>
                      </td>
                    </tr>
                  </tbody>
                </Table>
              </Col>
            </Row>
          </Tab.Pane>

          {/* <Tab.Pane eventKey="document-layout">
            <Row className="mb-4">
              <Col>
                <Nav variant="tabs" defaultActiveKey="estimates">
                  <Nav.Item>
                    <Nav.Link eventKey="estimates">Estimates</Nav.Link>
                  </Nav.Item>
                  <Nav.Item>
                    <Nav.Link eventKey="invoices">Invoices</Nav.Link>
                  </Nav.Item>
                  <Nav.Item>
                    <Nav.Link eventKey="purchase-orders">
                      Purchase Orders
                    </Nav.Link>
                  </Nav.Item>
                </Nav>
              </Col>
            </Row>
          </Tab.Pane> */}

          <Tab.Pane eventKey="document-layout">
            <Tabs defaultActiveKey="estimates" className="mb-4">
              <Tab eventKey="estimates" title="Estimates">
                {/* Yaha Estimates layout ka content ayega */}
                <Row>
                  <Col md={8}>
                    <div className="border rounded p-4 bg-white">
                      <h5 className="mb-3">ESTIMATE</h5>
                      <div className="text-muted small mb-2">
                        #EST-2024-001 • Date: Jan 15, 2024
                      </div>

                      <div className="mb-3">
                        <strong>Bill To:</strong>
                        <br />
                        Client Name
                        <br />
                        Client Company
                        <br />
                        Address Line 1<br />
                        City, State, ZIP
                      </div>

                      <div className="mb-3">
                        <strong>Ship To:</strong>
                        <br />
                        Same as billing address
                      </div>

                      <Table bordered className="mt-3">
                        <thead className="table-light">
                          <tr>
                            <th>Item Description</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Amount</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>Web Design Services</td>
                            <td>1</td>
                            <td>$1,500.00</td>
                            <td>$1,500.00</td>
                          </tr>
                          <tr>
                            <td colSpan="3" className="text-end fw-bold">
                              Total:
                            </td>
                            <td className="fw-bold">$1,500.00</td>
                          </tr>
                        </tbody>
                      </Table>

                      <div className="mt-4">
                        <strong>Terms and Conditions:</strong>
                        <ul className="small ps-3">
                          <li>
                            All items must meet specified quality standards
                          </li>
                          <li>Delivery must be made by the specified date</li>
                          <li>Payment terms: Net 30</li>
                          <li>
                            Please include PO number on all correspondence
                          </li>
                        </ul>
                      </div>

                      <div className="d-flex justify-content-between mt-4">
                        <div>
                          <div className="fw-semibold">Authorized by:</div>
                          <div>Procurement Manager</div>
                        </div>
                        <div>
                          <div className="fw-semibold">Date:</div>
                          <div>______________________</div>
                        </div>
                      </div>
                    </div>
                  </Col>

                  <Col md={4}>
                    <div className="border rounded p-3 bg-light">
                      <h6 className="mb-3">Layout Options</h6>
                      <Form.Group className="mb-3">
                        <Form.Label>Default Currency</Form.Label>
                        <Form.Select defaultValue="USD ($)">
                          <option>USD ($)</option>
                          <option>EUR (€)</option>
                          <option>INR (₹)</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Logo Position</Form.Label>
                        <Form.Select defaultValue="Left">
                          <option>Left</option>
                          <option>Center</option>
                          <option>Right</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Color Scheme</Form.Label>
                        <br />
                        {[
                          "#000000",
                          "#1D4ED8",
                          "#10B981",
                          "#F59E0B",
                          "#8B5CF6",
                          "#EF4444",
                        ].map((color) => (
                          <Button
                            key={color}
                            style={{ backgroundColor: color }}
                            className="me-1 mb-2"
                            variant="outline-light"
                            size="sm"
                            rounded
                          />
                        ))}
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Font Style</Form.Label>
                        <Form.Select defaultValue="Inter">
                          <option>Inter</option>
                          <option>Roboto</option>
                          <option>Poppins</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Font Size</Form.Label>
                        <Form.Select defaultValue="Small">
                          <option>Small</option>
                          <option>Medium</option>
                          <option>Large</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Section Order</Form.Label>
                        <ul className="list-group">
                          <li className="list-group-item">
                            Company Information
                          </li>
                          <li className="list-group-item">Customer Details</li>
                          <li className="list-group-item">Items Table</li>
                          <li className="list-group-item">
                            Terms & Conditions
                          </li>
                        </ul>
                      </Form.Group>

                      <Button id="All_btn" className="w-100 mb-2">
                        Save Layout
                      </Button>
                      <Button
                        variant="outline-secondary"
                        className="w-100 mb-2"
                      >
                        Preview
                      </Button>
                      <Button variant="outline-danger" className="w-100">
                        Reset to Default
                      </Button>
                    </div>
                  </Col>
                </Row>
              </Tab>
              <Tab eventKey="invoices" title="Invoices">
                {/* Yaha Invoices layout ka content ayega */}
                <Row>
                  <Col md={8}>
                    <div className="border rounded p-4 bg-white">
                      <h5 className="mb-3">INVOICE</h5>
                      <div className="text-muted small mb-2">
                        #INV-2024-001 • Date: Jan 15, 2024
                      </div>

                      <div className="mb-3">
                        <strong>Bill To:</strong>
                        <br />
                        Client Name
                        <br />
                        Client Company
                        <br />
                        Address Line 1<br />
                        City, State, ZIP
                      </div>

                      <Form.Group className="mb-3">
                        <Form.Label>
                          <strong>Currency Settings:</strong>
                        </Form.Label>
                        <Form.Select defaultValue="USD ($)">
                          <option>USD ($)</option>
                          <option>EUR (€)</option>
                          <option>INR (₹)</option>
                        </Form.Select>
                      </Form.Group>

                      <div className="mb-3">
                        <strong>Ship To:</strong>
                        <br />
                        Same as billing address
                      </div>

                      <Table bordered className="mt-3">
                        <thead className="table-light">
                          <tr>
                            <th>Item Description</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Amount</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>Web Design Services</td>
                            <td>1</td>
                            <td>$1,500.00</td>
                            <td>$1,500.00</td>
                          </tr>
                          <tr>
                            <td colSpan="3" className="text-end fw-bold">
                              Total:
                            </td>
                            <td className="fw-bold">$1,500.00</td>
                          </tr>
                        </tbody>
                      </Table>

                      <div className="mt-4">
                        <strong>Terms and Conditions:</strong>
                        <ul className="small ps-3">
                          <li>
                            All items must meet specified quality standards
                          </li>
                          <li>Delivery must be made by the specified date</li>
                          <li>Payment terms: Net 30</li>
                          <li>
                            Please include PO number on all correspondence
                          </li>
                        </ul>
                      </div>

                      <div className="d-flex justify-content-between mt-4">
                        <div>
                          <div className="fw-semibold">Authorized by:</div>
                          <div>Procurement Manager</div>
                        </div>
                        <div>
                          <div className="fw-semibold">Date:</div>
                          <div>______________________</div>
                        </div>
                      </div>
                    </div>
                  </Col>

                  <Col md={4}>
                    <div className="border rounded p-3 bg-light">
                      <h6 className="mb-3">Layout Options</h6>

                      <Form.Group className="mb-3">
                        <Form.Label>Default Currency</Form.Label>
                        <Form.Select defaultValue="USD ($)">
                          <option>USD ($)</option>
                          <option>EUR (€)</option>
                          <option>INR (₹)</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Logo Position</Form.Label>
                        <Form.Select defaultValue="Left">
                          <option>Left</option>
                          <option>Center</option>
                          <option>Right</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Color Scheme</Form.Label>
                        <br />
                        {[
                          "#000000",
                          "#1D4ED8",
                          "#10B981",
                          "#F59E0B",
                          "#8B5CF6",
                          "#EF4444",
                        ].map((color) => (
                          <Button
                            key={color}
                            style={{ backgroundColor: color }}
                            className="me-1 mb-2"
                            variant="outline-light"
                            size="sm"
                          />
                        ))}
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Font Style</Form.Label>
                        <Form.Select defaultValue="Inter">
                          <option>Inter</option>
                          <option>Roboto</option>
                          <option>Poppins</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Font Size</Form.Label>
                        <Form.Select defaultValue="Small">
                          <option>Small</option>
                          <option>Medium</option>
                          <option>Large</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Section Order</Form.Label>
                        <ul className="list-group">
                          <li className="list-group-item">
                            Company Information
                          </li>
                          <li className="list-group-item">Customer Details</li>
                          <li className="list-group-item">Items Table</li>
                          <li className="list-group-item">
                            Terms & Conditions
                          </li>
                        </ul>
                      </Form.Group>

                      <Button variant="dark" className="w-100 mb-2">
                        Save Layout
                      </Button>
                      <Button variant="outline-secondary"
                        className="w-100 mb-2">
                        Preview
                      </Button>
                      <Button variant="outline-danger" className="w-100">
                        Reset to Default
                      </Button>
                    </div>
                  </Col>
                </Row>
              </Tab>
              <Tab eventKey="purchase-orders" title="Purchase Orders">
                {/* Yaha Purchase Orders layout ka content ayega */}
                <Row>
                  <Col md={8}>
                    <div className="border rounded p-4 bg-white">
                      <h5 className="mb-3">Purchase Orders </h5>
                      <div className="text-muted small mb-2">
                        #EST-2024-001 • Date: Jan 15, 2024
                      </div>

                      <div className="mb-3">
                        <strong>Bill To:</strong>
                        <br />
                        Client Name
                        <br />
                        Client Company
                        <br />
                        Address Line 1<br />
                        City, State, ZIP
                      </div>

                      <div className="mb-3">
                        <strong>Ship To:</strong>
                        <br />
                        Same as billing address
                      </div>

                      <Table bordered className="mt-3">
                        <thead className="table-light">
                          <tr>
                            <th>Item Description</th>
                            <th>Quantity</th>
                            <th>Rate</th>
                            <th>Amount</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr>
                            <td>Web Design Services</td>
                            <td>1</td>
                            <td>$1,500.00</td>
                            <td>$1,500.00</td>
                          </tr>
                          <tr>
                            <td colSpan="3" className="text-end fw-bold">
                              Total:
                            </td>
                            <td className="fw-bold">$1,500.00</td>
                          </tr>
                        </tbody>
                      </Table>

                      <div className="mt-4">
                        <strong>Terms and Conditions:</strong>
                        <ul className="small ps-3">
                          <li>
                            All items must meet specified quality standards
                          </li>
                          <li>Delivery must be made by the specified date</li>
                          <li>Payment terms: Net 30</li>
                          <li>
                            Please include PO number on all correspondence
                          </li>
                        </ul>
                      </div>

                      <div className="d-flex justify-content-between mt-4">
                        <div>
                          <div className="fw-semibold">Authorized by:</div>
                          <div>Procurement Manager</div>
                        </div>
                        <div>
                          <div className="fw-semibold">Date:</div>
                          <div>______________________</div>
                        </div>
                      </div>
                    </div>
                  </Col>

                  <Col md={4}>
                    <div className="border rounded p-3 bg-light">
                      <h6 className="mb-3">Layout Options</h6>

                      <Form.Group className="mb-3">
                        <Form.Label>Default Currency</Form.Label>
                        <Form.Select defaultValue="USD ($)">
                          <option>USD ($)</option>
                          <option>EUR (€)</option>
                          <option>INR (₹)</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Logo Position</Form.Label>
                        <Form.Select defaultValue="Left">
                          <option>Left</option>
                          <option>Center</option>
                          <option>Right</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Color Scheme</Form.Label>
                        <br />
                        {[
                          "#000000",
                          "#1D4ED8",
                          "#10B981",
                          "#F59E0B",
                          "#8B5CF6",
                          "#EF4444",
                        ].map((color) => (
                          <Button
                            key={color}
                            style={{ backgroundColor: color }}
                            className="me-1 mb-2"
                            variant="outline-light"
                            size="sm"
                            rounded
                          />
                        ))}
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Font Style</Form.Label>
                        <Form.Select defaultValue="Inter">
                          <option>Inter</option>
                          <option>Roboto</option>
                          <option>Poppins</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Font Size</Form.Label>
                        <Form.Select defaultValue="Small">
                          <option>Small</option>
                          <option>Medium</option>
                          <option>Large</option>
                        </Form.Select>
                      </Form.Group>

                      <Form.Group className="mb-3">
                        <Form.Label>Section Order</Form.Label>
                        <ul className="list-group">
                          <li className="list-group-item">
                            Company Information
                          </li>
                          <li className="list-group-item">Customer Details</li>
                          <li className="list-group-item">Items Table</li>
                          <li className="list-group-item">
                            Terms & Conditions
                          </li>
                        </ul>
                      </Form.Group>

                      <Button variant="dark" className="w-100 mb-2">
                        Save Layout
                      </Button>
                      <Button
                        variant="outline-secondary"
                        className="w-100 mb-2"
                      >
                        Preview
                      </Button>
                      <Button variant="outline-danger" className="w-100">
                        Reset to Default
                      </Button>
                    </div>
                  </Col>
                </Row>
              </Tab>
            </Tabs>
          </Tab.Pane>
        </Tab.Content>
      </Tab.Container>
    </Container>
  );
};

export default SettingsPage;











import React, { useEffect, useState } from 'react';
import { Form, Table, Badge, InputGroup, Button, Dropdown } from 'react-bootstrap';
import { FaSearch, FaSort, FaEdit, FaTrash, FaDownload, FaFilter } from 'react-icons/fa';
import { Link, useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import { jsPDF } from "jspdf";
import autoTable from 'jspdf-autotable'; // Only this import should remain
import { deleteInvoicingBilling, fetchInvoicingBilling } from '../../../redux/slices/InvoicingBillingSlice';
import { useDispatch, useSelector } from 'react-redux';
import axiosInstance from '../../../redux/utils/axiosInstance';

function Invoicing_Billing() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedProject, setSelectedProject] = useState('All Projects');
  const [sortField, setSortField] = useState(null);
  const [sortDirection, setSortDirection] = useState('asc');
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const initialInvoices = [
    {
      invoiceNumber: 'INV-12345',
      client: 'Acme Corp',
      project: 'Holiday Package Design',
      amount: 2500.00,
      status: 'Paid',
      dueDate: '2024-01-15'
    },
    {
      invoiceNumber: 'INV-12345',
      client: 'Tech Solutions',
      project: 'Product Catalog',
      amount: 3750.00,
      status: 'Pending',
      dueDate: '2024-01-30'
    },
    {
      invoiceNumber: 'INV-12345',
      client: 'Global Inc',
      project: 'Brand Guidelines',
      amount: 5000.00,
      status: 'Overdue',
      dueDate: '2024-01-10'
    }
  ];

  const [invoices, setInvoices] = useState(initialInvoices);

  const getStatusBadgeVariant = (status) => {
    switch (status.toLowerCase()) {
      case 'paid':
        return 'success';
      case 'pending':
        return 'warning';
      case 'overdue':
        return 'danger';
      case 'Inactive':
        return 'secondary';
      case 'completed':
        return 'primary';
      case 'active':
        return 'success';
      default:
        return 'secondary';
    }
  };


  const handleSearch = (e) => {
    const query = e.target.value.toLowerCase();
    setSearchQuery(query);

    const filtered = initialInvoices.filter(invoice =>
      invoice.invoiceNumber.toLowerCase().includes(query) ||
      invoice.client.toLowerCase().includes(query) ||
      invoice.project.toLowerCase().includes(query)
    );
    setInvoices(filtered);
  };

  const handleSort = (field) => {
    const isAsc = sortField === field && sortDirection === 'asc';
    setSortDirection(isAsc ? 'desc' : 'asc');
    setSortField(field);

    const sorted = [...invoices].sort((a, b) => {
      if (field === 'amount') {
        return isAsc ? b[field] - a[field] : a[field] - b[field];
      }
      return isAsc
        ? b[field].localeCompare(a[field])
        : a[field].localeCompare(b[field]);
    });
    setInvoices(sorted);
  };

  // ... handleDownloadPDF ...
  const handleDownloadPDF = async (invoiceDataFromState) => {
    if (!invoiceDataFromState) {
      console.error("No data provided to handleDownloadPDF");
      Swal.fire("Error", "No data available to generate PDF.", "error");
      return;
    }

    try {
      const response = await axiosInstance.get(
        `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
        {
          responseType: "blob",
        }
      );
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error("❌ Error downloading invoice PDF:", error);
      alert("Failed to download invoice PDF.");
    }

    const doc = new jsPDF('p', 'pt', 'a4');
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 40;
    let finalY = margin;


    const companyDetails = {
      logoText: invoiceDataFromState.companyLogoText || 'COMPANY LOGO',
      addressDetails: invoiceDataFromState.companyAddressDetails || 'COMPANY ADDRESS DETAILS',
      name: invoiceDataFromState.companyNameHeader || 'Company name',
      trn: invoiceDataFromState.companyTRN || '100000000000002',
    };

    const invoiceMeta = {
      date: invoiceDataFromState.date || '22.03.2025',
      invoiceNo: invoiceDataFromState.invoiceNo || '5822',
    };

    const clientDetails = {
      name: invoiceDataFromState.clientName || 'Client Company Name',
      address1: invoiceDataFromState.clientAddress1 || 'Client Address Line 1',
      address2: invoiceDataFromState.clientAddress2 || 'Client Address Line 2, Country',
      tel: invoiceDataFromState.clientTel || '00000000000',
      contactPerson: invoiceDataFromState.clientContactPerson || 'Client Contact Person',
      email: invoiceDataFromState.clientEmail || 'client.email@example.com',
      trn: invoiceDataFromState.clientTRN || "Client's TRN No.",
    };

    const projectInfo = {
      costEstNo: invoiceDataFromState.costEstNo || 'CE No.',
      poNo: invoiceDataFromState.purchaseOrderNo || 'PO Number',
      projectNo: invoiceDataFromState.projectNo || 'Project No.',
    };

    const bankDetails = {
      accountName: invoiceDataFromState.bankAccountName || 'Company Name',
      bankName: invoiceDataFromState.bankName || "Company's Bank Name",
      iban: invoiceDataFromState.iban || 'XX000000000000000000001',
      swiftCode: invoiceDataFromState.swiftCode || 'XXXAAACC',
      terms: invoiceDataFromState.paymentTerms || 'Net 30',
    };

    const items = invoiceDataFromState.items && invoiceDataFromState.items.length > 0
      ? invoiceDataFromState.items.map((item, index) => [
        (index + 1).toString() + '.',
        item.description,
        item.qty,
        item.rate,
        parseFloat(item.amount).toFixed(2)
      ])
      : [
        ['1.', 'Print Samples', 6, 2, '12.00'],
      ];

    const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
    const vatRate = invoiceDataFromState.vatRate !== undefined ? invoiceDataFromState.vatRate : 0.10;
    const vatAmount = subTotal * vatRate;
    const grandTotal = subTotal + vatAmount;
    const amountInWords = invoiceDataFromState.amountInWords || `US Dollars ${numberToWords(grandTotal)} Only`;

    doc.setFillColor(192, 0, 0);
    doc.rect(margin, finalY, 220, 60, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(companyDetails.logoText, margin + 10, finalY + 25);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);


    const companyNameBlockY = finalY;
    doc.setFillColor(192, 0, 0);
    doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });


    let titleY = companyNameBlockY + 30 + 20;
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Tax Invoice', pageWidth - margin, titleY, { align: 'right' });

    let tableDetailsY = titleY + 10;
    autoTable(doc, {
      startY: tableDetailsY,
      head: [['TRN:', 'Date', 'Invoice No.']],
      body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [255, 255, 255], textColor: [0, 0, 0], fontStyle: 'bold' },
      columnStyles: {
        0: { cellWidth: 150, halign: 'left' },
        1: { cellWidth: 80, halign: 'left' },
        2: { cellWidth: 80, halign: 'left' },
      },
      margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) - 10 },
      tableWidth: 'wrap',
    });
    finalY = doc.lastAutoTable.finalY + 20;


    const invoiceToBoxWidth = 250;
    doc.setDrawColor(0, 0, 0);
    doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S');
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text('Invoice To', margin + 5, finalY + 15);
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    let textYInvoiceTo = finalY + 30;
    [clientDetails.name, clientDetails.address1, clientDetails.address2, `Tel: ${clientDetails.tel}`, `Contact: ${clientDetails.contactPerson}`, `Email: ${clientDetails.email}`].forEach(line => {
      doc.text(line, margin + 5, textYInvoiceTo);
      textYInvoiceTo += 12;
    });
    finalY += 100 + 10;

    autoTable(doc, {
      startY: finalY,
      head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project']],
      body: [[clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
      margin: { left: margin, right: margin },
    });
    finalY = doc.lastAutoTable.finalY + 10;


    autoTable(doc, {
      startY: finalY,
      head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
      body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0], fontStyle: 'bold' },
      margin: { left: margin, right: margin },
    });
    finalY = doc.lastAutoTable.finalY + 10;


    autoTable(doc, {
      startY: finalY,
      head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
      body: items,
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
      columnStyles: {
        0: { cellWidth: 40, halign: 'center' },
        1: { cellWidth: 'auto' },
        2: { cellWidth: 40, halign: 'right' },
        3: { cellWidth: 50, halign: 'right' },
        4: { cellWidth: 70, halign: 'right' },
      },
      margin: { left: margin, right: margin },
      didDrawPage: function (data) {

        finalY = data.cursor.y;
      }
    });
    const amountInWordsY = finalY + 20;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text(amountInWords, margin, amountInWordsY, { maxWidth: pageWidth - margin - 220 });


    const totalsTableWidth = 200;
    const totalsTableX = pageWidth - margin - totalsTableWidth;
    let totalsTableY = finalY + 10;

    autoTable(doc, {
      startY: totalsTableY,
      body: [
        ['Subtotal', `USD ${subTotal.toFixed(2)}`],
        [`VAT (${(vatRate * 100).toFixed(0)}%)`, `USD ${vatAmount.toFixed(2)}`],
        ['Total', `USD ${grandTotal.toFixed(2)}`]
      ],
      theme: 'grid',
      styles: {
        fontSize: 9,
        cellPadding: 5,
        lineWidth: 0.5,
        lineColor: [0, 0, 0]
      },
      headStyles: {
        fillColor: [255, 255, 255],
        textColor: [0, 0, 0],
      },
      columnStyles: {
        0: { halign: 'left', fontStyle: 'bold', cellWidth: totalsTableWidth * 0.6 },
        1: { halign: 'right', cellWidth: totalsTableWidth * 0.4 }
      },
      margin: { left: totalsTableX },
      tableWidth: totalsTableWidth,
      didDrawPage: function (data) {
        totalsTableY = data.cursor.y;
      }
    });

    finalY = Math.max(amountInWordsY + 10, totalsTableY + 10);

    const footerStartY = finalY + 30;
    const stampWidth = 100;
    const stampHeight = 70;
    const stampX = margin + 150;

    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text('For Company Name', margin, footerStartY);
    doc.text('Accounts Department', margin, footerStartY + stampHeight - 10);


    doc.setFillColor(200, 200, 200);
    doc.rect(stampX, footerStartY - 15, stampWidth, stampHeight, 'F');
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(8);
    doc.text('Insert Stamp Image', stampX + stampWidth / 2, footerStartY - 15 + stampHeight / 2, { align: 'center' });

    doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
  };
  const numberToWords = (num) => {
    const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];
    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];
    if (num === 0) return 'Zero';
    let words = '';
    if (num >= 1000000000) { words += numberToWords(Math.floor(num / 1000000000)) + ' Billion '; num %= 1000000000; }
    if (num >= 1000000) { words += numberToWords(Math.floor(num / 1000000)) + ' Million '; num %= 1000000; }
    if (num >= 1000) { words += numberToWords(Math.floor(num / 1000)) + ' Thousand '; num %= 1000; }
    if (num >= 100) { words += ones[Math.floor(num / 100)] + ' Hundred '; num %= 100; }
    if (num >= 20) { words += tens[Math.floor(num / 10)] + ' '; num %= 10; }
    if (num > 0) { words += ones[num] + ' '; }

    const numStr = parseFloat(num).toFixed(2);
    const parts = numStr.split('.');
    let dollars = parseInt(parts[0]);
    let cents = parseInt(parts[1]);

    words = '';
    if (dollars === 0) words = 'Zero';
    else {
      if (dollars >= 1000000000) { words += numberToWords(Math.floor(dollars / 1000000000)) + ' Billion '; dollars %= 1000000000; }
      if (dollars >= 1000000) { words += numberToWords(Math.floor(dollars / 1000000)) + ' Million '; dollars %= 1000000; }
      if (dollars >= 1000) { words += numberToWords(Math.floor(dollars / 1000)) + ' Thousand '; dollars %= 1000; }
      if (dollars >= 100) { words += ones[Math.floor(dollars / 100)] + ' Hundred '; dollars %= 100; }
      if (dollars >= 20) { words += tens[Math.floor(dollars / 10)] + (dollars % 10 !== 0 ? ' ' : ''); dollars %= 10; }
      if (dollars > 0) { words += ones[dollars] + ' '; }
    }
    words = words.trim();

    if (cents > 0) {
      words += ` and ${cents.toString()}/100`;
    }
    return words.trim();
  };

  //   const handleDownloadPDF = async (invoice) => {
  //   try {
  //     const response = await axiosInstance.get(
  //       `/pdf/invoice?InvoiceBillingId=${invoice._id}`,
  //       {
  //         responseType: "blob",
  //       }
  //     );
  //     const url = window.URL.createObjectURL(new Blob([response.data]));
  //     const link = document.createElement("a");
  //     link.href = url;
  //     link.setAttribute("download", `${invoice.invoiceNumber || "invoice"}.pdf`);
  //     document.body.appendChild(link);
  //     link.click();
  //     link.remove();
  //   } catch (error) {
  //     console.error("❌ Error downloading invoice PDF:", error);
  //     alert("Failed to download invoice PDF.");
  //   } 
  // };

  const { invocing, loading, error } = useSelector((state) => state.InvoicingBilling);
  console.log(invocing?.InvoicingBilling);

  useEffect(() => {
    dispatch(fetchInvoicingBilling());
  }, [dispatch]);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;


  const filteredEstimates = invocing?.InvoicingBilling
    ?.slice()
    .reverse()
    .filter((invoice) => {

      const terms = searchQuery.toLowerCase().trim().split(/\s+/).filter(Boolean);

      const invoiceNumber = (invoice.invoiceNumber || '').toLowerCase();
      const clientName = (invoice.clients?.[0]?.clientName || '').toLowerCase();
      const projectName = (invoice.projectId?.[0]?.projectName || '').toLowerCase();
      const status = (invoice.status || '').toLowerCase();
      const amount = (invoice.lineItems?.[0]?.amount || '').toString().toLowerCase();
      const fields = [
        invoiceNumber,
        clientName,
        projectName,
        status,
        amount
      ];

      const matchesSearch = terms.length === 0 || terms.every(term =>
        fields.some(field => field.includes(term))
      );
      const matchesProject = selectedProject === 'All Projects' ||
        invoice.projectId?.[0]?.projectName === selectedProject;
      const matchesDate = !selectedDate ||
        new Date(invoice.date).toLocaleDateString() === new Date(selectedDate).toLocaleDateString();
      return matchesSearch && matchesProject && matchesDate;
    });

  const totalItems = filteredEstimates?.length || 0;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const paginatedEstimates = filteredEstimates
    ?.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);


  const handleDelete = (_id) => {
    Swal.fire({
      title: "Are you sure?",
      text: "You want to mark this job as Cancelled?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, mark as Cancelled!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteInvoicingBilling(_id))
          .unwrap()
          .then(() => {
            Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
            dispatch(fetchInvoicingBilling());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong while updating.", "error");
          });
      }
    });
  };

  const UpdateInvocing = (invoice) => {
    navigate(`/admin/AddInvoice`, {
      state: { invoice }
    });
  };

  const [showFilters, setShowFilters] = useState(false);
  return (
    <div className="p-4 m-3" style={{ backgroundColor: "white", borderRadius: "10px" }}>
      {/* Header */}
      <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap">
        <h2>Invoicing & Billing</h2>
        {/* Desktop generate button only */}
        {/* <div className="d-none d-md-block">
          <Link to={"/admin/AddInvoice"}>
            <button id="All_btn" className="btn btn-dark">
              Generate New Invoice
            </button>
          </Link>
        </div> */}
      </div>

      <div
        className={`row g-3 mb-4 
          ${showFilters ? 'd-block' : 'd-none d-md-flex'}
        `}
      >
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              <FaSearch className="text-muted" />
            </span>
            <input
              type="text"
              className="form-control border-start-0"
              placeholder="Search invoices..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <div className="input-group">
            <span className="input-group-text bg-white border-end-0">
              {/* <FaCalendarAlt className="text-muted" /> */}
            </span>
            <input
              type="date"
              className="form-control border-start-0"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        </div>
        <div className="col-md-4">
          <Dropdown>
            <Dropdown.Toggle variant="light" id="project-dropdown" className="w-100">
              {selectedProject}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>
                All Projects
              </Dropdown.Item>
              {[...new Set((invocing?.InvoicingBilling || []).map((invoice) =>
                invoice.projectId?.[0]?.projectName || "N/A"
              ))].filter(name => name !== "N/A").map((projectName, index) => (
                <Dropdown.Item key={index} onClick={() => setSelectedProject(projectName)}>
                  {projectName}
                </Dropdown.Item>
              ))}
            </Dropdown.Menu>
          </Dropdown>
        </div>
      </div>

      {/* Mobile filter dropdown panel */}
      {showFilters && (
        <div id="mobile-filters"
          className="d-md-none mb-3 p-3 border rounded"
          style={{ backgroundColor: '#f8f9fa' }}>
          {/* Search inside mobile filters */}
          <InputGroup className="mb-3">
            <InputGroup.Text>
              <FaSearch />
            </InputGroup.Text>
            <Form.Control
              placeholder="Search invoices..." value={searchQuery} onChange={handleSearch} />
          </InputGroup>

          {/* <Form.Select className="mb-2">
            <option>All Clients</option>
          </Form.Select> */}
          <Form.Select className="mb-2">
            <option>All Status</option>
          </Form.Select>
          <Button className="w-100 mb-3" variant="outline-secondary">
            <FaSort /> Sort
          </Button>

          {/* Generate New Invoice inside filter panel on mobile */}
          <Link to={"/admin/AddInvoice"}>
            <Button variant="dark" className="w-100">
              Generate New Invoice
            </Button>
          </Link>
        </div>
      )}

      {/* Table */}
      <Table hover responsive>
        <thead>
          <tr>
            <th onClick={() => handleSort('invoiceNumber')} style={{ whiteSpace: "nowrap" }}>Invoice #</th>
            <th onClick={() => handleSort('client')} style={{ cursor: 'pointer' }}>Client</th>
            <th onClick={() => handleSort('project')} style={{ cursor: 'pointer' }}>Project</th>
            <th onClick={() => handleSort('amount')} style={{ cursor: 'pointer' }}>Amount</th>
            <th onClick={() => handleSort('status')} style={{ cursor: 'pointer' }}>Status</th>
            <th onClick={() => handleSort('dueDate')} style={{ cursor: 'pointer' }}>Due Date</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {paginatedEstimates?.map((invoice, index) => (
            <tr key={invoice.invoiceNumber || index}>
              <td style={{ whiteSpace: "nowrap" }} /* onClick={() => JobDetails(invoice._id)} */>
                INV-{String((currentPage - 1) * itemsPerPage + index + 1).padStart(4, '0')}
              </td>

              <td style={{ whiteSpace: "nowrap" }}>{invoice.clients?.[0]?.clientName || "N/A"}</td>
              <td style={{ whiteSpace: "nowrap" }}>{invoice.projectId?.[0]?.projectName || "N/A"}</td>
              <td style={{ whiteSpace: "nowrap" }}>${invoice.lineItems?.[0]?.amount || "N/A"}</td>
              <td>
                <Badge bg={getStatusBadgeVariant(invoice.status)}>
                  {invoice.status}
                </Badge>
              </td>
              <td>{invoice.date ? new Date(invoice.date).toLocaleDateString("en-GB") : 'N/A'}</td>
              <td>
                <div className="d-flex gap-2">
                  <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateInvocing(invoice)}>
                    <FaEdit />
                  </button>
                  {/* <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(invoice._id)}>
                      <FaTrash />
                    </button> */}
                  <button
                    className="btn btn-sm btn-outline-primary"
                    onClick={() => handleDownloadPDF(invoice)} // Pass current invoice
                  >
                    <FaDownload />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </Table>

      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mt-3 flex-wrap">
          <div className="text-muted small mb-2 mb-md-0">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default Invoicing_Billing;








  const handleDownloadPDF = async (invoiceDataFromState) => {
    // if (!invoiceDataFromState) {
    //   console.error("No data provided to handleDownloadPDF");
    //   Swal.fire("Error", "No data available to generate PDF.", "error");
    //   return;
    // }
    // try {
    //   const response = await axiosInstance.get(
    //     `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
    //     {
    //       responseType: "blob",
    //     }
    //   );
    //   const url = window.URL.createObjectURL(new Blob([response.data]));
    //   const link = document.createElement("a");
    //   link.href = url;
    //   link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
    //   document.body.appendChild(link);
    //   link.click();
    //   link.remove();
    // } catch (error) {
    //   console.error("❌ Error downloading invoice PDF:", error);
    //   alert("Failed to download invoice PDF.");
    // }


    if (!invoiceDataFromState) {
      console.error("No data provided to handleDownloadPDF");
      Swal.fire("Error", "No data available to generate PDF.", "error");
      return;
    }
    
    try {
      const response = await axiosInstance.get(
        `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
        {
          responseType: "blob",
        }
      );
       consol.log(response,"ggg")
      // Log the Blob data as base64
      const reader = new FileReader();
      reader.onloadend = function () {
        console.log("API Response Data (Base64):", reader.result);  // Logs base64-encoded data
      };
      reader.readAsDataURL(response.data); // Convert blob to base64
    
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch (error) {
      console.error("❌ Error downloading invoice PDF:", error);
      alert("Failed to download invoice PDF.");
    }

    const invoiceData = invoiceDataFromState;

    const companyDetails = {
      logoText: 'COMPANY LOGO',
      addressDetails: 'COMPANY ADDRESS DETAILS',
      name: 'Company name',
      trn: '100000000000002',
    };

    const invoiceMeta = {
      date: invoiceData.date ? new Date(invoiceData.date).toLocaleDateString("en-GB") : 'N/A',
      invoiceNo: invoiceData._id || 'N/A',
    };

    const clientDetails = {
      name: invoiceData.clientId?.clientName || 'N/A',
      address1: invoiceData?.clients.clientAddress || 'N/A',
      
      address2: invoiceData.clientId?.shippingInformation?.[0]?.shippingAddress || 'N/A',
      tel: invoiceData.clientId?.contactPersons?.[0]?.phone || 'N/A',
      contactPerson: invoiceData.clientId?.contactPersons?.[0]?.contactName || 'N/A',
      email: invoiceData.clientId?.contactPersons?.[0]?.email || 'N/A',
      trn: invoiceData.clientId?.TaxID_VATNumber || 'N/A',
    };
    console.log(invoiceData ,"wwwww");
    const projectInfo = {
      costEstNo: invoiceData?.CostEstimatesId || 'N/A',
      poNo: invoiceData?.ReceivablePurchaseId || 'N/A',
      projectNo: invoiceData?.projectId?.[0]?.projectNo || 'N/A',
      projectName: invoiceData?.projectId?.[0]?.projectName || 'N/A',

    };

    const bankDetails = {
      accountName: invoiceData.clientId?.financialInformation?.[0]?.bankName || 'Company Name',
      bankName: invoiceData.clientId?.financialInformation?.[0]?.bankName || 'Company Bank Name',
      iban: invoiceData.clientId?.financialInformation?.[0]?.accountNumber || 'XX000000000000000000001',
      swiftCode: 'XXXAAACC',
      terms: invoiceData.clientId?.additionalInformation?.paymentTerms || 'Net 30',
    };

    const items = invoiceData.lineItems && invoiceData.lineItems.length > 0
      ? invoiceData.lineItems.map((item, index) => [
          (index + 1).toString() + '.',
          item.description,
          item.quantity,
          item.rate,
          parseFloat(item.amount).toFixed(2)
        ])
      : [
          ['1.', 'No items', 0, 0, '0.00'],
        ];

    const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
    const vatRate = 0.10;
    const vatAmount = subTotal * vatRate;
    const grandTotal = subTotal + vatAmount;
    const amountInWords = `US Dollars ${numberToWords(grandTotal)} Only`;

    const doc = new jsPDF('p', 'pt', 'a4');
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 40;
    let finalY = margin;

    doc.setFillColor(192, 0, 0);
    doc.rect(margin, finalY, 220, 60, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text(companyDetails.logoText, margin + 10, finalY + 25);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);

    const companyNameBlockY = finalY;
    doc.setFillColor(192, 0, 0);
    doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });

    let titleY = companyNameBlockY + 30 + 20;
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('Tax Invoice', pageWidth - margin, titleY, { align: 'right' });

    let tableDetailsY = titleY + 10;
    autoTable(doc, {
      startY: tableDetailsY,
      head: [['TRN:', 'Date', 'Invoice No.']],
      body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [255, 255, 255], textColor: [0, 0, 0], fontStyle: 'bold' },
      columnStyles: {
        0: { cellWidth: 150, halign: 'left' },
        1: { cellWidth: 80, halign: 'left' },
        2: { cellWidth: 80, halign: 'left' },
      },
      margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) - 10 },
      tableWidth: 'wrap',
    });
    finalY = doc.lastAutoTable.finalY + 20;

    const invoiceToBoxWidth = 250;
    doc.setDrawColor(0, 0, 0);
    doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S');
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text('Invoice To', margin + 5, finalY + 15);
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    let textYInvoiceTo = finalY + 30;
    [
      `Client Company: ${clientDetails?.name}`,
      `Client Address: ${clientDetails?.address1}`,
      `Client Address2: ${clientDetails?.address2}`,
      `Tel: ${clientDetails?.tel}`,
      `Contact: ${clientDetails.contactPerson}`,
      `Email: ${clientDetails.email}`
    ].forEach(line => {
      doc.text(line, margin + 5, textYInvoiceTo);
      textYInvoiceTo += 12;
    });
    finalY += 100 + 10;

    autoTable(doc, {
      startY: finalY,
      head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project No.']],
      body: [[clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
      margin: { left: margin, right: margin },
    });
    finalY = doc.lastAutoTable.finalY + 10;

    autoTable(doc, {
      startY: finalY,
      head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
      body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0], fontStyle: 'bold' },
      margin: { left: margin, right: margin },
    });
    finalY = doc.lastAutoTable.finalY + 10;

    autoTable(doc, {
      startY: finalY,
      head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
      body: items,
      theme: 'grid',
      styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
      headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
      columnStyles: {
        0: { cellWidth: 40, halign: 'center' },
        1: { cellWidth: 'auto' },
        2: { cellWidth: 40, halign: 'right' },
        3: { cellWidth: 50, halign: 'right' },
        4: { cellWidth: 70, halign: 'right' },
      },
      margin: { left: margin, right: margin },
      didDrawPage: function (data) {
        finalY = data.cursor.y;
      }
    });
    const amountInWordsY = finalY + 20;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text(amountInWords, margin, amountInWordsY, { maxWidth: pageWidth - margin - 220 });

    const totalsTableWidth = 200;
    const totalsTableX = pageWidth - margin - totalsTableWidth;
    let totalsTableY = finalY + 10;

    autoTable(doc, {
      startY: totalsTableY,
      body: [
        ['Subtotal', `USD ${subTotal.toFixed(2)}`],
        [`VAT (${(vatRate * 100).toFixed(0)}%)`, `USD ${vatAmount.toFixed(2)}`],
        ['Total', `USD ${grandTotal.toFixed(2)}`]
      ],
      theme: 'grid',
      styles: {
        fontSize: 9,
        cellPadding: 5,
        lineWidth: 0.5,
        lineColor: [0, 0, 0]
      },
      headStyles: {
        fillColor: [255, 255, 255],
        textColor: [0, 0, 0],
      },
      columnStyles: {
        0: { halign: 'left', fontStyle: 'bold', cellWidth: totalsTableWidth * 0.6 },
        1: { halign: 'right', cellWidth: totalsTableWidth * 0.4 }
      },
      margin: { left: totalsTableX },
      tableWidth: totalsTableWidth,
      didDrawPage: function (data) {
        totalsTableY = data.cursor.y;
      }
    });

    finalY = Math.max(amountInWordsY + 10, totalsTableY + 10);

    const footerStartY = finalY + 30;
    const stampWidth = 100;
    const stampHeight = 70;
    const stampX = margin + 150;

    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.text('For Company Name', margin, footerStartY);
    doc.text('Accounts Department', margin, footerStartY + stampHeight - 10);

    doc.setFillColor(200, 200, 200);
    doc.rect(stampX, footerStartY - 15, stampWidth, stampHeight, 'F');
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(8);
    doc.text('Insert Stamp Image', stampX + stampWidth / 2, footerStartY - 15 + stampHeight / 2, { align: 'center' });

    doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
  };
  







import React, { useEffect, useState } from "react";
import { Modal, Form, Table, Badge, Dropdown, Button } from "react-bootstrap";
import { BsPlusLg, BsPencil, BsTrash, BsUpload, BsClipboard } from "react-icons/bs";
import { Link, useNavigate } from "react-router-dom";
import { deleteCostEstimate, fetchCostEstimates } from "../../../redux/slices/costEstimatesSlice";
import { useDispatch, useSelector } from "react-redux";
import { FaDownload, FaTrash } from "react-icons/fa";
import Swal from 'sweetalert2';
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";
import { createReceivablePurchase, fetchReceivablePurchases } from "../../../redux/slices/receivablePurchaseSlice";
import { jsPDF } from "jspdf";
import autoTable from 'jspdf-autotable';
import { FaRegCopy } from "react-icons/fa";
import axios from "axios";
import axiosInstance from "../../../redux/utils/axiosInstance";

function CostEstimates() {
  const dispatch = useDispatch()
  const navigate = useNavigate()

  // State declarations
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedClient, setSelectedClient] = useState("All Clients");
  const [selectedPOStatus, setSelectedPOStatus] = useState("All PO Status");
  const [selectedStatus, setSelectedStatus] = useState("All Status");
  const [selectedDate, setSelectedDate] = useState("");
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [selectedPO, setSelectedPO] = useState(null);
  const [showAddPOModal, setShowAddPOModal] = useState(false);

  // PO Form states
  const [selectedProjectId, setSelectedProjectId] = useState("");
  const [selectedClientId, setSelectedClientId] = useState("");
  const [costEstimatesId, setCostEstimatesId] = useState("");

  const [poDate, setPODate] = useState("");
  const [POStatus, setPOStatus] = useState("");
  const [amount, setAmount] = useState("");
  const [poDocument, setPODocument] = useState(null);

  const { project } = useSelector((state) => state.projects);
  const { Clients } = useSelector((state) => state.client);
  const statuses = ["Pending", "Received", "Cancelled", "Completed", "open", "invoiced"];

  useEffect(() => {
    dispatch(fetchProject());
    dispatch(fetchClient());
    dispatch(fetchCostEstimates());
  }, [dispatch]);

  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find(p => p._id === selectedClientId);
      if (foundProject) {
        setSelectedProjectId(foundProject._id);
      }
    }
  }, [Clients, project, selectedClientId]);

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        Swal.fire({
          icon: 'error',
          title: 'File too large',
          text: 'Please upload a file smaller than 10MB'
        });
        return;
      }
      setPODocument(file);
    }
  };


  const handleSavePO = async () => {
    if (!selectedProjectId || !selectedClientId || !poDate || !POStatus || !amount) {
      Swal.fire({
        icon: 'error',
        title: 'Required Fields Missing',
        text: 'Please fill all required fields'
      });
      return;
    }

    const formData = new FormData();
    formData.append('projectsId', JSON.stringify([selectedProjectId]));
    formData.append('ClientId', selectedClientId);
    formData.append('ReceivedDate', poDate);
    formData.append('POStatus', POStatus);

    formData.append('Amount', amount);
    formData.append('CostEstimatesId', JSON.stringify([costEstimatesId]));

    if (poDocument) {
      formData.append('image', poDocument);
    }

    try {
      const result = await dispatch(createReceivablePurchase(formData));

      // Agar API success ho jaye tab fetch karo
      if (createReceivablePurchase.fulfilled.match(result)) {
        Swal.fire({
          icon: 'success',
          title: 'PO Created',
          text: 'Purchase order created successfully'
        });

        // Reset fields
        setSelectedProjectId("");
        setSelectedClientId("");
        setCostEstimatesId("");
        setPODate("");
        setPOStatus("");
        setAmount("");
        setPODocument(null);
        setShowAddPOModal(false);

        // ✅ Now fetch updated list
        dispatch(fetchReceivablePurchases());
        navigate("/admin/receivable");
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Creation Failed',
          text: 'Failed to create purchase order.'
        });
      }
    } catch (err) {
      console.error("Error creating PO:", err);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'Something went wrong while creating purchase order.'
      });
    }
  };


  // Convert to Invoice handler
  const handleConvertToInvoice = (po) => {
    setSelectedPO(po);
    setShowInvoiceModal(true);
  };


  // Add PO Modal
  const renderAddPOModal = () => (
    <Modal show={showAddPOModal} onHide={() => setShowAddPOModal(false)} size="lg">
      <Modal.Header closeButton>
        <Modal.Title>Add Purchase Order</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form>
          <Form.Group className="mb-2">
            <div className="row justify-content-center">
              <div className="col-md-6">
                <Form.Label className="d-block ">Project</Form.Label>
                <Form.Select
                  value={selectedProjectId}
                  onChange={(e) => setSelectedProjectId(e.target.value)}
                  className="form-control"
                  required>
                  <option value="">-- Select Project --</option>
                  {project?.data?.map((proj) => (
                    <option key={proj._id} value={proj._id}>
                      {proj.projectName || proj.name}
                    </option>
                  ))}
                </Form.Select>
              </div>
              <div className="col-md-6">
                <Form.Label className="d-block ">Client</Form.Label>
                <Form.Select
                  value={selectedClientId}
                  onChange={(e) => setSelectedClientId(e.target.value)}
                  className="form-control"
                  required>
                  <option value="">-- Select Client --</option>
                  {Clients?.data?.map((client) => (
                    <option key={client._id} value={client._id}>
                      {client.clientName}
                    </option>
                  ))}
                </Form.Select>
              </div>
            </div>
          </Form.Group>


          <Form.Group className="mb-3">
            <div className="row justify-content-center">
              <div className="col-md-6">
                <Form.Label className="d-block">PO Date</Form.Label>
                <Form.Control
                  type="date"
                  value={poDate}
                  onChange={(e) => setPODate(e.target.value)}
                  className="form-control"
                  required
                />
              </div>

              <div className="col-md-6">
                <Form.Label className="d-block">PO Status</Form.Label>
                <Form.Select
                  value={POStatus}
                  onChange={(e) => setPOStatus(e.target.value)}
                  className="form-control"
                  required>
                  <option value="">-- Select Status --</option>
                  {statuses.map((s) => (
                    <option key={s} value={s}>{s}</option>
                  ))}
                </Form.Select>
              </div>
            </div>
          </Form.Group>

          <Form.Group className="mb-3">
            <div className="row justify-content-center align-items-start">
              {/* PO Amount Field */}
              <div className="col-md-6 mb-3 mb-md-0">
                <Form.Label className="d-block ">PO Amount</Form.Label>
                <Form.Control
                  type="number"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  className="form-control"
                  placeholder="Enter amount"
                  required
                />
              </div>

              {/* File Upload Field */}
              <div className="col-md-6">
                <Form.Label className="d-block">Upload Document</Form.Label>
                <div className="file-upload">
                  <Form.Control
                    type="file"
                    accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                    onChange={handleFileUpload}
                    className="form-control" />

                  <small className="text-muted d-flex align-items-center mt-1">
                    <BsUpload className="me-2" /> Upload a file (PDF, DOC up to 10MB)
                  </small>
                </div>
              </div>
            </div>
          </Form.Group>

        </Form>
      </Modal.Body>
      <Modal.Footer className="d-flex justify-content-end gap-2">
        <Button variant="secondary" onClick={() => setShowAddPOModal(false)}>Cancel</Button>
        <Button variant="primary" onClick={handleSavePO}>Save PO</Button>
      </Modal.Footer>
    </Modal>
  );


  // //////////
  const { estimates, loading, error } = useSelector((state) => state.costEstimates);
  console.log("Cost Estimates:", estimates.costEstimates);

  useEffect(() => {
    dispatch(fetchCostEstimates());
  }, [dispatch]);


  // ye ok code hai 
  const getStatusClass = (status) => {
    switch ((status || "").toLowerCase().trim()) {
      case "active":
      case "active project":
      case "open":
        return "bg-primary text-white";
      case "inactive":
        return "bg-secondary text-white";
      case "in progress":
      case "pending":
        return "bg-warning text-dark";
      case "completed":
        return "bg-success text-white";
      case "closed":
        return "bg-dark text-white";
      case "cancelled":
        return "bg-danger text-white";
      case "on hold":
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
        case "pending":
      return "bg-warning text-dark";     // Yellow
    case "received":
      return "bg-info text-dark";        // Light Blue
    case "cancelled":
      return "bg-danger text-white";     // Red
    case "completed":
      return "bg-success text-white";    // Green
    case "open":
      return "bg-primary text-white";    // Blue
    case "invoiced":
      return "bg-dark text-white";       // Dark (You can change it as needed)
    case "in progress":
    case "in_progress":
      return "bg-warning text-dark";
    case "active":
      return "bg-primary text-white";
    case "reject":
      return "bg-danger text-white";
    case "review":
      return "bg-info text-dark";
    case "not started":
      return "bg-secondary text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const handleDelete = (_id) => {
    console.log(_id);
    Swal.fire({
      title: "Are you sure?",
      text: "You won't be able to revert this!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes, delete it!",
    }).then((result) => {
      if (result.isConfirmed) {
        dispatch(deleteCostEstimate(_id))
          .then(() => {
            Swal.fire("Deleted!", "The document has been deleted.", "success");
            dispatch(fetchCostEstimates());
          })
          .catch(() => {
            Swal.fire("Error!", "Something went wrong.", "error");
          });
      }
    });
  }

  const Duplicate = (po) => {
    navigate(`/admin/AddCostEstimates`, {
      state: {
        po,
        isDuplicate: true
      }
    });
  }
  const UpdateEstimate = (po) => {
    navigate(`/admin/AddCostEstimates`, {
      state: {
        po,
      }
    });
  }

  //     const Duplicate =(po)=>{    
  //  navigate(`/duplicate/AddCostEstimates/${po._id}`, { state: { po}});
  //   }


  // PAGINATION SETUP FOR ESTIMATES
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 7;

  // Add filtering logic before pagination
  const filteredEstimates = estimates?.costEstimates
    ?.slice()
    .reverse()
    .filter((estimate) => {
      // Split searchQuery by spaces, ignore empty terms
      const terms = searchQuery.toLowerCase().trim().split(/\s+/).filter(Boolean);
      // Prepare searchable fields as strings
      const estimateRef = (estimate.estimateRef || '').toLowerCase();
      const clientName = (estimate.clientId?.[0]?.clientName || '').toLowerCase();
      const projectNames = (estimate.projectId || []).map(project => (project.projectName || project.name || '').toLowerCase()).join(' ');
      const status = (estimate.Status || '').toLowerCase();
      const poStatus = (estimate.POStatus || '').toLowerCase();
      const fields = [
        estimateRef,
        clientName,
        projectNames,
        status,
        poStatus
      ];
      // Every term must be found in at least one field
      const matchesSearch = terms.length === 0 || terms.every(term =>
        fields.some(field => field.includes(term))
      );
      const matchesClient = selectedClient === "All Clients" ||
        estimate.clientId[0]?.clientName === selectedClient;
      const matchesPOStatus = selectedPOStatus === "All PO Status" ||
        estimate.POStatus === selectedPOStatus;
      const matchesStatus = selectedStatus === "All Status" ||
        estimate.Status === selectedStatus;
      const matchesDate = !selectedDate ||
        new Date(estimate.estimateDate).toLocaleDateString() === new Date(selectedDate).toLocaleDateString();
      return matchesSearch && matchesClient && matchesPOStatus && matchesStatus && matchesDate;
    });

  // Update pagination to use filtered data
  const totalItems = filteredEstimates?.length || 0;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  const paginatedEstimates = filteredEstimates
    ?.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);

  const handleDownloadPDF = async (po) => {
    try {
      const response = await axiosInstance.post(
        `/pdf?CostEstimatesId=${po._id}`,
        {
          projectId: po.projectId?.map(p => p._id),
          clientId: po.clientId?.map(c => c._id),
        }
      );

      const estimate = response.data?.data?.[0];
      if (!estimate) throw new Error("No estimate data found");

      const client = estimate.clientId?.[0] || {};
      const project = estimate.projectId?.[0] || {};
      const lineItems = estimate.lineItems || [];

      const doc = new jsPDF('p', 'pt', 'a4');
      const pageWidth = doc.internal.pageSize.width;

      // === HEADER ===
      doc.setFillColor(229, 62, 62); // Red banner
      doc.rect(40, 40, 200, 50, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text("COMPANY LOGO", 50, 60);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.text("COMPANY ADDRESS DETAILS", 50, 75);
      doc.setTextColor(0, 0, 0); // Reset text color

      // === Estimate Info (Right) ===
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(`Cost Estimate No. ${estimate.estimateRef || '---'}`, 350, 50);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text(`Date: ${new Date(estimate.estimateDate).toLocaleDateString("en-GB")}`, 350, 65);
      doc.text(`Req. Ref.: --`, 350, 80);

      // === Client Info ===
      let currentY = 120;
      doc.setFontSize(10);
      doc.text('To,', 40, currentY);
      currentY += 15;
      doc.text(`Client Name: ${client?.clientName || "Client Name"}`, 40, currentY);
      currentY += 14;
      doc.text(`Client Company Name: ${project?.projectName || "Client Company Name"}`, 40, currentY);
      currentY += 14;
      doc.text(`Address: ${client?.clientAddress?.split(',')[0] || "Address Line 1"}`, 40, currentY);
      currentY += 14;
      doc.text(`shipping Address: ${client?.shippingInformation[0].shippingAddress || "Address Line 2"}`, 40, currentY);
      currentY += 14;
      doc.text(`Email: ${client?.contactPersons[0].email || "email"}`, 40, currentY);
      currentY += 14;
      doc.text(`Phone: ${client?.contactPersons[0].phone || "Phone"}`, 40, currentY);
      currentY += 25;
      
      // === Table Data ===
      const tableData = lineItems.map((item, index) => [
        (index + 1).toString(),
        item.description || '',
        (item.quantity || 0).toString(),
        (item.rate || 0).toLocaleString('en-IN', { minimumFractionDigits: 2 }),
        ((item.quantity || 0) * (item.rate || 0)).toLocaleString('en-IN', { minimumFractionDigits: 2 })
      ]);

      // Add blank rows
      for (let i = 0; i < 15; i++) tableData.push(['', '', '', '', '']);

      let finalY;
      autoTable(doc, {
        startY: currentY,
        head: [['ITEM #', 'Brand & Design / Description', 'QTY', 'Unit Price (INR)', 'Amount (INR)']],
        body: tableData,
        styles: {
          fontSize: 9,
          cellPadding: 4,
          lineColor: [0, 0, 0],
          lineWidth: 0.3,
          halign: 'center',
          valign: 'middle'
        },
        headStyles: {
          fillColor: [230, 230, 230], // Light gray like screenshot
          textColor: [0, 0, 0],
          fontStyle: 'bold',
          fontSize: 9,
          halign: 'center'
        },
        columnStyles: {
          0: { halign: 'center', cellWidth: 50 },
          1: { halign: 'left', cellWidth: 250 },
          2: { halign: 'center', cellWidth: 40 },
          3: { halign: 'right', cellWidth: 80 },
          4: { halign: 'right', cellWidth: 90 }
        },
        theme: 'grid',
        didDrawPage: data => { finalY = data.cursor.y; }
      });

      // === Totals Section ===
      const subTotal = lineItems.reduce((sum, item) => sum + ((item.quantity || 0) * (item.rate || 0)), 0);
      const vat = (subTotal * (estimate.VATRate || 0)) / 100;
      const total = subTotal + vat;

      const totalsBoxX = pageWidth - 160;
      const totalsBoxY = finalY + 20;
      doc.rect(totalsBoxX, totalsBoxY, 120, 45);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.text('Sub-Total', totalsBoxX + 5, totalsBoxY + 12);
      doc.text(subTotal.toFixed(2), totalsBoxX + 115, totalsBoxY + 12, { align: 'right' });
      doc.text(`VAT (${estimate.VATRate || 0}%)`, totalsBoxX + 5, totalsBoxY + 25);
      doc.text(vat.toFixed(2), totalsBoxX + 115, totalsBoxY + 25, { align: 'right' });
      doc.setFont('helvetica', 'bold');
      doc.text('TOTAL', totalsBoxX + 5, totalsBoxY + 38);
      doc.text(total.toFixed(2), totalsBoxX + 115, totalsBoxY + 38, { align: 'right' });

      // === Footer Notes ===
      const footerY = totalsBoxY + 65;
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(9);
      doc.text('• Cost based on One-off prices.', 40, footerY);
      doc.text('• The above prices valid for 2 weeks and thereafter subject to our reconfirmation.', 40, footerY + 12);
      doc.setFont('helvetica', 'bold');
      doc.text(`For Your Company Name`, 40, footerY + 40);
      doc.setFont('helvetica', 'normal');
      doc.text('(This is system generated document, hence not signed.)', 40, footerY + 55);

      // === Save PDF ===
      doc.save(`Cost_Estimate_${estimate.estimateRef || 'Estimate'}.pdf`);
    } catch (error) {
      console.error("❌ Error generating PDF:", error);
      alert("Failed to generate PDF.");
    }
  };
  // ... existing code ...
  return (
    <div
      className="p-4 m-2"
      style={{ backgroundColor: "white", borderRadius: "10px" }} >
      <div style={{ display: "flex", alignItems: "center", justifyContent: "space-between" }}>
        <h2 className="fw-semibold mb-3">Cost Estimates</h2>
        <Link to={"/admin/AddCostEstimates"}>
          <button id="btn-All" className=" btn-dark" style={{ border: "none", borderRadius: "10px" }}>
            <BsPlusLg className="me-2" /> New Estimate
          </button>
        </Link>
      </div>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div className="filters d-flex flex-wrap gap-1 mb-4">
          <div className="search-container flex-grow-1">
            <Form.Control
              type="search"
              placeholder="Search by Job #, Brand Name, Sub Brand, Flavour, Pack Type, Pack Size..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>
          <div className="search-container flex-grow-1">
            <Form.Control
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="form-control"
            />
          </div>
          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="designer-dropdown"
              className="custom-dropdown"
            >
              {selectedClient}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedClient("All Clients")}>All Clients</Dropdown.Item>
              {[...new Set(estimates?.costEstimates?.map(po => po.clients?.[0]?.clientName || 'N/A'))]
                .filter(name => name !== 'N/A')
                .map((clientName, index) => (
                  <Dropdown.Item key={index} onClick={() => setSelectedClient(clientName)}>
                    {clientName}
                  </Dropdown.Item>
                ))}
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="viewall-dropdown"
              className="custom-dropdown"
            >
              {selectedPOStatus}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedPOStatus("All PO Status")}>All PO Status</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedPOStatus("Approved")}>Approved</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedPOStatus("Rejected")}>Rejected</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedPOStatus("pending")}>Pending</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>

          <Dropdown className="filter-dropdown">
            <Dropdown.Toggle
              variant="light"
              id="status-dropdown"
              className="custom-dropdown"
            >
              {selectedStatus}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedStatus("All Status")}>All Status</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedStatus("Active")}>Active</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedStatus("Invoice")}>Invoice</Dropdown.Item>
              <Dropdown.Item onClick={() => setSelectedStatus("Completed")}>Completed</Dropdown.Item>
            </Dropdown.Menu>
          </Dropdown>


        </div>
      </div>

      <div className="table-responsive" style={{ maxHeight: "900px", overflowY: "auto" }}>
        <Table hover className="align-middle sticky-header">
          <thead style={{ backgroundColor: "#f8f9fa", position: "sticky", top: 0, zIndex: 1 }}>
            <tr>
              <th><input type="checkbox" /></th>
              <th>CENo</th>
              <th style={{ whiteSpace: 'nowrap' }}>Project Name</th>
              <th style={{ whiteSpace: 'nowrap' }}>Client Name</th>
              <th style={{ whiteSpace: 'nowrap' }}>Client Email</th>
              <th>Date</th>
              {/* <th>ProjectNo</th> */}
              <th>Amount</th>
              <th>CotStatus</th>
              {/* <th>POStatus</th> */}
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedEstimates?.map((po, index) => (
              <tr style={{ whiteSpace: "nowrap" }} key={po.poNumber}>
                <td><input type="checkbox" /></td>
                <td onClick={() => CreatJobs(po.projectId)}>
                  <Link to={"/admin/receivable"} style={{ textDecoration: 'none', border: 'none' }}>
                    {po.estimateRef}
                  </Link>
                </td>
                <td>
                  {po.projects?.map((project) => project.projectName).join(", ")}
                </td>
                <td>{po.clients?.[0]?.clientName || 'N/A'}</td>
                <td>{po.clients?.[0]?.clientEmail || 'N/A'}</td>
                <td>{new Date(po.estimateDate).toLocaleDateString("en-GB").slice(0, 8)}</td>
                <td>
                  {po.lineItems?.reduce((total, item) => total + (item.amount || 0), 0).toFixed(2)}
                </td>
                <td>
                  <span className={`badge ${getStatusClass(po.Status)} px-2 py-1`}>
                    {po.Status}
                  </span>
                </td>

                <td>
                  <div className="d-flex gap-2">
                    <button className="btn btn-sm btn-success"
                      disabled={
                        po.receivablePurchases?.length > 0 &&
                        po.receivablePurchases[0]?.POStatus?.toLowerCase() !== "pending"
                      }
                      onClick={() => {
                        setCostEstimatesId(po._id); // Store the ID
                        setShowAddPOModal(true);   // Open Modal
                      }}
                    >
                      PO Add
                    </button>

                    <span className={`badge ${getStatusClass(
                      po.receivablePurchases?.[0]?.POStatus?.toLowerCase() || "pending"
                    )} px-2 py-1`}>
                      {po.receivablePurchases?.[0]?.POStatus || 'pending'}
                    </span>
                    <button className="btn btn-sm btn-primary" onClick={() => Duplicate(po)}><FaRegCopy /></button>
                    {/* <button className="btn btn-sm btn-primary" onClick={() => handleConvertToInvoice(po)}>ConvertInvoice</button> */}
                    <button className="btn btn-sm btn-outline-primary" onClick={() => UpdateEstimate(po)}><BsPencil /></button>
                    {/* <button className="btn btn-sm btn-outline-danger" onClick={() => handleDelete(po._id))}>
                          <FaTrash />
                        </button> */}
                    <button
                      className="btn btn-sm btn-outline-primary"
                      onClick={() => handleDownloadPDF(po)}
                    >
                      <FaDownload />
                    </button>

                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Modal for converting to invoice */}
      <Modal
        show={showInvoiceModal}
        onHide={() => setShowInvoiceModal(false)}
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>Convert Estimate to Invoice</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Number</Form.Label>
              {/* <Form.Control
                type="text"
                defaultValue={
                  selectedPO
                    ? `INV-${selectedPO.estimateRef.split("-")[1]}`
                    : ""
                }
                disabled
              /> */}
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Invoice Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Client</Form.Label>
              <Form.Control
                type="text"
                defaultValue={selectedPO?.client}
                readOnly
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Due Date</Form.Label>
              <Form.Control type="date" />
            </Form.Group>
            <hr />
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control type="text" defaultValue="Web Design Services" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Quantity</Form.Label>
              <Form.Control type="number" defaultValue="1" />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Rate</Form.Label>
              <Form.Control type="number" defaultValue={selectedPO?.amount} />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Amount</Form.Label>
              <Form.Control
                type="text"
                // value={`$${selectedPO?.amount.toFixed(2)}`}
                disabled
              />
            </Form.Group>
            <hr />
            <div className="d-flex justify-content-between">
              <div>
                <strong>Subtotal:</strong>
                {/* <span> ${selectedPO?.amount.toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Tax (10%):</strong>
                {/* <span> ${calculateTax(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
              <div>
                <strong>Total:</strong>
                {/* <span> ${calculateTotal(selectedPO?.amount).toFixed(2)}</span> */}
              </div>
            </div>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => setShowInvoiceModal(false)}
          >
            Cancel
          </Button>
          <Button variant="primary">Create Invoice</Button>
        </Modal.Footer>
      </Modal>

      {renderAddPOModal()}
      {/* Modal for converting to invoice */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mt-3">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {Math.min(currentPage * itemsPerPage, totalItems)} of {totalItems} entries
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>

              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>

                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default CostEstimates;






















    const handleDownloadPDF = async (invoiceDataFromState) => {
      if (!invoiceDataFromState) {
        console.error("No data provided to handleDownloadPDF");
        Swal.fire("Error", "No data available to generate PDF.", "error");
        return;
      }
      try {
        const response = await axiosInstance.get(
          `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
          {
            responseType: "blob",
          }
        );
        // Check if the response is JSON instead of PDF
        if (response.data.type === "application/json") {
          const reader = new FileReader();
          reader.onload = function() {
            try {
              const json = JSON.parse(reader.result);
              console.log('PDF API response as JSON:', json);
            } catch (e) {
              console.log('PDF API response as text:', reader.result);
            }
          };
          reader.readAsText(response.data);
          return; // Stop further PDF logic if not a PDF
        }
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement("a");
        link.href = url;
        link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
  
        
        document.body.appendChild(link);
        link.click();
        link.remove();
      } catch (error) {
        console.error("❌ Error downloading invoice PDF:", error);
        alert("Failed to download invoice PDF.");
      }
  
      const doc = new jsPDF('p', 'pt', 'a4');
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const margin = 40;
      let finalY = margin;
  
      const companyDetails = {
        logoText: invoiceDataFromState.companyLogoText || 'COMPANY LOGO',
        addressDetails: invoiceDataFromState.companyAddressDetails || 'COMPANY ADDRESS DETAILS',
        name: invoiceDataFromState.companyNameHeader || 'Company name',
        trn: invoiceDataFromState.companyTRN || '100000000000002',
      };
  
      const invoiceMeta = {
        date: invoiceDataFromState.date || '22.03.2025',
        invoiceNo: invoiceDataFromState.invoiceNo || '5822',
      };
  
      const clientDetails = {
        name: invoiceDataFromState.clientId?.clientName || 'Client Company Name',
        address1: invoiceDataFromState.clientId?.clientAddress || 'Client Address Line 1',
        address2: invoiceDataFromState.clientId?.shippingInformation?.[0]?.shippingAddress || 'Client Address Line 2, Country',
        tel: invoiceDataFromState.clientId?.contactPersons?.[0]?.phone || '00000000000',
        contactPerson: invoiceDataFromState.clientId?.contactPersons?.[0]?.contactName || 'Client Contact Person',
        email: invoiceDataFromState.clientId?.contactPersons?.[0]?.email || 'client.email@example.com',
        trn: invoiceDataFromState.clientId?.TaxID_VATNumber || "Client's TRN No.",
      };
  
      // Project No. is set from API response below:
      const projectInfo = {
        costEstNo: invoiceDataFromState.CostEstimatesId || 'CE No.',
        poNo: invoiceDataFromState.ReceivablePurchaseId || 'PO Number',
        // Project No. from API response
        projectNo: invoiceDataFromState.projectId?.[0]?.projectNo || 'Project No.',
      };
  
      const bankDetails = {
        accountName: invoiceDataFromState.bankAccountName || 'Company Name',
        bankName: invoiceDataFromState.bankName || "Company's Bank Name",
        iban: invoiceDataFromState.iban || 'XX000000000000000000001',
        swiftCode: invoiceDataFromState.swiftCode || 'XXXAAACC',
        terms: invoiceDataFromState.paymentTerms || 'Net 30',
      };
  
      // Updated items mapping from API response
      const items = invoiceDataFromState.lineItems && invoiceDataFromState.lineItems.length > 0
        ? invoiceDataFromState.lineItems.map((item, index) => [
            (index + 1).toString() + '.',
            item.description,
            item.quantity,
            item.rate,
            parseFloat(item.amount).toFixed(2)
          ])
        : [
            ['1.', 'Print Samples', 6, 2, '12.00'],
          ];
  
      const subTotal = items.reduce((sum, item) => sum + parseFloat(item[4]), 0);
      const vatRate = invoiceDataFromState.vatRate !== undefined ? invoiceDataFromState.vatRate : 0.10;
      const vatAmount = subTotal * vatRate;
      const grandTotal = subTotal + vatAmount;
      const amountInWords = invoiceDataFromState.amountInWords || `US Dollars ${numberToWords(grandTotal)} Only`;
  
      doc.setFillColor(192, 0, 0);
      doc.rect(margin, finalY, 220, 60, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text(companyDetails.logoText, margin + 10, finalY + 25);
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.text(companyDetails.addressDetails, margin + 10, finalY + 45);
  
  
      const companyNameBlockY = finalY;
      doc.setFillColor(192, 0, 0);
      doc.rect(pageWidth - margin - 150, companyNameBlockY, 150, 30, 'F');
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text(companyDetails.name, pageWidth - margin - 140, companyNameBlockY + 20, { align: 'left' });
  
  
      let titleY = companyNameBlockY + 30 + 20;
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text('Tax Invoice', pageWidth - margin, titleY, { align: 'right' });
  
      let tableDetailsY = titleY + 10;
      autoTable(doc, {
        startY: tableDetailsY,
        head: [['TRN:', 'Date', 'Invoice No.']],
        body: [[companyDetails.trn, invoiceMeta.date, invoiceMeta.invoiceNo]],
        theme: 'grid',
        styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
        headStyles: { fillColor: [255, 255, 255], textColor: [0, 0, 0], fontStyle: 'bold' },
        columnStyles: {
          0: { cellWidth: 150, halign: 'left' },
          1: { cellWidth: 80, halign: 'left' },
          2: { cellWidth: 80, halign: 'left' },
        },
        margin: { right: margin, left: pageWidth - margin - (150 + 80 + 80) - 10 },
        tableWidth: 'wrap',
      });
      finalY = doc.lastAutoTable.finalY + 20;
  
  
      const invoiceToBoxWidth = 250;
      doc.setDrawColor(0, 0, 0);
      doc.rect(margin, finalY, invoiceToBoxWidth, 100, 'S');
      doc.setFontSize(10);
      doc.setFont('helvetica', 'bold');
      doc.text('Invoice To', margin + 5, finalY + 15);
      doc.setFontSize(9);
      doc.setFont('helvetica', 'normal');
      let textYInvoiceTo = finalY + 30;
      [
        `Client Company: ${clientDetails.name}`,
        `Client Address: ${clientDetails.address1}`,
        `Client Address2: ${clientDetails.address2}`,
        `Tel: ${clientDetails.tel}`,
        `Contact: ${clientDetails.contactPerson}`,
        `Email: ${clientDetails.email}`
      ].forEach(line => {
        doc.text(line, margin + 5, textYInvoiceTo);
        textYInvoiceTo += 12;
      });
      finalY += 100 + 10;
  
      autoTable(doc, {
        startY: finalY,
        head: [['TRN', 'Cost Est. No.', 'P.O. No.', 'Project No.']],
        // Project No. from API response is used here
        body: [[clientDetails.trn, projectInfo.costEstNo, projectInfo.poNo, projectInfo.projectNo]],
        theme: 'grid',
        styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
        headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
        margin: { left: margin, right: margin },
      });
      finalY = doc.lastAutoTable.finalY + 10;
  
  
      autoTable(doc, {
        startY: finalY,
        head: [['Bank Account Name', 'Bank Name', 'IBAN', 'Swift Code', 'Terms']],
        body: [[bankDetails.accountName, bankDetails.bankName, bankDetails.iban, bankDetails.swiftCode, bankDetails.terms]],
        theme: 'grid',
        styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
        headStyles: { fillColor: [200, 200, 200], textColor: [0, 0, 0], fontStyle: 'bold' },
        margin: { left: margin, right: margin },
      });
      finalY = doc.lastAutoTable.finalY + 10;
  
  
      autoTable(doc, {
        startY: finalY,
        head: [['Sr. #', 'Description', 'Qty', 'Rate', 'Amount (USD)']],
        body: items,
        theme: 'grid',
        styles: { fontSize: 9, cellPadding: 5, lineWidth: 0.5, lineColor: [0, 0, 0] },
        headStyles: { fillColor: [220, 220, 220], textColor: [0, 0, 0], fontStyle: 'bold' },
        columnStyles: {
          0: { cellWidth: 40, halign: 'center' },
          1: { cellWidth: 'auto' },
          2: { cellWidth: 40, halign: 'right' },
          3: { cellWidth: 50, halign: 'right' },
          4: { cellWidth: 70, halign: 'right' },
        },
        margin: { left: margin, right: margin },
        didDrawPage: function (data) {
  
          finalY = data.cursor.y;
        }
      });
      const amountInWordsY = finalY + 20;
      doc.setFontSize(9);
      doc.setFont('helvetica', 'normal');
      doc.text(amountInWords, margin, amountInWordsY, { maxWidth: pageWidth - margin - 220 });
  
  
      const totalsTableWidth = 200;
      const totalsTableX = pageWidth - margin - totalsTableWidth;
      let totalsTableY = finalY + 10;
  
      autoTable(doc, {
        startY: totalsTableY,
        body: [
          ['Subtotal', `USD ${subTotal.toFixed(2)}`],
          [`VAT (${(vatRate * 100).toFixed(0)}%)`, `USD ${vatAmount.toFixed(2)}`],
          ['Total', `USD ${grandTotal.toFixed(2)}`]
        ],
        theme: 'grid',
        styles: {
          fontSize: 9,
          cellPadding: 5,
          lineWidth: 0.5,
          lineColor: [0, 0, 0]
        },
        headStyles: {
          fillColor: [255, 255, 255],
          textColor: [0, 0, 0],
        },
        columnStyles: {
          0: { halign: 'left', fontStyle: 'bold', cellWidth: totalsTableWidth * 0.6 },
          1: { halign: 'right', cellWidth: totalsTableWidth * 0.4 }
        },
        margin: { left: totalsTableX },
        tableWidth: totalsTableWidth,
        didDrawPage: function (data) {
          totalsTableY = data.cursor.y;
        }
      });
  
      finalY = Math.max(amountInWordsY + 10, totalsTableY + 10);
  
      const footerStartY = finalY + 30;
      const stampWidth = 100;
      const stampHeight = 70;
      const stampX = margin + 150;
  
      doc.setFontSize(9);
      doc.setFont('helvetica', 'normal');
      doc.text('For Company Name', margin, footerStartY);
      doc.text('Accounts Department', margin, footerStartY + stampHeight - 10);
  
  
      doc.setFillColor(200, 200, 200);
      doc.rect(stampX, footerStartY - 15, stampWidth, stampHeight, 'F');
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(8);
      doc.text('Insert Stamp Image', stampX + stampWidth / 2, footerStartY - 15 + stampHeight / 2, { align: 'center' });
  
      doc.save(`Tax_Invoice_${invoiceMeta.invoiceNo}.pdf`);
    };





    // if (!invoiceDataFromState) {
        //   console.error("No data provided to handleDownloadPDF");
        //   Swal.fire("Error", "No data available to generate PDF.", "error");
        //   return;
        // }
        // try {
        //   const response = await axiosInstance.get(
        //     `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
        //     {
        //       responseType: "blob",
        //     }
        //   );
        //   const url = window.URL.createObjectURL(new Blob([response.data]));
        //   const link = document.createElement("a");
        //   link.href = url;
        //   link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
        //   document.body.appendChild(link);
        //   link.click();
        //   link.remove();
        // } catch (error) {
        //   console.error("❌ Error downloading invoice PDF:", error);
        //   alert("Failed to download invoice PDF.");
        // }
    
        // if (!invoiceDataFromState) {
        //   console.error("No data provided to handleDownloadPDF");
        //   Swal.fire("Error", "No data available to generate PDF.", "error");
        //   return;
        // }
       
         // try {
        //   const response = await axiosInstance.get(
        //     `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
        //     {
        //       responseType: "blob",
        //     }
        //   );
        //   const url = window.URL.createObjectURL(new Blob([response.data]));
        //   const link = document.createElement("a");
        //   link.href = url;
        //   link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
        //   document.body.appendChild(link);
        //   link.click();
        //   link.remove();
        // } catch (error) {
        //   console.error("❌ Error downloading invoice PDF:", error);
        //   alert("Failed to download invoice PDF.");
        // }
        // try {
        //   const response = await axiosInstance.get(
        //     `/pdf/invoice?InvoiceBillingId=${invoiceDataFromState._id}`,
        //     {
        //       responseType: "blob",
        //     }
        //   );
        //    consol.log(response,"ggg")
        //   // Log the Blob data as base64
        //   const reader = new FileReader();
        //   reader.onloadend = function () {
        //     console.log("API Response Data (Base64):", reader.result);  // Logs base64-encoded data
        //   };
        //   reader.readAsDataURL(response.data); // Convert blob to base64
        
        //   const url = window.URL.createObjectURL(new Blob([response.data]));
        //   const link = document.createElement("a");
        //   link.href = url;
        //   link.setAttribute("download", `${invoiceDataFromState.invoiceNumber || "invoice"}.pdf`);
        //   document.body.appendChild(link);
        //   link.click();
        //   link.remove();
        // } catch (error) {
        //   console.error("❌ Error downloading invoice PDF:", error);
        //   alert("Failed to download invoice PDF.");
        // }
























        import React, { useState, useEffect } from 'react';
import { Form, Button, Container, Row, Col } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate, useParams, useLocation, Link } from 'react-router-dom';
import { createProject, updateProject, fetchProjectById } from '../../../redux/slices/ProjectsSlice';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { fetchClient } from '../../../redux/slices/ClientSlice';

function AddProjectList() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id: paramId } = useParams();
  const location = useLocation();
  const { project } = location.state || {};
  const id = paramId || project?._id;

  const [formData, setFormData] = useState({
    projectName: '',
    clientId: '',
    managerId: '',
    startDate: '',
    endDate: '',
    projectPriority: '',
    description: '',
    status: '',
    projectRequirements: {
      creativeDesign: false,
      artworkAdaptation: false,
      prepress: false,
      POS: false,
      mockups: false,
      rendering: false,
    },
    budgetAmount: '',
    currency: '',
    totalTime: ''
  });

  // ✅ Populate form in edit mode
  useEffect(() => {
    if (project) {
      setFormData({
        ...project,
        clientId: project.clientId?._id || '', // 🔧 Fix here
        projectRequirements: project.projectRequirements?.[0] || {}
      });
    } else if (paramId) {
      dispatch(fetchProjectById(paramId)).then((res) => {
        const fetchedProject = res.payload;
        if (fetchedProject) {
          setFormData({
            ...fetchedProject,
            clientId: fetchedProject.clientId?._id || '', // 🔧 Fix here
            projectRequirements: fetchedProject.projectRequirements?.[0] || {}
          });
        }
      });
    }
  }, [paramId, dispatch, project]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      projectRequirements: {
        ...prev.projectRequirements,
        [name]: checked
      }
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const payload = {
      ...formData,
      projectRequirements: [formData.projectRequirements]
    };

    if (id) {
      dispatch(updateProject({ id, payload }))
        .unwrap()
        .then(() => {
          toast.success("Project updated successfully!");
          navigate("/admin/projectList");
        })
        .catch(() => {
          toast.error("Failed to update project!");
        });
    } else {
      dispatch(createProject(payload))
        .unwrap()
        .then(() => {
          toast.success("Project created successfully!");
          navigate("/admin/projectList");
        })
        .catch(() => {
          toast.error("Error creating project");
        });
    }
  };

  const handleCancel = () => {
    navigate("/admin/projectList");
  };

  const { Clients } = useSelector((state) => state.client);
  useEffect(() => {
    dispatch(fetchClient());
  }, [dispatch]);

  return (
    <Container className="py-4">
      <div className="form-container p-4 rounded shadow-sm" style={{ backgroundColor: "white", margin: "0 auto" }}>
        <h2 className="mb-4">{id ? "Edit Project" : "New Project"}</h2>

        <Form onSubmit={handleSubmit}>
          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Name</Form.Label>
                <Form.Control
                  type="text"
                  name="projectName"
                  value={formData.projectName}
                  onChange={handleInputChange}
                  required
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>

                <div class="d-flex align-items-center justify-content-between mb-2">
                  <Form.Label className="text-muted mb-1">Client Name</Form.Label>
                  <Link to={"/admin/AddClientManagement"}><button class="btn btn-sm btn-outline-primary rounded-pill px-3 py-1">
                    + Create
                  </button></Link>
                </div>
                <Form.Select
                  name="clientId"
                  value={formData.clientId}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Client</option>
                  {Clients?.data?.map((client) => (
                    <option key={client._id} value={client._id}>
                      {client.clientName}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>

          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Expected Completion Date</Form.Label>
                <Form.Control
                  type="date"
                  name="endDate"
                  value={formData.endDate?.slice(0, 10)}
                  onChange={handleInputChange}
                  required
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Start Date</Form.Label>
                <Form.Control
                  type="date"
                  name="startDate"
                  value={formData.startDate?.slice(0, 10)}
                  onChange={handleInputChange}
                  required
                />
              </Form.Group>
            </Col>
          </Row>

          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Priority</Form.Label>
                <Form.Select
                  name="projectPriority"
                  value={formData.projectPriority}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Priority</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Label className="text-muted mb-1">Project Status</Form.Label>
                <Form.Select
                  name="status"
                  value={formData.status}
                  onChange={handleInputChange}
                  required
                >
                  <option value="">Select Status</option>
                  <option value="Active Project">Active Project</option>
                  <option value="In Progress">In Progress</option>
                  <option value="Completed">Completed</option>
                  <option value="Closed">Closed</option>
                  <option value="Cancelled">Cancelled</option>
                  <option value="On Hold">On Hold</option>
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>

          <Form.Group className="mb-3">
            <Form.Label className="text-muted mb-1">Project Description</Form.Label>
            <Form.Control
              as="textarea"
              rows={4}
              name="description"
              value={formData.description}
              onChange={handleInputChange}
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label className="text-muted mb-1">Project Requirements</Form.Label>
            <div>
              {['creativeDesign', 'artworkAdaptation', 'prepress', 'POS', 'mockups', 'rendering'].map((key) => (
                <Form.Check
                  key={key}
                  type="checkbox"
                  label={key.replace(/([A-Z])/g, ' $1')}
                  name={key}
                  checked={formData.projectRequirements[key]}
                  onChange={() => {
                    setFormData((prevData) => ({
                      ...prevData,
                      projectRequirements: Object.fromEntries(
                        Object.keys(prevData.projectRequirements).map((k) => [k, k === key])
                      )
                    }));
                  }}
                />
              ))}
            </div>
          </Form.Group>

          <Form.Label className="text-muted mb-1">Budget Information</Form.Label>
          <Row className="mb-3">
            <Col md={6}>
              <Form.Group>
                <Form.Control
                  type="number"
                  placeholder="Budget Amount"
                  name="budgetAmount"
                  value={formData.budgetAmount}
                  onChange={handleInputChange}
                />
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group>
                <Form.Select
                  name="currency"
                  value={formData.currency}
                  onChange={handleInputChange}
                >
                  <option value="">Select Currency</option>
                  <option value="AED">AED</option>
                  <option value="EUR">EUR</option>
                  <option value="GBP">GBP</option>
                  <option value="INR">INR</option>
                  <option value="SAR">SAR</option>
                  <option value="USD">USD</option>
                </Form.Select>
              </Form.Group>
            </Col>
          </Row>

          <div className="d-flex justify-content-end gap-2 mt-4">
            <Button variant="secondary" className="px-4" onClick={handleCancel}>Cancel</Button>
            <Button id='All_btn' type="submit" className="px-4">
              {id ? "Update Project" : "Create Project"}
            </Button>
          </div>
        </Form>
      </div>
    </Container>
  );
}

export default AddProjectList;
























// ////////Client //////////////// 
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch } from 'react-redux';
import { createClients, fetchClient, UpdateClients } from '../../../redux/slices/ClientSlice';
import "react-toastify/dist/ReactToastify.css";
import axios from 'axios';
import { apiUrl } from '../../../redux/utils/config';
import CreatableSelect from "react-select/creatable";

// Add this function to format date for input fields
const formatDate = (dateStr) => {
  if (!dateStr) return '';
  const d = new Date(dateStr);
  if (isNaN(d)) return '';
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${d.getFullYear()}-${month}-${day}`;
};

function AddClientManagement() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mo
  const location = useLocation();
  const { client } = location.state || {};
  const _id = client?._id
  console.log("oo", _id);

  // Initial form state
  const [formData, setFormData] = useState({
    clientName: '',
    industry: '',
    website: '',
    clientAddress: '',
    TaxID_VATNumber: '',
    CSRCode: '',
    Status: ''
  });

  // Contact persons state
  const [contactPersons, setContactPersons] = useState([
    {
      contactName: '',
      jobTitle: '',
      email: '',
      phone: '',
      department: '',
      salesRepresentative: ''
    }
  ]);

  // Billing information state
  const [billingInformation, setBillingInformation] = useState([
    {
      billingAddress: '',
      billingContactName: '',
      billingEmail: '',
      billingPhone: '',
      currency: '',
      preferredPaymentMethod: ''
    }
  ]);
  // Shipping information state
  const [shippingInformation, setShippingInformation] = useState([
    {
      shippingAddress: '',
      shippingContactName: '',
      shippingEmail: '',
      shippingPhone: '',
      preferredShippingMethod: '',
      specialInstructions: ''
    }
  ]);
  // Financial information state
  const [financialInformation, setFinancialInformation] = useState([
    {
      annualRevenue: '',
      creditRating: '',
      bankName: '',
      accountNumber: '',
      fiscalYearEnd: '',
      financialContact: ''
    }
  ]);

  // Ledger information state
  const [ledgerInformation, setLedgerInformation] = useState([
    {
      accountCode: '',
      accountType: '',
      openingBalance: '',
      balanceDate: '',
      taxCategory: '',
      costCenter: ''
    }
  ]);

  // Additional information state
  const [additionalInformation, setAdditionalInformation] = useState({
    paymentTerms: '',
    creditLimit: '',
    notes: ''
  });

  // Add state for errors
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const updateStates = (clientData) => {
      setFormData({
        clientName: clientData.clientName || '',
        industry: clientData.industry || '',
        website: clientData.website || '',
        clientAddress: clientData.clientAddress || '',
        TaxID_VATNumber: clientData.TaxID_VATNumber || '',
        CSRCode: clientData.CSRCode || '',
        Status: clientData.Status || ''
      });

      setContactPersons(clientData.contactPersons || []);
      setBillingInformation(clientData.billingInformation || []);
      setShippingInformation(clientData.shippingInformation || []);
      setFinancialInformation(
        (clientData.financialInformation || []).map((item) => ({
          ...item,
          fiscalYearEnd: formatDate(item.fiscalYearEnd),
        }))
      );
      setLedgerInformation(
        (clientData.ledgerInformation || []).map((item) => ({
          ...item,
          balanceDate: formatDate(item.balanceDate),
        }))
      );
      setAdditionalInformation(clientData.additionalInformation || {
        paymentTerms: '',
        creditLimit: '',
        notes: ''
      });
    };

    if (client) {
      updateStates(client);
    } else if (id) {
      dispatch(fetchclientById(id)).then((res) => {
        const fetchedclient = res.payload;
        if (fetchedclient) {
          updateStates(fetchedclient);
        }
      });
    }
  }, [id, dispatch, client]);



  // Handle basic form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle contact person changes
  const handleContactChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'phone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedContacts = [...contactPersons];
    updatedContacts[index] = {
      ...updatedContacts[index],
      [name]: newValue
    };
    setContactPersons(updatedContacts);
  };

  // Handle billing information changes
  const handleBillingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'billingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedBilling = [...billingInformation];
    updatedBilling[index] = {
      ...updatedBilling[index],
      [name]: newValue
    };
    setBillingInformation(updatedBilling);
  };

  // Handle shipping information changes
  const handleShippingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'shippingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedShipping = [...shippingInformation];
    updatedShipping[index] = {
      ...updatedShipping[index],
      [name]: newValue
    };
    setShippingInformation(updatedShipping);
  };

  // Handle financial information changes
  const handleFinancialChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'creditRating') {
      // Only allow numbers between 1 and 5
      let num = Number(newValue);
      if (newValue === '') {
        newValue = '';
      } else if (num < 1) {
        newValue = '1';
      } else if (num > 5) {
        newValue = '5';
      } else {
        newValue = String(num);
      }
    }
    const updatedFinancial = [...financialInformation];
    updatedFinancial[index] = {
      ...updatedFinancial[index],
      [name]: newValue
    };
    setFinancialInformation(updatedFinancial);
  };

  // Handle ledger information changes
  const handleLedgerChange = (index, e) => {
    const { name, value } = e.target;
    const updatedLedger = [...ledgerInformation];
    updatedLedger[index] = {
      ...updatedLedger[index],
      [name]: value
    };
    setLedgerInformation(updatedLedger);
  };


  const handleAdditionalChange = (e) => {
    const { name, value } = e.target;
    setAdditionalInformation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Validation function
  const validate = () => {
    const newErrors = {};

    // Basic form fields
    if (!formData.clientName.trim()) newErrors.clientName = 'Name is required';
    if (!formData.industry) newErrors.industry = 'Industry is required';
    if (!formData.website.trim()) newErrors.website = 'Website is required';
    else if (!/^https?:\/\//.test(formData.website)) newErrors.website = 'Website must start with http:// or https://';
    if (!formData.clientAddress.trim()) newErrors.clientAddress = 'Client Address is required';
    if (!formData.TaxID_VATNumber.trim()) newErrors.TaxID_VATNumber = 'Tax ID/VAT Number is required';
    if (!formData.CSRCode.trim()) newErrors.CSRCode = 'CSR Code is required';
    if (!formData.Status) newErrors.Status = 'Status is required';

    // Contact Persons
    contactPersons.forEach((contact, idx) => {
      if (!contact.contactName.trim()) newErrors[`contactName_${idx}`] = 'Contact Name is required';
      if (!contact.jobTitle.trim()) newErrors[`jobTitle_${idx}`] = 'Job Title is required';
      if (!contact.email.trim()) newErrors[`email_${idx}`] = 'Email is required';
      else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(contact.email)) newErrors[`email_${idx}`] = 'Invalid email';
      if (!contact.phone.trim()) newErrors[`phone_${idx}`] = 'Phone is required';
      else if (!/^\d{10}$/.test(contact.phone)) newErrors[`phone_${idx}`] = 'Phone must be 10 digits';
      if (!contact.department.trim()) newErrors[`department_${idx}`] = 'Department is required';
      if (!contact.salesRepresentative.trim()) newErrors[`salesRepresentative_${idx}`] = 'Sales Representative is required';
    });

    // Billing Information (first item)
    const billing = billingInformation[0] || {};
    if (!billing.billingAddress.trim()) newErrors.billingAddress = 'Billing Address is required';
    if (!billing.billingContactName.trim()) newErrors.billingContactName = 'Billing Contact Name is required';
    if (!billing.billingEmail.trim()) newErrors.billingEmail = 'Billing Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(billing.billingEmail)) newErrors.billingEmail = 'Invalid email';
    if (!billing.billingPhone.trim()) newErrors.billingPhone = 'Billing Phone is required';
    else if (!/^\d{10}$/.test(billing.billingPhone)) newErrors.billingPhone = 'Phone must be 10 digits';
    if (!billing.currency) newErrors.currency = 'Currency is required';
    if (!billing.preferredPaymentMethod) newErrors.preferredPaymentMethod = 'Preferred Payment Method is required';

    // Shipping Information (first item)
    const shipping = shippingInformation[0] || {};
    if (!shipping.shippingAddress.trim()) newErrors.shippingAddress = 'Shipping Address is required';
    if (!shipping.shippingContactName.trim()) newErrors.shippingContactName = 'Shipping Contact Name is required';
    if (!shipping.shippingEmail.trim()) newErrors.shippingEmail = 'Shipping Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(shipping.shippingEmail)) newErrors.shippingEmail = 'Invalid email';
    if (!shipping.shippingPhone.trim()) newErrors.shippingPhone = 'Shipping Phone is required';
    else if (!/^\d{10}$/.test(shipping.shippingPhone)) newErrors.shippingPhone = 'Phone must be 10 digits';
    if (!shipping.preferredShippingMethod) newErrors.preferredShippingMethod = 'Preferred Shipping Method is required';
    if (!shipping.specialInstructions.trim()) newErrors.specialInstructions = 'Special Instructions are required';

    // Financial Information (first item)
    const financial = financialInformation[0] || {};
    if (!financial.annualRevenue) newErrors.annualRevenue = 'Annual Revenue is required';
    else if (isNaN(financial.annualRevenue) || Number(financial.annualRevenue) < 0) newErrors.annualRevenue = 'Annual Revenue must be a positive number';
    if (!financial.creditRating) newErrors.creditRating = 'Credit Rating is required';
    else if (isNaN(financial.creditRating) || Number(financial.creditRating) < 1 || Number(financial.creditRating) > 5) newErrors.creditRating = 'Credit Rating must be between 1 and 5';
    if (!financial.bankName.trim()) newErrors.bankName = 'Bank Name is required';
    if (!financial.accountNumber.trim()) newErrors.accountNumber = 'Account Number is required';
    if (!financial.fiscalYearEnd) newErrors.fiscalYearEnd = 'Fiscal Year End is required';
    if (!financial.financialContact.trim()) newErrors.financialContact = 'Financial Contact is required';

    // Ledger Information (first item)
    const ledger = ledgerInformation[0] || {};
    if (!ledger.accountCode.trim()) newErrors.accountCode = 'Account Code is required';
    if (!ledger.accountType) newErrors.accountType = 'Account Type is required';
    if (!ledger.openingBalance) newErrors.openingBalance = 'Opening Balance is required';
    else if (isNaN(ledger.openingBalance)) newErrors.openingBalance = 'Opening Balance must be a number';
    if (!ledger.balanceDate) newErrors.balanceDate = 'Balance Date is required';
    if (!ledger.taxCategory) newErrors.taxCategory = 'Tax Category is required';
    if (!ledger.costCenter.trim()) newErrors.costCenter = 'Cost Center is required';

    // Additional Information
    if (!additionalInformation.paymentTerms) newErrors.paymentTerms = 'Payment Terms is required';
    if (!additionalInformation.creditLimit) newErrors.creditLimit = 'Credit Limit is required';
    else if (isNaN(additionalInformation.creditLimit) || Number(additionalInformation.creditLimit) < 0) newErrors.creditLimit = 'Credit Limit must be a positive number';
    if (!additionalInformation.notes.trim()) newErrors.notes = 'Notes is required';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const fullData = {
      ...formData,
      contactPersons,
      billingInformation,
      shippingInformation,
      financialInformation,
      ledgerInformation,
      additionalInformation
    };
    console.log('Full Data Object:', fullData);
    if (_id) {
      dispatch(UpdateClients({ _id, data: fullData }))
        .unwrap()
        .then(() => {
          toast.success("clientupdated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Failed to update client!");
        });
    } else {
      dispatch(createClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientcreated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Error creating client");
        });
    }
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const fullData = {
  //     ...formData,
  //     contactPersons,
  //     billingInformation,
  //     shippingInformation,
  //     financialInformation,
  //     ledgerInformation,
  //     additionalInformation
  //   };
  //         dispatch(createClients(fullData))
  //       .unwrap()
  //       .then(() => {
  //         toast.success("clientcreated successfully!");
  //         navigate("/clientManagement");
  //       })
  //       .catch(() => {
  //         toast.error("Error creating client");
  //       });
  // };

  // ///////////////////////////////////////////////////////////////////////////////////////////

  // Keep the options in local state so we can push newly‑created ones
  const [brandOptions, setBrandOptions] = useState([
    { value: "Coca‑Cola", label: "Coca‑Cola" },
    { value: "Pepsi", label: "Pepsi" },
    // …your initial list
  ]);

  // When the user creates a brand that isn’t in the list yet
  const handleCreate = (inputValue) => {
    const newOption = { value: inputValue, label: inputValue };
    setBrandOptions((prev) => [...prev, newOption]);
    setFormData((prev) => ({ ...prev, brandName: inputValue }));
  };

  // Add state for select options
  const [selectOptions, setSelectOptions] = useState({
    industry: [],
    currency: [],
    preferredPaymentMethod: [],
    preferredShippingMethod: [],
    accountType: [],
  
  });

  // Fetch select options from API on mount
  useEffect(() => {
    axios.get(`${apiUrl}/client/selectclient`)
      .then(res => {
        if (res.data.success && res.data.data) {
          setSelectOptions({
            industry: (res.data.data.industry || []).map(v => ({ value: v, label: v })),
            currency: (res.data.data.currency || []).map(v => ({ value: v, label: v })),
            preferredPaymentMethod: (res.data.data.preferredPaymentMethod || []).map(v => ({ value: v, label: v })),
            preferredShippingMethod: (res.data.data.preferredShippingMethod || []).map(v => ({ value: v, label: v })),
            accountType: (res.data.data.accountType || []).map(v => ({ value: v, label: v })),
          });
        }
      });
  }, []);

  // Generic handler for creating new options
  const handleCreateOption = (field) => (inputValue) => {
    axios.post(`${apiUrl}/client/selectclient`, {
      [field]: [...selectOptions[field].map(opt => opt.value), inputValue]
    }).then(() => {
      setSelectOptions(prev => ({
        ...prev,
        [field]: [...prev[field], { value: inputValue, label: inputValue }]
      }));
      setFormData(prev => ({
        ...prev,
        [field]: inputValue
      }));
    });
  };

  return (
    <>
      <ToastContainer />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-body">
            {/* <h1 className="card-title h4 mb-4">Add Company</h1> */}
            <h2 className="mb-4">{id || client?._id ? "Edit client" : "New Company (Client)"}</h2>
            <form className="row g-3" onSubmit={handleSubmit}>
              <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
              <div className="col-md-6"></div>
              <div className="col-md-6">
                <label className="form-label">Name</label>
                <input required type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
                {errors.clientName && <div className="text-danger small">{errors.clientName}</div>}
              </div>

              {/* <div className="col-md-6">
                <label className="form-label">Industry</label>
                <select className="form-select" name="industry" required value={formData.industry} onChange={handleChange}>
                  <option value="">Select industry</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="tech">Technology</option>
                  <option value="retail">Retail</option>
                </select>
                {errors.industry && <div className="text-danger small">{errors.industry}</div>}
              </div> */}
              {/* Industry */}
              <div className="col-md-6">
                <label className="form-label">Industry</label>
                <CreatableSelect
                  options={selectOptions.industry}
                  value={selectOptions.industry.find((opt) => opt.value === formData.industry)}
                  onChange={(option) =>
                    setFormData((prev) => ({ ...prev, industry: option?.value || "" }))
                  }
                  onCreateOption={handleCreateOption('industry')}
                  isClearable
                  required
                />
              </div>

              <div className="col-md-6">
                <label className="form-label">Website</label>
                <input required type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
                {errors.website && <div className="text-danger small">{errors.website}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Client Address</label>
                <textarea required className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
                {errors.clientAddress && <div className="text-danger small">{errors.clientAddress}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Tax ID/VAT Number</label>
                <input required type="text" name="TaxID_VATNumber" value={formData.TaxID_VATNumber} onChange={handleChange} className="form-control" />
                {errors.TaxID_VATNumber && <div className="text-danger small">{errors.TaxID_VATNumber}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">CSR Code</label>
                <input type="text" name="CSRCode" required value={formData.CSRCode} onChange={handleChange} className="form-control" />
                {errors.CSRCode && <div className="text-danger small">{errors.CSRCode}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="Status"
                  required
                  value={formData.Status}
                  onChange={handleChange}
                >
                  <option value="">Select Status</option> {/* empty option for forcing selection */}
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
                {errors.Status && <div className="text-danger small">{errors.Status}</div>}
              </div>

              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Contact Persons</h5>
                {contactPersons.map((contact, index) => (
                  <div className="border p-3 mb-3" key={index}>
                    <div className="row">
                      <div className="col-md-6">
                        <label className="form-label">Contact Name</label>
                        <input
                          type="text"
                          name="contactName"
                          required
                          value={contact.contactName}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Contact Name"
                        />
                        {errors[`contactName_${index}`] && <div className="text-danger small">{errors[`contactName_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Job Title</label>
                        <input
                          type="text"
                          name="jobTitle"
                          value={contact.jobTitle}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Job Title"
                        />
                        {errors[`jobTitle_${index}`] && <div className="text-danger small">{errors[`jobTitle_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                          type="email"
                          name="email"
                          required
                          value={contact.email}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Email"
                        />
                        {errors[`email_${index}`] && <div className="text-danger small">{errors[`email_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Phone</label>
                        <input
                          type="tel"
                          name="phone"
                          required
                          value={contact.phone}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Phone"
                          maxLength={10}
                        />
                        {errors[`phone_${index}`] && <div className="text-danger small">{errors[`phone_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Department</label>
                        <input
                          type="text"
                          name="department"
                          value={contact.department}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Department"
                        />
                        {errors[`department_${index}`] && <div className="text-danger small">{errors[`department_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Sales Representative</label>
                        <input
                          type="text"
                          name="salesRepresentative"
                          value={contact.salesRepresentative}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Sales Representative"
                        />
                        {errors[`salesRepresentative_${index}`] && <div className="text-danger small">{errors[`salesRepresentative_${index}`]}</div>}
                      </div>

                      <div className="col-md-12 mt-2 d-flex justify-content-end">
                        {contactPersons.length > 1 && (
                          <button
                            type="button"
                            className="btn btn-danger btn-sm"
                            onClick={() => {
                              const updatedContacts = [...contactPersons];
                              updatedContacts.splice(index, 1);
                              setContactPersons(updatedContacts);
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Add More Button */}
                <div className="mb-3">
                  <button
                    type="button"
                    className="btn btn-primary"
                    onClick={() => {
                      setContactPersons([
                        ...contactPersons,
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    }}
                  >
                    + Add Another Contact
                  </button>
                </div>
              </div>

              {/* Billing Information */}
              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Billing Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Billing Address</label>
                  <textarea className="form-control" rows="3" name="billingAddress" value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                  {errors.billingAddress && <div className="text-danger small">{errors.billingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Contact Name</label>
                  <input type="text" className="form-control" name="billingContactName"  value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingContactName && <div className="text-danger small">{errors.billingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Email</label>
                  <input type="email" className="form-control" name="billingEmail"  value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingEmail && <div className="text-danger small">{errors.billingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Phone</label>
                  <input type="tel" className="form-control" name="billingPhone"  value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} maxLength={10} />
                  {errors.billingPhone && <div className="text-danger small">{errors.billingPhone}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <select className="form-select" name="currency" required value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Currency</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                  {errors.currency && <div className="text-danger small">{errors.currency}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <CreatableSelect
                    options={selectOptions.currency}
                    value={selectOptions.currency.find((opt) => opt.value === formData.currency)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, currency: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('currency')}
                    isClearable
                  />
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <select className="form-select" name="preferredPaymentMethod" required value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Payment Method</option>
                    <option value="BankTransfer">BankTransfer</option>
                    <option value="CreditCard">CreditCard</option>
                    <option value="Check">Check</option>
                  </select>
                  {errors.preferredPaymentMethod && <div className="text-danger small">{errors.preferredPaymentMethod}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredPaymentMethod}
                    value={selectOptions.preferredPaymentMethod.find((opt) => opt.value === formData.preferredPaymentMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredPaymentMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredPaymentMethod')}
                    isClearable
                  />
                </div>

                {/* Shipping Information */}
                <h5 className="mb-3 mt-4">Shipping Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Shipping Address</label>
                  <textarea className="form-control" rows="3" name="shippingAddress" value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.shippingAddress && <div className="text-danger small">{errors.shippingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Contact Name</label>
                  <input type="text" className="form-control" name="shippingContactName"  value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingContactName && <div className="text-danger small">{errors.shippingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Email</label>
                  <input type="email" className="form-control" name="shippingEmail"  value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingEmail && <div className="text-danger small">{errors.shippingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Phone</label>
                  <input type="tel" className="form-control" name="shippingPhone"  value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} maxLength={10} />
                  {errors.shippingPhone && <div className="text-danger small">{errors.shippingPhone}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <select className="form-select" name="preferredShippingMethod" required value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                    <option value="">Select Shipping Method</option>
                    <option value="ground">Ground</option>
                    <option value="standard">Standard</option>
                    <option value="express">Express</option>
                    <option value="overnight">Overnight</option>
                  </select>
                  {errors.preferredShippingMethod && <div className="text-danger small">{errors.preferredShippingMethod}</div>}
                </div> */}
             <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredShippingMethod}
                    value={selectOptions.preferredShippingMethod.find((opt) => opt.value === formData.preferredShippingMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredShippingMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredShippingMethod')}
                    isClearable
                  
                  />
                </div>


                <div className="col-md-12">
                  <label className="form-label">Special Instructions</label>
                  <textarea className="form-control" rows="3" name="specialInstructions"  value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.specialInstructions && <div className="text-danger small">{errors.specialInstructions}</div>}
                </div>

                {/* Financial Information */}
                <h5 className="mb-3 mt-4">Financial Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Annual Revenue</label>
                  <input type="number" className="form-control" name="annualRevenue"  value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.annualRevenue && <div className="text-danger small">{errors.annualRevenue}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Rating</label>
                  <input type="number" className="form-control" name="creditRating"  value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} min={1} max={5} />
                  {errors.creditRating && <div className="text-danger small">{errors.creditRating}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Bank Name</label>
                  <input type="text" className="form-control" name="bankName"  value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.bankName && <div className="text-danger small">{errors.bankName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Number</label>
                  <input type="text" className="form-control" name="accountNumber"  value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.accountNumber && <div className="text-danger small">{errors.accountNumber}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Fiscal Year End</label>
                  <input type="date" className="form-control" name="fiscalYearEnd"  value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.fiscalYearEnd && <div className="text-danger small">{errors.fiscalYearEnd}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Financial Contact</label>
                  <input type="text" className="form-control" name="financialContact"  value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.financialContact && <div className="text-danger small">{errors.financialContact}</div>}
                </div>

                {/* Ledger Information */}
                <h5 className="mb-3 mt-4">Ledger Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Account Code</label>
                  <input type="text" className="form-control" name="accountCode"  value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.accountCode && <div className="text-danger small">{errors.accountCode}</div>}
                </div>
               
                {/* <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <select className="form-select" name="accountType" required value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="">Select Account Type</option>
                    <option value="AccountsReceivable">AccountsReceivable</option>
                    <option value="AccountsPayable">AccountsPayable</option>
                  </select>
                  {errors.accountType && <div className="text-danger small">{errors.accountType}</div>}
                </div> */}
                  <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <CreatableSelect
                    options={selectOptions.accountType}
                    value={selectOptions.accountType.find((opt) => opt.value === formData.accountType)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, accountType: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('accountType')}
                    isClearable
                    
                  />
                </div>

                <div className="col-md-6">
                  <label className="form-label">Opening Balance</label>
                  <input type="number" className="form-control" name="openingBalance"  value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.openingBalance && <div className="text-danger small">{errors.openingBalance}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Balance Date</label>
                  <input type="date" className="form-control" name="balanceDate"  value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.balanceDate && <div className="text-danger small">{errors.balanceDate}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Tax Category</label>
                  <select className="form-select" name="taxCategory"  value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="standard">Standard Rate</option>
                    <option value="reduced">Reduced Rate</option>
                    <option value="zero">Zero Rate</option>
                  </select>
                  {errors.taxCategory && <div className="text-danger small">{errors.taxCategory}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Cost Center</label>
                  <input type="text" className="form-control" name="costCenter"  value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.costCenter && <div className="text-danger small">{errors.costCenter}</div>}
                </div>

                {/* Additional Information */}
                <h5 className="mb-3 mt-4">Additional Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Payment Terms</label>
                  <select
                    className="form-select"
                    name="paymentTerms"
                    value={additionalInformation.paymentTerms}
                    onChange={handleAdditionalChange}
                  >
                    <option value="">Select Payment Terms</option>  {/* <-- placeholder */}
                    <option value="net30">Net 30</option>
                    <option value="net60">Net 60</option>
                    <option value="net90">Net 90</option>
                  </select>
                  {errors.paymentTerms && <div className="text-danger small">{errors.paymentTerms}</div>}
                </div>

                <div className="col-md-6">
                  <label className="form-label">Credit Limit</label>
                  <input type="number" className="form-control" name="creditLimit"  value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                  {errors.creditLimit && <div className="text-danger small">{errors.creditLimit}</div>}
                </div>
              </div>
              <div className="col-md-12">
                <label className="form-label">Notes</label>
                <textarea className="form-control" rows="3" name="notes"  value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
                {errors.notes && <div className="text-danger small">{errors.notes}</div>}
              </div>

              <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>
                <button type="submit" id="btn-All" className="btn btn-dark">{id || client?._id ? "Update client" : "Create"}</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddClientManagement;


















// /////////////////////////

import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch } from 'react-redux';
import { createClients, fetchClient, UpdateClients } from '../../../redux/slices/ClientSlice';
import "react-toastify/dist/ReactToastify.css";
import axios from 'axios';
import { apiUrl } from '../../../redux/utils/config';
import CreatableSelect from "react-select/creatable";

// Add this function to format date for input fields
const formatDate = (dateStr) => {
  if (!dateStr) return '';
  const d = new Date(dateStr);
  if (isNaN(d)) return '';
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${d.getFullYear()}-${month}-${day}`;
};

function AddClientManagement() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mo
  const location = useLocation();
  const { client } = location.state || {};
  const _id = client?._id
  console.log("oo", _id);

  // Initial form state
  const [formData, setFormData] = useState({
    clientName: '',
    industry: '',
    website: '',
    clientAddress: '',
    TaxID_VATNumber: '',
    CSRCode: '',
    Status: ''
  });

  // Contact persons state
  const [contactPersons, setContactPersons] = useState([
    {
      contactName: '',
      jobTitle: '',
      email: '',
      phone: '',
      department: '',
      salesRepresentative: ''
    }
  ]);

  // Billing information state
  const [billingInformation, setBillingInformation] = useState([
    {
      billingAddress: '',
      billingContactName: '',
      billingEmail: '',
      billingPhone: '',
      currency: '',
      preferredPaymentMethod: ''
    }
  ]);
  // Shipping information state
  const [shippingInformation, setShippingInformation] = useState([
    {
      shippingAddress: '',
      shippingContactName: '',
      shippingEmail: '',
      shippingPhone: '',
      preferredShippingMethod: '',
      specialInstructions: ''
    }
  ]);
  // Financial information state
  const [financialInformation, setFinancialInformation] = useState([
    {
      annualRevenue: '',
      creditRating: '',
      bankName: '',
      accountNumber: '',
      fiscalYearEnd: '',
      financialContact: ''
    }
  ]);

  // Ledger information state
  const [ledgerInformation, setLedgerInformation] = useState([
    {
      accountCode: '',
      accountType: '',
      openingBalance: '',
      balanceDate: '',
      taxCategory: '',
      costCenter: ''
    }
  ]);

  // Additional information state
  const [additionalInformation, setAdditionalInformation] = useState({
    paymentTerms: '',
    creditLimit: '',
    notes: ''
  });

  // Add state for errors
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const updateStates = (clientData) => {
      setFormData({
        clientName: clientData.clientName || '',
        industry: clientData.industry || '',
        website: clientData.website || '',
        clientAddress: clientData.clientAddress || '',
        TaxID_VATNumber: clientData.TaxID_VATNumber || '',
        CSRCode: clientData.CSRCode || '',
        Status: clientData.Status || ''
      });

      setContactPersons(clientData.contactPersons || []);
      setBillingInformation(clientData.billingInformation || []);
      setShippingInformation(clientData.shippingInformation || []);
      setFinancialInformation(
        (clientData.financialInformation || []).map((item) => ({
          ...item,
          fiscalYearEnd: formatDate(item.fiscalYearEnd),
        }))
      );
      setLedgerInformation(
        (clientData.ledgerInformation || []).map((item) => ({
          ...item,
          balanceDate: formatDate(item.balanceDate),
        }))
      );
      setAdditionalInformation(clientData.additionalInformation || {
        paymentTerms: '',
        creditLimit: '',
        notes: ''
      });
    };

    if (client) {
      updateStates(client);
    } else if (id) {
      dispatch(fetchclientById(id)).then((res) => {
        const fetchedclient = res.payload;
        if (fetchedclient) {
          updateStates(fetchedclient);
        }
      });
    }
  }, [id, dispatch, client]);



  // Handle basic form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle contact person changes
  const handleContactChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'phone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedContacts = [...contactPersons];
    updatedContacts[index] = {
      ...updatedContacts[index],
      [name]: newValue
    };
    setContactPersons(updatedContacts);
  };

  // Handle billing information changes
  const handleBillingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'billingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedBilling = [...billingInformation];
    updatedBilling[index] = {
      ...updatedBilling[index],
      [name]: newValue
    };
    setBillingInformation(updatedBilling);
  };

  // Handle shipping information changes
  const handleShippingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'shippingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedShipping = [...shippingInformation];
    updatedShipping[index] = {
      ...updatedShipping[index],
      [name]: newValue
    };
    setShippingInformation(updatedShipping);
  };

  // Handle financial information changes
  const handleFinancialChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'creditRating') {
      // Only allow numbers between 1 and 5
      let num = Number(newValue);
      if (newValue === '') {
        newValue = '';
      } else if (num < 1) {
        newValue = '1';
      } else if (num > 5) {
        newValue = '5';
      } else {
        newValue = String(num);
      }
    }
    const updatedFinancial = [...financialInformation];
    updatedFinancial[index] = {
      ...updatedFinancial[index],
      [name]: newValue
    };
    setFinancialInformation(updatedFinancial);
  };

  // Handle ledger information changes
  const handleLedgerChange = (index, e) => {
    const { name, value } = e.target;
    const updatedLedger = [...ledgerInformation];
    updatedLedger[index] = {
      ...updatedLedger[index],
      [name]: value
    };
    setLedgerInformation(updatedLedger);
  };


  const handleAdditionalChange = (e) => {
    const { name, value } = e.target;
    setAdditionalInformation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Validation function
  const validate = () => {
    const newErrors = {};

    // Basic form fields
    if (!formData.clientName.trim()) newErrors.clientName = 'Name is required';
    if (!formData.industry) newErrors.industry = 'industry is required';
    if (!formData.website.trim()) newErrors.website = 'Website is required';
    else if (!/^https?:\/\//.test(formData.website)) newErrors.website = 'Website must start with http:// or https://';
    if (!formData.clientAddress.trim()) newErrors.clientAddress = 'Client Address is required';
    if (!formData.TaxID_VATNumber.trim()) newErrors.TaxID_VATNumber = 'Tax ID/VAT Number is required';
    if (!formData.CSRCode.trim()) newErrors.CSRCode = 'CSR Code is required';
    if (!formData.Status) newErrors.Status = 'Status is required';

    // Contact Persons
    contactPersons.forEach((contact, idx) => {
      if (!contact.contactName.trim()) newErrors[`contactName_${idx}`] = 'Contact Name is required';
      if (!contact.jobTitle.trim()) newErrors[`jobTitle_${idx}`] = 'Job Title is required';
      if (!contact.email.trim()) newErrors[`email_${idx}`] = 'Email is required';
      else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(contact.email)) newErrors[`email_${idx}`] = 'Invalid email';
      if (!contact.phone.trim()) newErrors[`phone_${idx}`] = 'Phone is required';
      else if (!/^\d{10}$/.test(contact.phone)) newErrors[`phone_${idx}`] = 'Phone must be 10 digits';
      if (!contact.department.trim()) newErrors[`department_${idx}`] = 'Department is required';
      if (!contact.salesRepresentative.trim()) newErrors[`salesRepresentative_${idx}`] = 'Sales Representative is required';
    });

    // Billing Information (first item)
    const billing = billingInformation[0] || {};
    if (!billing.billingAddress.trim()) newErrors.billingAddress = 'Billing Address is required';
    if (!billing.billingContactName.trim()) newErrors.billingContactName = 'Billing Contact Name is required';
    if (!billing.billingEmail.trim()) newErrors.billingEmail = 'Billing Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(billing.billingEmail)) newErrors.billingEmail = 'Invalid email';
    if (!billing.billingPhone.trim()) newErrors.billingPhone = 'Billing Phone is required';
    else if (!/^\d{10}$/.test(billing.billingPhone)) newErrors.billingPhone = 'Phone must be 10 digits';
    if (!billing.currency) newErrors.currency = 'Currency is required';
    if (!billing.preferredPaymentMethod) newErrors.preferredPaymentMethod = 'Preferred Payment Method is required';

    // Shipping Information (first item)
    const shipping = shippingInformation[0] || {};
    if (!shipping.shippingAddress.trim()) newErrors.shippingAddress = 'Shipping Address is required';
    if (!shipping.shippingContactName.trim()) newErrors.shippingContactName = 'Shipping Contact Name is required';
    if (!shipping.shippingEmail.trim()) newErrors.shippingEmail = 'Shipping Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(shipping.shippingEmail)) newErrors.shippingEmail = 'Invalid email';
    if (!shipping.shippingPhone.trim()) newErrors.shippingPhone = 'Shipping Phone is required';
    else if (!/^\d{10}$/.test(shipping.shippingPhone)) newErrors.shippingPhone = 'Phone must be 10 digits';
    if (!shipping.preferredShippingMethod) newErrors.preferredShippingMethod = 'Preferred Shipping Method is required';
    if (!shipping.specialInstructions.trim()) newErrors.specialInstructions = 'Special Instructions are required';

    // Financial Information (first item)
    const financial = financialInformation[0] || {};
    if (!financial.annualRevenue) newErrors.annualRevenue = 'Annual Revenue is required';
    else if (isNaN(financial.annualRevenue) || Number(financial.annualRevenue) < 0) newErrors.annualRevenue = 'Annual Revenue must be a positive number';
    if (!financial.creditRating) newErrors.creditRating = 'Credit Rating is required';
    else if (isNaN(financial.creditRating) || Number(financial.creditRating) < 1 || Number(financial.creditRating) > 5) newErrors.creditRating = 'Credit Rating must be between 1 and 5';
    if (!financial.bankName.trim()) newErrors.bankName = 'Bank Name is required';
    if (!financial.accountNumber.trim()) newErrors.accountNumber = 'Account Number is required';
    if (!financial.fiscalYearEnd) newErrors.fiscalYearEnd = 'Fiscal Year End is required';
    if (!financial.financialContact.trim()) newErrors.financialContact = 'Financial Contact is required';

    // Ledger Information (first item)
    const ledger = ledgerInformation[0] || {};
    if (!ledger.accountCode.trim()) newErrors.accountCode = 'Account Code is required';
    if (!ledger.accountType) newErrors.accountType = 'Account Type is required';
    if (!ledger.openingBalance) newErrors.openingBalance = 'Opening Balance is required';
    else if (isNaN(ledger.openingBalance)) newErrors.openingBalance = 'Opening Balance must be a number';
    if (!ledger.balanceDate) newErrors.balanceDate = 'Balance Date is required';
    if (!ledger.taxCategory) newErrors.taxCategory = 'Tax Category is required';
    if (!ledger.costCenter.trim()) newErrors.costCenter = 'Cost Center is required';

    // Additional Information
    if (!additionalInformation.paymentTerms) newErrors.paymentTerms = 'Payment Terms is required';
    if (!additionalInformation.creditLimit) newErrors.creditLimit = 'Credit Limit is required';
    else if (isNaN(additionalInformation.creditLimit) || Number(additionalInformation.creditLimit) < 0) newErrors.creditLimit = 'Credit Limit must be a positive number';
    if (!additionalInformation.notes.trim()) newErrors.notes = 'Notes is required';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validate()) {
      toast.error('Please fix the errors in the form.');
      return;
    }
    const fullData = {
      ...formData,
      contactPersons,
      billingInformation,
      shippingInformation,
      financialInformation,
      ledgerInformation,
      additionalInformation
    };
    console.log('Full Data Object:', fullData);
    if (_id) {
      dispatch(UpdateClients({ _id, data: fullData }))
        .unwrap()
        .then(() => {
          toast.success("clientupdated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Failed to update client!");
        });
    } else {
      dispatch(createClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientcreated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Error creating client");
        });
    }
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const fullData = {
  //     ...formData,
  //     contactPersons,
  //     billingInformation,
  //     shippingInformation,
  //     financialInformation,
  //     ledgerInformation,
  //     additionalInformation
  //   };
  //         dispatch(createClients(fullData))
  //       .unwrap()
  //       .then(() => {
  //         toast.success("clientcreated successfully!");
  //         navigate("/clientManagement");
  //       })
  //       .catch(() => {
  //         toast.error("Error creating client");
  //       });
  // };

  // ///////////////////////////////////////////////////////////////////////////////////////////

  // Keep the options in local state so we can push newly‑created ones
  const [brandOptions, setBrandOptions] = useState([
    { value: "Coca‑Cola", label: "Coca‑Cola" },
    { value: "Pepsi", label: "Pepsi" },
    // …your initial list
  ]);

  // When the user creates a brand that isn’t in the list yet
  const handleCreate = (inputValue) => {
    const newOption = { value: inputValue, label: inputValue };
    setBrandOptions((prev) => [...prev, newOption]);
    setFormData((prev) => ({ ...prev, brandName: inputValue }));
  };

  // Add state for select options
  const [selectOptions, setSelectOptions] = useState({
    industry: [],
    currency: [],
    preferredPaymentMethod: [],
    preferredShippingMethod: [],
    accountType: [],
  
  });

  // Fetch select options from API on mount
  useEffect(() => {
    axios.get(`${apiUrl}/client/selectclient`)
      .then(res => {
        if (res.data.success && res.data.data) {
          setSelectOptions({
            industry: (res.data.data.industry || []).map(v => ({ value: v, label: v })),
            currency: (res.data.data.currency || []).map(v => ({ value: v, label: v })),
            preferredPaymentMethod: (res.data.data.preferredPaymentMethod || []).map(v => ({ value: v, label: v })),
            preferredShippingMethod: (res.data.data.preferredShippingMethod || []).map(v => ({ value: v, label: v })),
            accountType: (res.data.data.accountType || []).map(v => ({ value: v, label: v })),
          });
        }
      });
  }, []);

  // Generic handler for creating new options
  const handleCreateOption = (field) => (inputValue) => {
    axios.post(`${apiUrl}/client/selectclient`, {
      [field]: [...selectOptions[field].map(opt => opt.value), inputValue]
    }).then(() => {
      setSelectOptions(prev => ({
        ...prev,
        [field]: [...prev[field], { value: inputValue, label: inputValue }]
      }));
      setFormData(prev => ({
        ...prev,
        [field]: inputValue
      }));
    });
  };

  return (
    <>
      <ToastContainer />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-body">
            {/* <h1 className="card-title h4 mb-4">Add Company</h1> */}
            <h2 className="mb-4">{id || client?._id ? "Edit client" : "New Company (Client)"}</h2>
            <form className="row g-3" onSubmit={handleSubmit}>
              <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
              <div className="col-md-6"></div>
              <div className="col-md-6">
                <label className="form-label">Name</label>
                <input required type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
                {errors.clientName && <div className="text-danger small">{errors.clientName}</div>}
              </div>

              {/* <div className="col-md-6">
                <label className="form-label">industry</label>
                <select className="form-select" name="industry" required value={formData.industry} onChange={handleChange}>
                  <option value="">Select industry</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="tech">Technology</option>
                  <option value="retail">Retail</option>
                </select>
                {errors.industry && <div className="text-danger small">{errors.industry}</div>}
              </div> */}
              {/* industry */}
              <div className="col-md-6">
                <label className="form-label">Industry</label>
                <CreatableSelect
                  options={selectOptions.industry}
                  value={selectOptions.industry.find((opt) => opt.value === formData.industry)}
                  onChange={(option) =>
                    setFormData((prev) => ({ ...prev, industry: option?.value || "" }))
                  }
                  onCreateOption={handleCreateOption('industry')}
                  isClearable
                  required
                />
              </div>

              <div className="col-md-6">
                <label className="form-label">Website</label>
                <input required type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
                {errors.website && <div className="text-danger small">{errors.website}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Client Address</label>
                <textarea required className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
                {errors.clientAddress && <div className="text-danger small">{errors.clientAddress}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Tax ID/VAT Number</label>
                <input required type="text" name="TaxID_VATNumber" value={formData.TaxID_VATNumber} onChange={handleChange} className="form-control" />
                {errors.TaxID_VATNumber && <div className="text-danger small">{errors.TaxID_VATNumber}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">CSR Code</label>
                <input type="text" name="CSRCode" required value={formData.CSRCode} onChange={handleChange} className="form-control" />
                {errors.CSRCode && <div className="text-danger small">{errors.CSRCode}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="Status"
                  required
                  value={formData.Status}
                  onChange={handleChange}
                >
                  <option value="">Select Status</option> {/* empty option for forcing selection */}
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
                {errors.Status && <div className="text-danger small">{errors.Status}</div>}
              </div>

              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Contact Persons</h5>

                {contactPersons.map((contact, index) => (
                  <div className="border p-3 mb-3" key={index}>
                    <div className="row">
                      <div className="col-md-6">
                        <label className="form-label">Contact Name</label>
                        <input
                          type="text"
                          name="contactName"
                          required
                          value={contact.contactName}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Contact Name"
                        />
                        {errors[`contactName_${index}`] && <div className="text-danger small">{errors[`contactName_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Job Title</label>
                        <input
                          type="text"
                          name="jobTitle"
                          required
                          value={contact.jobTitle}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Job Title"
                        />
                        {errors[`jobTitle_${index}`] && <div className="text-danger small">{errors[`jobTitle_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                          type="email"
                          name="email"
                          required
                          value={contact.email}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Email"
                        />
                        {errors[`email_${index}`] && <div className="text-danger small">{errors[`email_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Phone</label>
                        <input
                          type="tel"
                          name="phone"
                          required
                          value={contact.phone}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Phone"
                          maxLength={10}
                        />
                        {errors[`phone_${index}`] && <div className="text-danger small">{errors[`phone_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Department</label>
                        <input
                          type="text"
                          name="department"
                          required
                          value={contact.department}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Department"
                        />
                        {errors[`department_${index}`] && <div className="text-danger small">{errors[`department_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Sales Representative</label>
                        <input
                          type="text"
                          name="salesRepresentative"
                          required
                          value={contact.salesRepresentative}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Sales Representative"
                        />
                        {errors[`salesRepresentative_${index}`] && <div className="text-danger small">{errors[`salesRepresentative_${index}`]}</div>}
                      </div>

                      <div className="col-md-12 mt-2 d-flex justify-content-end">
                        {contactPersons.length > 1 && (
                          <button
                            type="button"
                            className="btn btn-danger btn-sm"
                            onClick={() => {
                              const updatedContacts = [...contactPersons];
                              updatedContacts.splice(index, 1);
                              setContactPersons(updatedContacts);
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Add More Button */}
                <div className="mb-3">
                  <button
                    type="button"
                    className="btn btn-primary"
                    onClick={() => {
                      setContactPersons([
                        ...contactPersons,
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    }}
                  >
                    + Add Another Contact
                  </button>
                </div>
              </div>

              {/* Billing Information */}
              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Billing Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Billing Address</label>
                  <textarea className="form-control" rows="3" name="billingAddress" required value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                  {errors.billingAddress && <div className="text-danger small">{errors.billingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Contact Name</label>
                  <input type="text" className="form-control" name="billingContactName" required value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingContactName && <div className="text-danger small">{errors.billingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Email</label>
                  <input type="email" className="form-control" name="billingEmail" required value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingEmail && <div className="text-danger small">{errors.billingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Phone</label>
                  <input type="tel" className="form-control" name="billingPhone" required value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} maxLength={10} />
                  {errors.billingPhone && <div className="text-danger small">{errors.billingPhone}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <select className="form-select" name="currency" required value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Currency</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                  {errors.currency && <div className="text-danger small">{errors.currency}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <CreatableSelect
                    options={selectOptions.currency}
                    value={selectOptions.currency.find((opt) => opt.value === formData.currency)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, currency: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('currency')}
                    isClearable
                    required
                  />
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <select className="form-select" name="preferredPaymentMethod" required value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Payment Method</option>
                    <option value="BankTransfer">BankTransfer</option>
                    <option value="CreditCard">CreditCard</option>
                    <option value="Check">Check</option>
                  </select>
                  {errors.preferredPaymentMethod && <div className="text-danger small">{errors.preferredPaymentMethod}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredPaymentMethod}
                    value={selectOptions.preferredPaymentMethod.find((opt) => opt.value === formData.preferredPaymentMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredPaymentMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredPaymentMethod')}
                    isClearable
                    required
                  />
                </div>

                {/* Shipping Information */}
                <h5 className="mb-3 mt-4">Shipping Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Shipping Address</label>
                  <textarea className="form-control" rows="3" name="shippingAddress" required value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.shippingAddress && <div className="text-danger small">{errors.shippingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Contact Name</label>
                  <input type="text" className="form-control" name="shippingContactName" required value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingContactName && <div className="text-danger small">{errors.shippingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Email</label>
                  <input type="email" className="form-control" name="shippingEmail" required value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingEmail && <div className="text-danger small">{errors.shippingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Phone</label>
                  <input type="tel" className="form-control" name="shippingPhone" required value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} maxLength={10} />
                  {errors.shippingPhone && <div className="text-danger small">{errors.shippingPhone}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <select className="form-select" name="preferredShippingMethod" required value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                    <option value="">Select Shipping Method</option>
                    <option value="ground">Ground</option>
                    <option value="standard">Standard</option>
                    <option value="express">Express</option>
                    <option value="overnight">Overnight</option>
                  </select>
                  {errors.preferredShippingMethod && <div className="text-danger small">{errors.preferredShippingMethod}</div>}
                </div> */}
             <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredShippingMethod}
                    value={selectOptions.preferredShippingMethod.find((opt) => opt.value === formData.preferredShippingMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredShippingMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredShippingMethod')}
                    isClearable
                    required
                  />
                </div>


                <div className="col-md-12">
                  <label className="form-label">Special Instructions</label>
                  <textarea className="form-control" rows="3" name="specialInstructions" required value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.specialInstructions && <div className="text-danger small">{errors.specialInstructions}</div>}
                </div>

                {/* Financial Information */}
                <h5 className="mb-3 mt-4">Financial Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Annual Revenue</label>
                  <input type="number" className="form-control" name="annualRevenue" required value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.annualRevenue && <div className="text-danger small">{errors.annualRevenue}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Rating</label>
                  <input type="number" className="form-control" name="creditRating" required value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} min={1} max={5} />
                  {errors.creditRating && <div className="text-danger small">{errors.creditRating}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Bank Name</label>
                  <input type="text" className="form-control" name="bankName" required value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.bankName && <div className="text-danger small">{errors.bankName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Number</label>
                  <input type="text" className="form-control" name="accountNumber" required value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.accountNumber && <div className="text-danger small">{errors.accountNumber}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Fiscal Year End</label>
                  <input type="date" className="form-control" name="fiscalYearEnd" required value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.fiscalYearEnd && <div className="text-danger small">{errors.fiscalYearEnd}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Financial Contact</label>
                  <input type="text" className="form-control" name="financialContact" required value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.financialContact && <div className="text-danger small">{errors.financialContact}</div>}
                </div>

                {/* Ledger Information */}
                <h5 className="mb-3 mt-4">Ledger Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Account Code</label>
                  <input type="text" className="form-control" name="accountCode" required value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.accountCode && <div className="text-danger small">{errors.accountCode}</div>}
                </div>
               
                {/* <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <select className="form-select" name="accountType" required value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="">Select Account Type</option>
                    <option value="AccountsReceivable">AccountsReceivable</option>
                    <option value="AccountsPayable">AccountsPayable</option>
                  </select>
                  {errors.accountType && <div className="text-danger small">{errors.accountType}</div>}
                </div> */}
      <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <CreatableSelect
                    options={selectOptions.accountType}
                    value={selectOptions.accountType.find((opt) => opt.value === formData.accountType)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, accountType: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('accountType')}
                    isClearable
                    required
                  />
                </div>

                <div className="col-md-6">
                  <label className="form-label">Opening Balance</label>
                  <input type="number" className="form-control" name="openingBalance" required value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.openingBalance && <div className="text-danger small">{errors.openingBalance}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Balance Date</label>
                  <input type="date" className="form-control" name="balanceDate" required value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.balanceDate && <div className="text-danger small">{errors.balanceDate}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Tax Category</label>
                  <select className="form-select" name="taxCategory" required value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="standard">Standard Rate</option>
                    <option value="reduced">Reduced Rate</option>
                    <option value="zero">Zero Rate</option>
                  </select>
                  {errors.taxCategory && <div className="text-danger small">{errors.taxCategory}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Cost Center</label>
                  <input type="text" className="form-control" name="costCenter" required value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.costCenter && <div className="text-danger small">{errors.costCenter}</div>}
                </div>

                {/* Additional Information */}
                <h5 className="mb-3 mt-4">Additional Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Payment Terms</label>
                  <select
                    className="form-select"
                    name="paymentTerms"
                    required
                    value={additionalInformation.paymentTerms}
                    onChange={handleAdditionalChange}
                  >
                    <option value="">Select Payment Terms</option>  {/* <-- placeholder */}
                    <option value="net30">Net 30</option>
                    <option value="net60">Net 60</option>
                    <option value="net90">Net 90</option>
                  </select>
                  {errors.paymentTerms && <div className="text-danger small">{errors.paymentTerms}</div>}
                </div>

                <div className="col-md-6">
                  <label className="form-label">Credit Limit</label>
                  <input type="number" className="form-control" name="creditLimit" required value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                  {errors.creditLimit && <div className="text-danger small">{errors.creditLimit}</div>}
                </div>
              </div>
              <div className="col-md-12">
                <label className="form-label">Notes</label>
                <textarea className="form-control" rows="3" name="notes" required value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
                {errors.notes && <div className="text-danger small">{errors.notes}</div>}
              </div>

              <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>
                <button type="submit" id="btn-All" className="btn btn-dark">{id || client?._id ? "Update client" : "Create"}</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddClientManagement;






































// ////////////////////////////////////////////////////////
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch } from 'react-redux';
import { createClients, fetchClient, UpdateClients } from '../../../redux/slices/ClientSlice';
import "react-toastify/dist/ReactToastify.css";
import axios from 'axios';
import { apiUrl } from '../../../redux/utils/config';
import CreatableSelect from "react-select/creatable";

// Add this function to format date for input fields
const formatDate = (dateStr) => {
  if (!dateStr) return '';
  const d = new Date(dateStr);
  if (isNaN(d)) return '';
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${d.getFullYear()}-${month}-${day}`;
};

function AddClientManagement() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mo
  const location = useLocation();
  const { client } = location.state || {};
  const _id = client?._id
  console.log("oo", _id);

  // Initial form state
  const [formData, setFormData] = useState({
    clientName: '',
    industry: '',
    website: '',
    clientAddress: '',
    TaxID_VATNumber: '',
    CSRCode: '',
    Status: '',
    button_Client_Suplier: ''
  });

  // Contact persons state
  const [contactPersons, setContactPersons] = useState([
    {
      contactName: '',
      jobTitle: '',
      email: '',
      phone: '',
      department: '',
      salesRepresentative: ''
    }
  ]);

  // Billing information state
  const [billingInformation, setBillingInformation] = useState([
    {
      billingAddress: '',
      billingContactName: '',
      billingEmail: '',
      billingPhone: '',
      currency: '',
      preferredPaymentMethod: ''
    }
  ]);
  // Shipping information state
  const [shippingInformation, setShippingInformation] = useState([
    {
      shippingAddress: '',
      shippingContactName: '',
      shippingEmail: '',
      shippingPhone: '',
      preferredShippingMethod: '',
      specialInstructions: ''
    }
  ]);
  // Financial information state
  const [financialInformation, setFinancialInformation] = useState([
    {
      annualRevenue: '',
      creditRating: '',
      bankName: '',
      accountNumber: '',
      fiscalYearEnd: '',
      financialContact: ''
    }
  ]);

  // Ledger information state
  const [ledgerInformation, setLedgerInformation] = useState([
    {
      accountCode: '',
      accountType: '',
      openingBalance: '',
      balanceDate: '',
      taxCategory: '',
      costCenter: ''
    }
  ]);

  // Additional information state
  const [additionalInformation, setAdditionalInformation] = useState({
    paymentTerms: '',
    creditLimit: '',
    notes: ''
  });

  // Add state for errors
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const updateStates = (clientData) => {
      setFormData({
        clientName: clientData.clientName || '',
        industry: clientData.industry || '',
        website: clientData.website || '',
        clientAddress: clientData.clientAddress || '',
        TaxID_VATNumber: clientData.TaxID_VATNumber || '',
        CSRCode: clientData.CSRCode || '',
        Status: clientData.Status || '',
        button_Client_Suplier: clientData.button_Client_Suplier || ''
      });

      setContactPersons(clientData.contactPersons || []);
      setBillingInformation(clientData.billingInformation || []);
      setShippingInformation(clientData.shippingInformation || []);
      setFinancialInformation(
        (clientData.financialInformation || []).map((item) => ({
          ...item,
          fiscalYearEnd: formatDate(item.fiscalYearEnd),
        }))
      );
      setLedgerInformation(
        (clientData.ledgerInformation || []).map((item) => ({
          ...item,
          balanceDate: formatDate(item.balanceDate),
        }))
      );
      setAdditionalInformation(clientData.additionalInformation || {
        paymentTerms: '',
        creditLimit: '',
        notes: ''
      });
    };

    if (client) {
      updateStates(client);
    } else if (id) {
      dispatch(fetchclientById(id)).then((res) => {
        const fetchedclient = res.payload;
        if (fetchedclient) {
          updateStates(fetchedclient);
        }
      });
    }
  }, [id, dispatch, client]);



  // Handle basic form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle contact person changes
  const handleContactChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'phone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedContacts = [...contactPersons];
    updatedContacts[index] = {
      ...updatedContacts[index],
      [name]: newValue
    };
    setContactPersons(updatedContacts);
  };

  // Handle billing information changes
  const handleBillingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'billingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedBilling = [...billingInformation];
    updatedBilling[index] = {
      ...updatedBilling[index],
      [name]: newValue
    };
    setBillingInformation(updatedBilling);
  };

  // Handle shipping information changes
  const handleShippingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'shippingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedShipping = [...shippingInformation];
    updatedShipping[index] = {
      ...updatedShipping[index],
      [name]: newValue
    };
    setShippingInformation(updatedShipping);
  };

  // Handle financial information changes
  const handleFinancialChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'creditRating') {
      // Only allow numbers between 1 and 5
      let num = Number(newValue);
      if (newValue === '') {
        newValue = '';
      } else if (num < 1) {
        newValue = '1';
      } else if (num > 5) {
        newValue = '5';
      } else {
        newValue = String(num);
      }
    }
    const updatedFinancial = [...financialInformation];
    updatedFinancial[index] = {
      ...updatedFinancial[index],
      [name]: newValue
    };
    setFinancialInformation(updatedFinancial);
  };

  // Handle ledger information changes
  const handleLedgerChange = (index, e) => {
    const { name, value } = e.target;
    const updatedLedger = [...ledgerInformation];
    updatedLedger[index] = {
      ...updatedLedger[index],
      [name]: value
    };
    setLedgerInformation(updatedLedger);
  };


  const handleAdditionalChange = (e) => {
    const { name, value } = e.target;
    setAdditionalInformation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Validation function
  const validate = () => {
    const newErrors = {};

    // Basic form fields
    if (!formData.clientName.trim()) newErrors.clientName = 'Name is required';
    if (!formData.industry) newErrors.industry = 'industry is required';
    if (!formData.website.trim()) newErrors.website = 'Website is required';
    else if (!/^https?:\/\//.test(formData.website)) newErrors.website = 'Website must start with http:// or https://';
    if (!formData.clientAddress.trim()) newErrors.clientAddress = 'Client Address is required';
    if (!formData.TaxID_VATNumber.trim()) newErrors.TaxID_VATNumber = 'Tax ID/VAT Number is required';
    if (!formData.CSRCode.trim()) newErrors.CSRCode = 'CSR Code is required';
    if (!formData.Status) newErrors.Status = 'Status is required';

    // Contact Persons
    contactPersons.forEach((contact, idx) => {
      if (!contact.contactName.trim()) newErrors[`contactName_${idx}`] = 'Contact Name is required';
      if (!contact.jobTitle.trim()) newErrors[`jobTitle_${idx}`] = 'Job Title is required';
      if (!contact.email.trim()) newErrors[`email_${idx}`] = 'Email is required';
      else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(contact.email)) newErrors[`email_${idx}`] = 'Invalid email';
      if (!contact.phone.trim()) newErrors[`phone_${idx}`] = 'Phone is required';
      else if (!/^\d{10}$/.test(contact.phone)) newErrors[`phone_${idx}`] = 'Phone must be 10 digits';
      if (!contact.department.trim()) newErrors[`department_${idx}`] = 'Department is required';
      if (!contact.salesRepresentative.trim()) newErrors[`salesRepresentative_${idx}`] = 'Sales Representative is required';
    });

    // Billing Information (first item)
    const billing = billingInformation[0] || {};
    if (!billing.billingAddress.trim()) newErrors.billingAddress = 'Billing Address is required';
    if (!billing.billingContactName.trim()) newErrors.billingContactName = 'Billing Contact Name is required';
    if (!billing.billingEmail.trim()) newErrors.billingEmail = 'Billing Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(billing.billingEmail)) newErrors.billingEmail = 'Invalid email';
    if (!billing.billingPhone.trim()) newErrors.billingPhone = 'Billing Phone is required';
    else if (!/^\d{10}$/.test(billing.billingPhone)) newErrors.billingPhone = 'Phone must be 10 digits';
    if (!billing.currency) newErrors.currency = 'Currency is required';
    if (!billing.preferredPaymentMethod) newErrors.preferredPaymentMethod = 'Preferred Payment Method is required';

    // Shipping Information (first item)
    const shipping = shippingInformation[0] || {};
    if (!shipping.shippingAddress.trim()) newErrors.shippingAddress = 'Shipping Address is required';
    if (!shipping.shippingContactName.trim()) newErrors.shippingContactName = 'Shipping Contact Name is required';
    if (!shipping.shippingEmail.trim()) newErrors.shippingEmail = 'Shipping Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(shipping.shippingEmail)) newErrors.shippingEmail = 'Invalid email';
    if (!shipping.shippingPhone.trim()) newErrors.shippingPhone = 'Shipping Phone is required';
    else if (!/^\d{10}$/.test(shipping.shippingPhone)) newErrors.shippingPhone = 'Phone must be 10 digits';
    if (!shipping.preferredShippingMethod) newErrors.preferredShippingMethod = 'Preferred Shipping Method is required';
    if (!shipping.specialInstructions.trim()) newErrors.specialInstructions = 'Special Instructions are required';

    // Financial Information (first item)
    const financial = financialInformation[0] || {};
    if (!financial.annualRevenue) newErrors.annualRevenue = 'Annual Revenue is required';
    else if (isNaN(financial.annualRevenue) || Number(financial.annualRevenue) < 0) newErrors.annualRevenue = 'Annual Revenue must be a positive number';
    if (!financial.creditRating) newErrors.creditRating = 'Credit Rating is required';
    else if (isNaN(financial.creditRating) || Number(financial.creditRating) < 1 || Number(financial.creditRating) > 5) newErrors.creditRating = 'Credit Rating must be between 1 and 5';
    if (!financial.bankName.trim()) newErrors.bankName = 'Bank Name is required';
    if (!financial.accountNumber.trim()) newErrors.accountNumber = 'Account Number is required';
    if (!financial.fiscalYearEnd) newErrors.fiscalYearEnd = 'Fiscal Year End is required';
    if (!financial.financialContact.trim()) newErrors.financialContact = 'Financial Contact is required';

    // Ledger Information (first item)
    const ledger = ledgerInformation[0] || {};
    if (!ledger.accountCode.trim()) newErrors.accountCode = 'Account Code is required';
    if (!ledger.accountType) newErrors.accountType = 'Account Type is required';
    if (!ledger.openingBalance) newErrors.openingBalance = 'Opening Balance is required';
    else if (isNaN(ledger.openingBalance)) newErrors.openingBalance = 'Opening Balance must be a number';
    if (!ledger.balanceDate) newErrors.balanceDate = 'Balance Date is required';
    if (!ledger.taxCategory) newErrors.taxCategory = 'Tax Category is required';
    if (!ledger.costCenter.trim()) newErrors.costCenter = 'Cost Center is required';

    // Additional Information
    if (!additionalInformation.paymentTerms) newErrors.paymentTerms = 'Payment Terms is required';
    if (!additionalInformation.creditLimit) newErrors.creditLimit = 'Credit Limit is required';
    else if (isNaN(additionalInformation.creditLimit) || Number(additionalInformation.creditLimit) < 0) newErrors.creditLimit = 'Credit Limit must be a positive number';
    if (!additionalInformation.notes.trim()) newErrors.notes = 'Notes is required';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    const fullData = {
      ...formData,
      contactPersons,
      billingInformation,
      shippingInformation,
      financialInformation,
      ledgerInformation,
      additionalInformation
    };
    console.log('Full Data Object:', fullData);
    if (_id) {
      dispatch(UpdateClients({ _id, data: fullData }))
        .unwrap()
        .then(() => {
          toast.success("clientupdated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Failed to update client!");
        });
    } else {
      dispatch(createClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientcreated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Error creating client");
        });
    }
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const fullData = {
  //     ...formData,
  //     contactPersons,
  //     billingInformation,
  //     shippingInformation,
  //     financialInformation,
  //     ledgerInformation,
  //     additionalInformation
  //   };
  //         dispatch(createClients(fullData))
  //       .unwrap()
  //       .then(() => {
  //         toast.success("clientcreated successfully!");
  //         navigate("/clientManagement");
  //       })
  //       .catch(() => {
  //         toast.error("Error creating client");
  //       });
  // };

  // ///////////////////////////////////////////////////////////////////////////////////////////

  // Keep the options in local state so we can push newly‑created ones
  const [brandOptions, setBrandOptions] = useState([
    { value: "Coca‑Cola", label: "Coca‑Cola" },
    { value: "Pepsi", label: "Pepsi" },
    // …your initial list
  ]);

  // When the user creates a brand that isn’t in the list yet
  const handleCreate = (inputValue) => {
    const newOption = { value: inputValue, label: inputValue };
    setBrandOptions((prev) => [...prev, newOption]);
    setFormData((prev) => ({ ...prev, brandName: inputValue }));
  };

  // Add state for select options
  const [selectOptions, setSelectOptions] = useState({
    industry: [],
    currency: [],
    preferredPaymentMethod: [],
    preferredShippingMethod: [],
    accountType: [],

  });

  // Fetch select options from API on mount
  useEffect(() => {
    axios.get(`${apiUrl}/client/selectclient`)
      .then(res => {
        if (res.data.success && res.data.data) {
          setSelectOptions({
            industry: (res.data.data.industry || []).map(v => ({ value: v, label: v })),
            currency: (res.data.data.currency || []).map(v => ({ value: v, label: v })),
            preferredPaymentMethod: (res.data.data.preferredPaymentMethod || []).map(v => ({ value: v, label: v })),
            preferredShippingMethod: (res.data.data.preferredShippingMethod || []).map(v => ({ value: v, label: v })),
            accountType: (res.data.data.accountType || []).map(v => ({ value: v, label: v })),
          });
        }
      });
  }, []);

  // Generic handler for creating new options
  const handleCreateOption = (field) => (inputValue) => {
    axios.post(`${apiUrl}/client/selectclient`, {
      [field]: [...selectOptions[field].map(opt => opt.value), inputValue]
    }).then(() => {
      setSelectOptions(prev => ({
        ...prev,
        [field]: [...prev[field], { value: inputValue, label: inputValue }]
      }));
      setFormData(prev => ({
        ...prev,
        [field]: inputValue
      }));
    });
  };
if (!/^\+447\d{9}$/.test(formData.CSRCode)) {
  errors.CSRCode = "Enter valid UK mobile number (e.g. 7912345678)";
}

  return (
    <>
      <ToastContainer />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-body">
            {/* <h1 className="card-title h4 mb-4">Add Company</h1> */}
            <h2 className="mb-4">{id || client?._id ? "Edit client" : "New Company (Client)"}</h2>
            <form className="row g-3" onSubmit={handleSubmit}>
              <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
              <div className="col-md-6"></div>
              <div className="col-md-6">
                <label className="form-label">Name</label>
                <input required type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
                {errors.clientName && <div className="text-danger small">{errors.clientName}</div>}
              </div>

              {/* <div className="col-md-6">
                <label className="form-label">industry</label>
                <select className="form-select" name="industry" required value={formData.industry} onChange={handleChange}>
                  <option value="">Select industry</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="tech">Technology</option>
                  <option value="retail">Retail</option>
                </select>
                {errors.industry && <div className="text-danger small">{errors.industry}</div>}
              </div> */}
              {/* industry */}
              <div className="col-md-6">
                <label className="form-label">Industry</label>
                <CreatableSelect
                  options={selectOptions.industry}
                  value={selectOptions.industry.find((opt) => opt.value === formData.industry)}
                  onChange={(option) =>
                    setFormData((prev) => ({ ...prev, industry: option?.value || "" }))
                  }
                  onCreateOption={handleCreateOption('industry')}
                  isClearable
                  required
                />
              </div>

              <div className="col-md-6">
                <label className="form-label">Website</label>
                <input required type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
                {errors.website && <div className="text-danger small">{errors.website}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Client Address</label>
                <textarea required className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
                {errors.clientAddress && <div className="text-danger small">{errors.clientAddress}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Tax ID/VAT Number</label>
                <input
                  required
                  type="text"
                  name="TaxID_VATNumber"
                  value={formData.TaxID_VATNumber}
                  onChange={handleChange}
                  className="form-control"
                  maxLength={15}
                  pattern="\d*"
                  inputMode="numeric"
                />

                {errors.TaxID_VATNumber && <div className="text-danger small">{errors.TaxID_VATNumber}</div>}
              </div>
            <div className="col-md-6">
  <label className="form-label">CSR Code</label>
  <div className="input-group">
    <span className="input-group-text">+44</span>
    <input
      type="tel"
      name="CSRCode"
      required
      value={formData.CSRCode.replace('+44', '')} // show only main part
      onChange={(e) => {
        let input = e.target.value.replace(/\D/g, ''); // remove non-digits

        if (input.length > 10) input = input.slice(0, 10); // max 10 digits

        const finalValue = '+44' + input;
        setFormData({ ...formData, CSRCode: finalValue });
      }}
      className="form-control"
      inputMode="numeric"
      maxLength={10}
      placeholder="7XXXXXXXXX"
    />
  </div>
  {errors.CSRCode && (
    <div className="text-danger small">{errors.CSRCode}</div>
  )}
</div>

              <div className="col-md-6">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="Status"
                  required
                  value={formData.Status}
                  onChange={handleChange}
                >
                  <option value="">Select Status</option> {/* empty option for forcing selection */}
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
                {errors.Status && <div className="text-danger small">{errors.Status}</div>}
              </div>

              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Contact Persons</h5>

                {contactPersons.map((contact, index) => (
                  <div className="border p-3 mb-3" key={index}>
                    <div className="row">
                      <div className="col-md-6">
                        <label className="form-label">Contact Name</label>
                        <input
                          type="text"
                          name="contactName"
                          required
                          value={contact.contactName}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Contact Name"
                        />
                        {errors[`contactName_${index}`] && <div className="text-danger small">{errors[`contactName_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Job Title</label>
                        <input
                          type="text"
                          name="jobTitle"
                          required
                          value={contact.jobTitle}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Job Title"
                        />
                        {errors[`jobTitle_${index}`] && <div className="text-danger small">{errors[`jobTitle_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                          type="email"
                          name="email"
                          required
                          value={contact.email}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Email"
                        />
                        {errors[`email_${index}`] && <div className="text-danger small">{errors[`email_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Phone</label>
                        <input
                          type="tel"
                          name="phone"
                          required
                          value={contact.phone}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Phone"
                          maxLength={10}
                        />
                        {errors[`phone_${index}`] && <div className="text-danger small">{errors[`phone_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Department</label>
                        <input
                          type="text"
                          name="department"
                          required
                          value={contact.department}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Department"
                        />
                        {errors[`department_${index}`] && <div className="text-danger small">{errors[`department_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Sales Representative</label>
                        <input
                          type="text"
                          name="salesRepresentative"
                          required
                          value={contact.salesRepresentative}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Sales Representative"
                        />
                        {errors[`salesRepresentative_${index}`] && <div className="text-danger small">{errors[`salesRepresentative_${index}`]}</div>}
                      </div>

                      <div className="col-md-12 mt-2 d-flex justify-content-end">
                        {contactPersons.length > 1 && (
                          <button
                            type="button"
                            className="btn btn-danger btn-sm"
                            onClick={() => {
                              const updatedContacts = [...contactPersons];
                              updatedContacts.splice(index, 1);
                              setContactPersons(updatedContacts);
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Add More Button */}
                <div className="mb-3">
                  <button
                    type="button"
                    className="btn btn-primary"
                    onClick={() => {
                      setContactPersons([
                        ...contactPersons,
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    }}
                  >
                    + Add Another Contact
                  </button>
                </div>
              </div>

              {/* Billing Information */}
              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Billing Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Billing Address</label>
                  <textarea className="form-control" rows="3" name="billingAddress" value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                  {errors.billingAddress && <div className="text-danger small">{errors.billingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Contact Name</label>
                  <input type="text" className="form-control" name="billingContactName" value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingContactName && <div className="text-danger small">{errors.billingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Email</label>
                  <input type="email" className="form-control" name="billingEmail" value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingEmail && <div className="text-danger small">{errors.billingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Phone</label>
                  <input type="tel" className="form-control" name="billingPhone" value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} maxLength={10} />
                  {errors.billingPhone && <div className="text-danger small">{errors.billingPhone}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <select className="form-select" name="currency" required value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Currency</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                  {errors.currency && <div className="text-danger small">{errors.currency}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <CreatableSelect
                    options={selectOptions.currency}
                    value={selectOptions.currency.find((opt) => opt.value === formData.currency)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, currency: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('currency')}
                    isClearable

                  />
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <select className="form-select" name="preferredPaymentMethod" required value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Payment Method</option>
                    <option value="BankTransfer">BankTransfer</option>
                    <option value="CreditCard">CreditCard</option>
                    <option value="Check">Check</option>
                  </select>
                  {errors.preferredPaymentMethod && <div className="text-danger small">{errors.preferredPaymentMethod}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredPaymentMethod}
                    value={selectOptions.preferredPaymentMethod.find((opt) => opt.value === formData.preferredPaymentMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredPaymentMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredPaymentMethod')}
                    isClearable

                  />
                </div>

                {/* Shipping Information */}
                <h5 className="mb-3 mt-4">Shipping Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Shipping Address</label>
                  <textarea className="form-control" rows="3" name="shippingAddress" value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.shippingAddress && <div className="text-danger small">{errors.shippingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Contact Name</label>
                  <input type="text" className="form-control" name="shippingContactName" value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingContactName && <div className="text-danger small">{errors.shippingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Email</label>
                  <input type="email" className="form-control" name="shippingEmail" value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingEmail && <div className="text-danger small">{errors.shippingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Phone</label>
                  <input type="tel" className="form-control" name="shippingPhone" value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} maxLength={10} />
                  {errors.shippingPhone && <div className="text-danger small">{errors.shippingPhone}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <select className="form-select" name="preferredShippingMethod" required value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                    <option value="">Select Shipping Method</option>
                    <option value="ground">Ground</option>
                    <option value="standard">Standard</option>
                    <option value="express">Express</option>
                    <option value="overnight">Overnight</option>
                  </select>
                  {errors.preferredShippingMethod && <div className="text-danger small">{errors.preferredShippingMethod}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredShippingMethod}
                    value={selectOptions.preferredShippingMethod.find((opt) => opt.value === formData.preferredShippingMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredShippingMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredShippingMethod')}
                    isClearable

                  />
                </div>


                <div className="col-md-12">
                  <label className="form-label">Special Instructions</label>
                  <textarea className="form-control" rows="3" name="specialInstructions" value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.specialInstructions && <div className="text-danger small">{errors.specialInstructions}</div>}
                </div>

                {/* Financial Information */}
                <h5 className="mb-3 mt-4">Financial Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Annual Revenue</label>
                  <input type="number" className="form-control" name="annualRevenue" value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.annualRevenue && <div className="text-danger small">{errors.annualRevenue}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Rating</label>
                  <input type="number" className="form-control" name="creditRating" value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} min={1} max={5} />
                  {errors.creditRating && <div className="text-danger small">{errors.creditRating}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Bank Name</label>
                  <input type="text" className="form-control" name="bankName" value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.bankName && <div className="text-danger small">{errors.bankName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Number</label>
                  <input type="text" className="form-control" name="accountNumber" value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.accountNumber && <div className="text-danger small">{errors.accountNumber}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Fiscal Year End</label>
                  <input type="date" className="form-control" name="fiscalYearEnd" value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.fiscalYearEnd && <div className="text-danger small">{errors.fiscalYearEnd}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Financial Contact</label>
                  <input type="text" className="form-control" name="financialContact" value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.financialContact && <div className="text-danger small">{errors.financialContact}</div>}
                </div>

                {/* Ledger Information */}
                <h5 className="mb-3 mt-4">Ledger Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Account Code</label>
                  <input type="text" className="form-control" name="accountCode" value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.accountCode && <div className="text-danger small">{errors.accountCode}</div>}
                </div>

                {/* <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <select className="form-select" name="accountType" required value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="">Select Account Type</option>
                    <option value="AccountsReceivable">AccountsReceivable</option>
                    <option value="AccountsPayable">AccountsPayable</option>
                  </select>
                  {errors.accountType && <div className="text-danger small">{errors.accountType}</div>}
                </div> */}
                <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <CreatableSelect
                    options={selectOptions.accountType}
                    value={selectOptions.accountType.find((opt) => opt.value === formData.accountType)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, accountType: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('accountType')}
                    isClearable

                  />
                </div>

                <div className="col-md-6">
                  <label className="form-label">Opening Balance</label>
                  <input type="number" className="form-control" name="openingBalance" value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.openingBalance && <div className="text-danger small">{errors.openingBalance}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Balance Date</label>
                  <input type="date" className="form-control" name="balanceDate" value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.balanceDate && <div className="text-danger small">{errors.balanceDate}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Tax Category</label>
                  <select className="form-select" name="taxCategory" value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="standard">Standard Rate</option>
                    <option value="reduced">Reduced Rate</option>
                    <option value="zero">Zero Rate</option>
                  </select>
                  {errors.taxCategory && <div className="text-danger small">{errors.taxCategory}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Cost Center</label>
                  <input type="text" className="form-control" name="costCenter" value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.costCenter && <div className="text-danger small">{errors.costCenter}</div>}
                </div>

                {/* Additional Information */}
                <h5 className="mb-3 mt-4">Additional Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Payment Terms</label>
                  <select
                    className="form-select"
                    name="paymentTerms"
                    value={additionalInformation.paymentTerms}
                    onChange={handleAdditionalChange}
                  >
                    <option value="">Select Payment Terms</option>  {/* <-- placeholder */}
                    <option value="net30">Net 30</option>
                    <option value="net60">Net 60</option>
                    <option value="net90">Net 90</option>
                  </select>
                  {errors.paymentTerms && <div className="text-danger small">{errors.paymentTerms}</div>}
                </div>

                <div className="col-md-6">
                  <label className="form-label">Credit Limit</label>
                  <input type="number" className="form-control" name="creditLimit" value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                  {errors.creditLimit && <div className="text-danger small">{errors.creditLimit}</div>}
                </div>
              </div>
              <div className="col-md-12">
                <label className="form-label">Notes</label>
                <textarea className="form-control" rows="3" name="notes" value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
                {errors.notes && <div className="text-danger small">{errors.notes}</div>}
              </div>



              {/* Your form fields go here */}

              <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>

                {!(id || client?._id) ? (
                  <>
                    <button
                      type="submit"
                      className={`btn ${formData.button_Client_Suplier === 'Client' ? 'btn-primary' : 'btn-outline-primary'}`}
                      onClick={() => setFormData({ ...formData, button_Client_Suplier: 'Client' })}
                    >
                      Client
                    </button>

                    <button
                      type="submit"
                      className={`btn ${formData.button_Client_Suplier === 'Supplier' ? 'btn-primary' : 'btn-outline-primary'}`}
                      onClick={() => setFormData({ ...formData, button_Client_Suplier: 'Supplier' })}
                    >
                      Supplier
                    </button>
                  </>
                ) : (
                  <button id="btn-All" type="submit" className="btn btn-primary">
                    Update Client
                  </button>
                )}
              </div>




              {/* <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>
                {!(id || client?._id) ? (
                  <>
                    <button type="submit" id="btn-All" className="btn btn-dark">Create Client</button>
                    <button type="submit" id="btn-All" className="btn btn-dark">Create Supplier</button>
                  </>
                ) : (
                  <button type="submit" id="btn-All" className="btn btn-dark">Update Client</button>
                )}
              </div> */}
            </form>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddClientManagement;















































// //////////
import React, { useEffect, useState } from "react";
import { MdEditSquare } from "react-icons/md";
import { FaRegTrashCan } from "react-icons/fa6";
import { Button, Form, Table, Pagination, Modal } from "react-bootstrap";
import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
import { FaEye } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { fetchjobs, updatejob, UpdateJobAssign } from "../../../redux/slices/JobsSlice";
import {
  FaFilePdf,
  FaUpload,
  FaLink,
  FaClock,
  FaEdit,
} from "react-icons/fa";
import { Dropdown } from "react-bootstrap";
import Swal from "sweetalert2";
import { fetchusers } from "../../../redux/slices/userSlice";
import { createAssigns } from "../../../redux/slices/AssignSlice";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { BiCopy } from "react-icons/bi";

function NewJobsList() {
  const [showRejectModal, setShowRejectModal] = useState(false);
  const [rejectionReason, setRejectionReason] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [selectedProduction, setSelectedProduction] = useState("");
  const [selectedAdditional, setSelectedAdditional] = useState("");
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState("");
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState("");
  const [assignmentDescription, setAssignmentDescription] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedProject, setSelectedProject] = useState("All Projects");
  const [selectedPriority, setSelectedPriority] = useState("All Priorities");
  const [selectedStatus, setSelectedStatus] = useState("All Status");
  const [selectedStage, setSelectedStage] = useState("All Stages");
  const [showModal, setShowModal] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;

  const jobs = [
    {
      id: "00001",
      project: "PackageRedesign",
      client: "AcmeCorp",
      brief: "Redesign...",
      date: "2024-02-20",
    },
    {
      id: "00002",
      project: "BrandGuidelines",
      client: "TechSolutions",
      brief: "Create...",
      date: "2024-02-19",
    },
    {
      id: "00003",
      project: "MarketingMaterials",
      client: "GlobalInc",
      brief: "Design...",
      date: "2024-02-18",
    },
  ];

  const { job, loading, error } = useSelector((state) => state.jobs);

  useEffect(() => {
    dispatch(fetchjobs());
  }, [dispatch]);

  const handleShowDescription = (job) => {
    setSelectedJob(job);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedJob(null);
  };

  const handleAssignJob = (job) => {
    if (job === null) {
      const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
      if (selectedJobIds.length === 0) {
        setErrorMessage("Please select at least 1 job to assign.");
        setTimeout(() => setErrorMessage(""), 3000);
        return;
      }
    }
    setSelectedJob(job);
    setShowAssignModal(true);
  };

  const handleRejectJobs = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    if (selectedJobIds.length === 0) {
      setErrorMessage("Please select at least 1 job to reject.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    setShowRejectModal(true);
  };


  const handleSubmitRejection = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    console.log(selectedJobIds);

    if (!rejectionReason.trim()) {
      setErrorMessage("Please enter a reason for rejection.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    // dispatch(updatejob({ id: selectedJobIds, data: { Status: "Reject" } }))
    dispatch(updatejob({ id: selectedJobIds, data: { Status: "Cancelled" } }))
    setSuccessMessage("Jobs rejected successfully.");
    dispatch(fetchjobs());
    setTimeout(() => setSuccessMessage(""), 3000);
    dispatch(fetchjobs());
    setSelectedJobs({});
    dispatch(fetchjobs());
    setRejectionReason("");
    dispatch(fetchjobs());
    setShowRejectModal(false);
  };

  // const handleDelete = (_id) => {
  //     console.log(_id);
  //     Swal.fire({
  //       title: "Are you sure?",
  //       text: "You want to mark this job as Cancelled?",
  //       icon: "warning",
  //       showCancelButton: true,
  //       confirmButtonColor: "#3085d6",
  //       cancelButtonColor: "#d33",
  //       confirmButtonText: "Yes, mark as Cancelled!",
  //     }).then((result) => {
  //       if (result.isConfirmed) {
  //         // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
  //         console.log(id);

  //         dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
  //           .unwrap()
  //           .then(() => {
  //             Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
  //             dispatch(Project_job_Id(id));
  //           })
  //           .catch(() => {
  //             Swal.fire("Error!", "Something went wrong while updating.", "error");
  //           });
  //       }
  //     });
  //   };



  const getPriorityClass = (priority) => {
    switch ((priority || "").toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };

 const getStatusClass = (status) => {
  switch (status.toLowerCase().trim()) {
    case "in progress":
    case "in_progress":
      return "bg-warning text-dark";     // Yellow
    case "completed":
      return "bg-success text-white";    // Green
    case "cancelled":
      return "bg-danger text-white";     // Red
    case "active":
      return "bg-primary text-white";    // Blue
    case "reject":
      return "bg-danger text-white";
    case "review":
      return "bg-info text-dark";
    case "not started":
      return "bg-secondary text-white";
    case "open":
      return "bg-primary text-white";
    default:
      return "bg-light text-dark";
  }
};


  const filteredJobs = (job?.jobs || [])
    .filter((j) => j.assignedTo === "Not Assigned")
    .filter((j) => {
      // Split searchQuery by spaces, ignore empty terms
      const terms = searchQuery.trim().split(/\s+/).filter(Boolean);
      if (terms.length === 0) {
        const matchesProject =
          selectedProject === "All Projects" ||
          (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
        const matchesPriority =
          selectedPriority === "All Priorities" ||
          (j.priority?.toLowerCase() === selectedPriority.toLowerCase());
        const matchesStatus =
          selectedStatus === "All Status" ||
          (j.Status?.toLowerCase() === selectedStatus.toLowerCase());
        const matchesStage =
          selectedStage === "All Stages" ||
          (j.stage?.toLowerCase() === selectedStage.toLowerCase());
        return (
          matchesProject &&
          matchesPriority &&
          matchesStatus &&
          matchesStage
        );
      }
      // Prepare searchable fields as strings
      const fields = [
        j.JobNo,
        j.projectId?.[0]?.projectName,
        j.brandName,
        j.subBrand,
        j.flavour,
        j.packType,
        j.packSize,
        j.packCode,
        j.updatedAt ? new Date(j.updatedAt).toLocaleTimeString("en-US", { hour: "2-digit", minute: "2-digit" }) : '',
        j.createdAt ? new Date(j.createdAt).toLocaleDateString("en-GB") : '',
        j.assignedTo,
        j.priority,
        j.Status
      ].map(f => (f || '').toString().toLowerCase());
      // Every term must be found in at least one field
      const matchesSearch = terms.every(term =>
        fields.some(field => field.includes(term.toLowerCase()))
      );
      const matchesProject =
        selectedProject === "All Projects" ||
        (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
      const matchesPriority =
        selectedPriority === "All Priorities" ||
        (j.priority?.toLowerCase() === selectedPriority.toLowerCase());
      const matchesStatus =
        selectedStatus === "All Status" ||
        (j.Status?.toLowerCase() === selectedStatus.toLowerCase());
      const matchesStage =
        selectedStage === "All Stages" ||
        (j.stage?.toLowerCase() === selectedStage.toLowerCase());
      return (
        matchesSearch &&
        matchesProject &&
        matchesPriority &&
        matchesStatus &&
        matchesStage
      );
    });

  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker/${job._id}`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  };

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };

  const [selectedEmployee, setSelectedEmployee] = useState("");
  const { userAll } = useSelector((state) => state.user);

  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [currentAssignment, setCurrentAssignment] = useState(1);
  const itemsAssignment = 10;

  const filteredAssignment = (userAll?.data?.users || []).filter(
    (j) =>
      ((j?.assign || "").toString().toLowerCase() ===
        selectedDesigner.toLowerCase()) &&
      selectedDesigner !== ""
  );
  console.log("lllll", filteredAssignment);

  const paginatedAssignment = filteredAssignment.slice(
    (currentAssignment - 1) * itemsAssignment,
    currentAssignment * itemsAssignment
  );

  const handleSubmitAssignment = async() => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    const payload = {
      employeeId: [selectedEmployee],
      jobId: selectedJobIds,
      selectDesigner: selectedDesigner,
      description: assignmentDescription,
      Status:"In Progress",
    };
    console.log("Assignment Payload:", payload);
    // then update the job itself
    const response = await dispatch(updatejob({ id: selectedJobIds[0], data: payload }))
    dispatch(createAssigns(payload))
      .unwrap()
      .then((response) => {
        console.log("API Response:", response);
        if (response.success) {
          toast.success(response.message || "Project Assigned Successfully!");
          setShowAssignModal(false);
          setSelectedJobs(false);
          navigate("/admin/MyJobs");
        } else {
          setShowAssignModal(false);
          toast.error(response.message || "Assignment failed!");
        }
      })
      .catch((error) => {
        console.error("API Error:", error);
        toast.error(error.message || "Failed to update project!");
      });
  };



  const handleJobAssign = (selectedIds, assignTo) => {
    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(UpdateJobAssign(payload))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);

  const paginatedProjects = filteredJobs.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="container bg-white p-3 mt-4 rounded shadow-sm">
      {/* Title */}
      <div className="d-flex justify-content-between align-items-center">
        <h5 className="fw-bold m-0">Job Assign</h5>
        <div className="d-flex gap-2 ">
          <Button onClick={handleRejectJobs} id="All_btn" className="m-2" variant="primary">
            Cancelled Job
          </Button>
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds);
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
        </div>
      </div>

      {/* Show Messages */}
      {errorMessage && (
        <div className="alert alert-danger py-2" role="alert">
          {errorMessage}
        </div>
      )}
      {successMessage && (
        <div className="alert alert-success py-2" role="alert">
          {successMessage}
        </div>
      )}

      {/* Filters */}
      <div className="d-flex flex-wrap gap-2 mb-3 align-items-center">
        <Form.Control
          type="search"
          placeholder="Search jobs..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          style={{ width: "250px" }}
        />
        <Dropdown>
          <Dropdown.Toggle variant="light" id="project-dropdown">
            {selectedProject}
          </Dropdown.Toggle>
          <Dropdown.Menu>
            <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>
              All Projects
            </Dropdown.Item>
            {[...new Set((job?.jobs || []).map((j) => j.projectId?.[0]?.projectName || "N/A"))].map(
              (projectName, index) => (
                <Dropdown.Item key={index} onClick={() => setSelectedProject(projectName)}>
                  {projectName}
                </Dropdown.Item>
              )
            )}
          </Dropdown.Menu>
        </Dropdown>
      </div>

      {/* Table */}
      <div className="table-responsive">
        <Table hover className="align-middle sticky-header">
          <thead className="bg-light">
            <tr>
              <th>
                <input
                  type="checkbox"
                  onChange={(e) => {
                    const checked = e.target.checked;
                    const newSelectedJobs = {};
                    job?.jobs?.forEach((job) => {
                      newSelectedJobs[job._id] = checked;
                    });
                    setSelectedJobs(newSelectedJobs);
                  }}
                  checked={job?.jobs?.length > 0 && job?.jobs?.every((j) => selectedJobs[j._id])}
                />
              </th>
              <th>JobNo</th>
              <th style={{ whiteSpace: "nowrap" }}>Project Name</th>
              <th>Brand</th>
              <th style={{ whiteSpace: "nowrap" }}>Sub Brand</th>
              <th>Flavour</th>
              <th>PackType</th>
              <th>PackSize</th>
              <th>PackCode</th>
              <th>TimeLogged</th>
              <th>Due Date</th>
              <th>assign</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedProjects.slice().reverse().map((job, index) => (
              <tr key={job._id}>
                <td>
                  <input
                    type="checkbox"
                    checked={selectedJobs[job._id] || false}
                    onChange={() => handleCheckboxChange(job._id)}
                  />
                </td>
                <td onClick={() => JobDetails(job)}>
                  <Link style={{ textDecoration: "none" }}>{job.JobNo}</Link>
                </td>
                <td style={{ whiteSpace: "nowrap" }}>
                  {job.projectId?.[0]?.projectName || "N/A"}
                </td>
                <td style={{ whiteSpace: "nowrap" }}>{job.brandName}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.subBrand}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.flavour}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.packType}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.packSize}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job?.packCode}</td>
                <td style={{ whiteSpace: "nowrap" }}>
                  {new Date(job.updatedAt).toLocaleTimeString("en-US", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </td>
                <td style={{ whiteSpace: "nowrap" }}>
                  {new Date(job.createdAt).toLocaleDateString("en-GB")}
                </td>
                <td style={{ whiteSpace: 'nowrap' }}>{job?.assignedTo}</td>
                <td>
                  <span className={getPriorityClass(job.priority)}>{job.priority}</span>
                </td>
                <td>
                  <span className={`badge ${getStatusClass(job.Status)} px-2 py-1`}>
                    {job.Status}
                  </span>
                </td>
                <td>
                  <div className="d-flex gap-2">
                    {/* <Button id="icone_btn" size="sm">
                      <FaFilePdf />
                    </Button>
                    <Button id="icone_btn" size="sm">
                      <FaUpload />
                    </Button>
                    <Button id="icone_btn" size="sm">
                      <FaLink />
                    </Button>
                    <Button id="icone_btn" size="sm">
                      <FaClock />
                    </Button> */}
                    <Button id="icone_btn" size="sm" onClick={() => handleUpdate(job)}>
                      <FaEdit />
                    </Button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Assign Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee("");
                }}
              >
                <option value="">-- Select --</option>
                <option value="Designer">Designer</option>
                <option value="Production">Production</option>
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment
                  .filter((emp) => emp.role === 'employee')
                  .map((emp) => (
                    <option key={emp._id} value={emp._id}>
                      {emp.firstName || "Unnamed Employee"} {emp.lastName || "Unnamed Employee"}
                    </option>
                  ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Reject Modal */}
      <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Cancelled Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="alert alert-warning">
            Are you sure you want to reject this job?
          </div>
          <Form.Group className="mb-3">
            <Form.Label>Reason for Cancelled</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
              placeholder="Enter reason..."
            />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowRejectModal(false)}>
            Cancel
          </Button>
          <Button variant="danger" onClick={handleSubmitRejection}>
            Cancelled
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Pagination */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredJobs.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default NewJobsList;























// ////////
import React, { useEffect, useState } from "react";
import { MdEditSquare } from "react-icons/md";
import { FaRegTrashCan } from "react-icons/fa6";
import { Button, Form, Table, Pagination, Modal } from "react-bootstrap";
import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
import { FaEye } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { fetchjobs, updatejob, UpdateJobAssign } from "../../../redux/slices/JobsSlice";
import {
  FaFilePdf,
  FaUpload,
  FaLink,
  FaClock,
  FaEdit,
} from "react-icons/fa";
import { Dropdown } from "react-bootstrap";
import Swal from "sweetalert2";
import { fetchusers } from "../../../redux/slices/userSlice";
import { createAssigns } from "../../../redux/slices/AssignSlice";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { BiCopy } from "react-icons/bi";

function NewJobsList() {
  const [showRejectModal, setShowRejectModal] = useState(false);
  const [rejectionReason, setRejectionReason] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [selectedProduction, setSelectedProduction] = useState("");
  const [selectedAdditional, setSelectedAdditional] = useState("");
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState("");
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState("");
  const [assignmentDescription, setAssignmentDescription] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedProject, setSelectedProject] = useState("All Projects");
  const [selectedPriority, setSelectedPriority] = useState("All Priorities");
  const [selectedStatus, setSelectedStatus] = useState("All Status");
  const [selectedStage, setSelectedStage] = useState("All Stages");
  const [showModal, setShowModal] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;

  const jobs = [
    {
      id: "00001",
      project: "PackageRedesign",
      client: "AcmeCorp",
      brief: "Redesign...",
      date: "2024-02-20",
    },
    {
      id: "00002",
      project: "BrandGuidelines",
      client: "TechSolutions",
      brief: "Create...",
      date: "2024-02-19",
    },
    {
      id: "00003",
      project: "MarketingMaterials",
      client: "GlobalInc",
      brief: "Design...",
      date: "2024-02-18",
    },
  ];

  const { job, loading, error } = useSelector((state) => state.jobs);

  useEffect(() => {
    dispatch(fetchjobs());
  }, [dispatch]);

  const handleShowDescription = (job) => {
    setSelectedJob(job);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedJob(null);
  };

  const handleAssignJob = (job) => {
    if (job === null) {
      const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
      if (selectedJobIds.length === 0) {
        setErrorMessage("Please select at least 1 job to assign.");
        setTimeout(() => setErrorMessage(""), 3000);
        return;
      }
    }
    setSelectedJob(job);
    setShowAssignModal(true);
  };

  const handleRejectJobs = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    if (selectedJobIds.length === 0) {
      setErrorMessage("Please select at least 1 job to reject.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    setShowRejectModal(true);
  };


  const handleSubmitRejection = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    console.log(selectedJobIds);

    if (!rejectionReason.trim()) {
      setErrorMessage("Please enter a reason for rejection.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    // dispatch(updatejob({ id: selectedJobIds, data: { Status: "Reject" } }))
    dispatch(updatejob({ id: selectedJobIds, data: { Status: "Cancelled" } }))
    setSuccessMessage("Jobs rejected successfully.");
    dispatch(fetchjobs());
    setTimeout(() => setSuccessMessage(""), 3000);
    dispatch(fetchjobs());
    setSelectedJobs({});
    dispatch(fetchjobs());
    setRejectionReason("");
    dispatch(fetchjobs());
    setShowRejectModal(false);
  };

  // const handleDelete = (_id) => {
  //     console.log(_id);
  //     Swal.fire({
  //       title: "Are you sure?",
  //       text: "You want to mark this job as Cancelled?",
  //       icon: "warning",
  //       showCancelButton: true,
  //       confirmButtonColor: "#3085d6",
  //       cancelButtonColor: "#d33",
  //       confirmButtonText: "Yes, mark as Cancelled!",
  //     }).then((result) => {
  //       if (result.isConfirmed) {
  //         // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
  //         console.log(id);

  //         dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
  //           .unwrap()
  //           .then(() => {
  //             Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
  //             dispatch(Project_job_Id(id));
  //           })
  //           .catch(() => {
  //             Swal.fire("Error!", "Something went wrong while updating.", "error");
  //           });
  //       }
  //     });
  //   };



  const getPriorityClass = (priority) => {
    switch ((priority || "").toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };

  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";     // Yellow
      case "completed":
        return "bg-success text-white";    // Green
      case "cancelled":
        return "bg-danger text-white";     // Red
      case "active":
        return "bg-primary text-white";    // Blue
      case "reject":
        return "bg-danger text-white";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "open":
        return "bg-primary text-white";
      default:
        return "bg-light text-dark";
    }
  };


  const filteredJobs = (job?.jobs || [])
    .filter((j) => j.assignedTo === "Not Assigned")
    .filter((j) => {
      // Split searchQuery by spaces, ignore empty terms
      const terms = searchQuery.trim().split(/\s+/).filter(Boolean);
      if (terms.length === 0) {
        const matchesProject =
          selectedProject === "All Projects" ||
          (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
        const matchesPriority =
          selectedPriority === "All Priorities" ||
          (j.priority?.toLowerCase() === selectedPriority.toLowerCase());
        const matchesStatus =
          selectedStatus === "All Status" ||
          (j.Status?.toLowerCase() === selectedStatus.toLowerCase());
        const matchesStage =
          selectedStage === "All Stages" ||
          (j.stage?.toLowerCase() === selectedStage.toLowerCase());
        return (
          matchesProject &&
          matchesPriority &&
          matchesStatus &&
          matchesStage
        );
      }
      // Prepare searchable fields as strings
      const fields = [
        j.JobNo,
        j.projectId?.[0]?.projectName,
        j.brandName,
        j.subBrand,
        j.flavour,
        j.packType,
        j.packSize,
        j.packCode,
        j.updatedAt ? new Date(j.updatedAt).toLocaleTimeString("en-US", { hour: "2-digit", minute: "2-digit" }) : '',
        j.createdAt ? new Date(j.createdAt).toLocaleDateString("en-GB") : '',
        j.assignedTo,
        j.priority,
        j.Status
      ].map(f => (f || '').toString().toLowerCase());
      // Every term must be found in at least one field
      const matchesSearch = terms.every(term =>
        fields.some(field => field.includes(term.toLowerCase()))
      );
      const matchesProject =
        selectedProject === "All Projects" ||
        (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
      const matchesPriority =
        selectedPriority === "All Priorities" ||
        (j.priority?.toLowerCase() === selectedPriority.toLowerCase());
      const matchesStatus =
        selectedStatus === "All Status" ||
        (j.Status?.toLowerCase() === selectedStatus.toLowerCase());
      const matchesStage =
        selectedStage === "All Stages" ||
        (j.stage?.toLowerCase() === selectedStage.toLowerCase());
      return (
        matchesSearch &&
        matchesProject &&
        matchesPriority &&
        matchesStatus &&
        matchesStage
      );
    });

  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker/${job._id}`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  };

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };

  const [selectedEmployee, setSelectedEmployee] = useState("");
  const { userAll } = useSelector((state) => state.user);

  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [currentAssignment, setCurrentAssignment] = useState(1);
  const itemsAssignment = 10;

  const filteredAssignment = (userAll?.data?.users || []).filter(
    (j) =>
      ((j?.assign || "").toString().toLowerCase() ===
        selectedDesigner.toLowerCase()) &&
      selectedDesigner !== ""
  );
  console.log("lllll", filteredAssignment);

  const paginatedAssignment = filteredAssignment.slice(
    (currentAssignment - 1) * itemsAssignment,
    currentAssignment * itemsAssignment
  );

  const handleSubmitAssignment = async () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    let employeeId;
    if (selectedDesigner === "Production") {
      employeeId = null;
    } else if (selectedDesigner === "Designer") {
      employeeId = [];
    } else if (selectedEmployee) {
      employeeId = [selectedEmployee];
    } else {
      employeeId = null;
    }
    const payload = {
      employeeId,
      jobId: selectedJobIds,
      selectDesigner: selectedDesigner,
      description: assignmentDescription,
      Status: "In Progress",
    };
    console.log("Assignment Payload:", payload);
    // then update the job itself
    const response = await dispatch(updatejob({ id: selectedJobIds[0], data: payload }))
    dispatch(createAssigns(payload))
      .unwrap()
      .then((response) => {
        console.log("API Response:", response);
        if (response.success) {
          toast.success(response.message || "Project Assigned Successfully!");
          setShowAssignModal(false);
          setSelectedJobs(false);
          navigate("/admin/MyJobs");
        } else {
          setShowAssignModal(false);
          toast.error(response.message || "Assignment failed!");
        }
      })
      .catch((error) => {
        console.error("API Error:", error);
        toast.error(error.message || "Failed to update project!");
      });
  };

  const handleJobAssign = (selectedIds, assignTo) => {
    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(UpdateJobAssign(payload))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);

  const paginatedProjects = filteredJobs.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="container bg-white p-3 mt-4 rounded shadow-sm">
      {/* Title */}
      <div className="d-flex justify-content-between align-items-center">
        <h5 className="fw-bold m-0">Job Assign</h5>
        <div className="d-flex gap-2 ">
          <Button onClick={handleRejectJobs} id="All_btn" className="m-2" variant="primary">
            Cancelled Job
          </Button>
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds);
                setShowAssignModal(true);
              }
            }}
          >
            Assign
          </Button>
        </div>
      </div>

      {/* Show Messages */}
      {errorMessage && (
        <div className="alert alert-danger py-2" role="alert">
          {errorMessage}
        </div>
      )}
      {successMessage && (
        <div className="alert alert-success py-2" role="alert">
          {successMessage}
        </div>
      )}

      {/* Filters */}
      <div className="d-flex flex-wrap gap-2 mb-3 align-items-center">
        <Form.Control
          type="search"
          placeholder="Search jobs..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          style={{ width: "250px" }}
        />
        <Dropdown>
          <Dropdown.Toggle variant="light" id="project-dropdown">
            {selectedProject}
          </Dropdown.Toggle>
          <Dropdown.Menu>
            <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>
              All Projects
            </Dropdown.Item>
            {[...new Set((job?.jobs || []).map((j) => j.projectId?.[0]?.projectName || "N/A"))].map(
              (projectName, index) => (
                <Dropdown.Item key={index} onClick={() => setSelectedProject(projectName)}>
                  {projectName}
                </Dropdown.Item>
              )
            )}
          </Dropdown.Menu>
        </Dropdown>
      </div>

      {/* Table */}
      <div className="table-responsive">
        <Table hover className="align-middle sticky-header">
          <thead className="bg-light">
            <tr>
              <th>
                <input
                  type="checkbox"
                  onChange={(e) => {
                    const checked = e.target.checked;
                    const newSelectedJobs = {};
                    job?.jobs?.forEach((job) => {
                      newSelectedJobs[job._id] = checked;
                    });
                    setSelectedJobs(newSelectedJobs);
                  }}
                  checked={job?.jobs?.length > 0 && job?.jobs?.every((j) => selectedJobs[j._id])}
                />
              </th>
              <th>JobNo</th>
              <th style={{ whiteSpace: "nowrap" }}>Project Name</th>
              <th>Brand</th>
              <th style={{ whiteSpace: "nowrap" }}>Sub Brand</th>
              <th>Flavour</th>
              <th>PackType</th>
              <th>PackSize</th>
              <th>PackCode</th>
              <th>TimeLogged</th>
              <th>Due Date</th>
              <th>assign</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedProjects.slice().reverse().map((job, index) => (
              <tr key={job._id}>
                <td>
                  <input
                    type="checkbox"
                    checked={selectedJobs[job._id] || false}
                    onChange={() => handleCheckboxChange(job._id)}
                  />
                </td>
                <td onClick={() => JobDetails(job)}>
                  <Link style={{ textDecoration: "none" }}>{job.JobNo}</Link>
                </td>
                <td style={{ whiteSpace: "nowrap" }}>
                  {job.projectId?.[0]?.projectName || "N/A"}
                </td>
                <td style={{ whiteSpace: "nowrap" }}>{job.brandName}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.subBrand}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.flavour}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.packType}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job.packSize}</td>
                <td style={{ whiteSpace: "nowrap" }}>{job?.packCode}</td>
                <td style={{ whiteSpace: "nowrap" }}>
                  {new Date(job.updatedAt).toLocaleTimeString("en-US", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </td>
                <td style={{ whiteSpace: "nowrap" }}>
                  {new Date(job.createdAt).toLocaleDateString("en-GB")}
                </td>
                <td style={{ whiteSpace: 'nowrap' }}>{job?.assignedTo}</td>
                <td>
                  <span className={getPriorityClass(job.priority)}>{job.priority}</span>
                </td>
                <td>
                  <span className={`badge ${getStatusClass(job.Status)} px-2 py-1`}>
                    {job.Status}
                  </span>
                </td>
                <td>
                  <div className="d-flex gap-2">
                    {/* <Button id="icone_btn" size="sm">
                      <FaFilePdf />
                    </Button>
                    <Button id="icone_btn" size="sm">
                      <FaUpload />
                    </Button>
                    <Button id="icone_btn" size="sm">
                      <FaLink />
                    </Button>
                    <Button id="icone_btn" size="sm">
                      <FaClock />
                    </Button> */}
                    <Button id="icone_btn" size="sm" onClick={() => handleUpdate(job)}>
                      <FaEdit />
                    </Button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </div>

      {/* Assign Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee("");
                }}
              >
                <option value="">-- Select --</option>
                <option value="Designer">Designer</option>
                <option value="Production">Production</option>
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment
                  .filter((emp) => emp.role === 'employee')
                  .map((emp) => (
                    <option key={emp._id} value={emp._id}>
                      {emp.firstName || "Unnamed Employee"} {emp.lastName || "Unnamed Employee"}
                    </option>
                  ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Reject Modal */}
      <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Cancelled Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="alert alert-warning">
            Are you sure you want to reject this job?
          </div>
          <Form.Group className="mb-3">
            <Form.Label>Reason for Cancelled</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
              placeholder="Enter reason..."
            />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowRejectModal(false)}>
            Cancel
          </Button>
          <Button variant="danger" onClick={handleSubmitRejection}>
            Cancelled
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Pagination */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredJobs.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default NewJobsList;






import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axiosInstance from '../utils/axiosInstance';
import { apiUrl } from '../../redux/utils/config';


export const fetchAssign = createAsyncThunk(
  'assigns/fetchAssign',
  async (_, { rejectWithValue }) => {
    try {
      const response = await axiosInstance.get(`${apiUrl}/AssignmentJob`);
      return response.data
    } catch (error) {
      return rejectWithValue(error.response?.data || error.message);
    }
  }
);

export const createAssigns = createAsyncThunk(
  'Assigns/createAssigns',
  async (payload, { rejectWithValue }) => {
    // Defensive: sanitize employeeId
    if (payload.selectDesigner === "Production") {
      payload.employeeId = null;
    } else if (payload.selectDesigner === "Designer") {
      payload.employeeId = [];
    } else if (Array.isArray(payload.employeeId) && payload.employeeId.length === 1 && !payload.employeeId[0]) {
      payload.employeeId = null;
    }
    try {
      const response = await axiosInstance.post(
        `${apiUrl}/AssignmentJob`,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      );
      return response.data;
    } catch (error) {
      return rejectWithValue(error.response?.data || error.message);
    }
  }
);

export const deleteAssigns = createAsyncThunk(
  'Assigns/deleteAssigns',
  async (id, { rejectWithValue }) => {
    try {
      await axiosInstance.delete(`${apiUrl}/Assign/${id}`);
      return id;
    } catch (error) {
      return rejectWithValue(error.response?.data || error.message);
    }
  }
);

export const fetchAssignsById = createAsyncThunk('Assign/fetchById', async (id) => {
    const response = await fetch(`/api/Assign/${id}`);
    if (!response.ok) throw new Error("Failed to fetch Assigns");
    return await response.json();
  });

  export const updateAssigns = createAsyncThunk('Assign/updateAssigns', async ({ id, data }) => {
    const response = await fetch(`/api/Assign/${id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error("Failed to update Assigns");
    return await response.json();
  });
  

export const UpdateAssignsAssign = createAsyncThunk('Assign/updateAssigns', async ({ id, assign }) => {
  const response = await fetch(`${apiUrl}/Assign`, {
    method: "put",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ id, assign }),  
  });
  if (!response.ok) throw new Error("Failed to update Assign");
  return await response.json();
});

const AssignSlice = createSlice({
  name: 'Assign',
  initialState: {
    assigns: [],
    status: 'idle',
    error: null,
  },

  reducers: {},
  extraReducers: (builder) => {
    builder
          // Add
        //   .addCase(createAssigns.pending, (state) => {
        //     state.loading = true;
        //     state.error = null;
        //   })
        //   .addCase(createAssigns.fulfilled, (state, action) => {
        //     state.loading = false;
        //     state.Assigns.push(action.payload);
        //   })
        //   .addCase(createAssigns.rejected, (state, action) => {
        //     state.loading = false;
        //     state.error = action.payload;
        //   })
      .addCase(fetchAssign.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAssign.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.assigns = action.payload;
      })
      .addCase(fetchAssign.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.payload;
      })
    //   .addCase(createAssigns.fulfilled, (state, action) => {
    //     state.Assigns.push(action.payload);
    //   })
    //   .addCase(createAssigns.rejected, (state, action) => {
    //     state.status = 'failed';
    //     state.error = action.payload;
    //   })
    //   .addCase(deleteAssigns.fulfilled, (state, action) => {
    //     state.Assigns = state.Assigns.filter(
    //       (Assigns) => Assigns.id !== action.payload
    //     );
    //   })
    //   .addCase(deleteAssigns.rejected, (state, action) => {
    //     state.status = 'failed';
    //     state.error = action.payload;
    //   })

    //   .addCase(updateAssigns.fulfilled, (state, action) => {
    //     const index = state.Assigns.findIndex(
    //       (Assigns) => Assigns.id === action.payload.id
    //     );
    //     if (index !== -1) {
    //       state.Assigns[index] = action.payload; 
    //     }
    //   })
    //   .addCase(updateAssigns.rejected, (state, action) => {
    //     state.status = 'failed';
    //     state.error = action.payload;
    //   });
  },
});

export default AssignSlice.reducer;







// Assign 
// const handleSubmitAssignment = async () => {
//   const selectedJobIds = Object.keys(selectedJobs).filter(id => selectedJobs[id]);

//   const payload = {
//     employeeId: [selectedEmployee],
//     jobId: selectedJobIds,
//     selectDesigner: selectedDesigner,
//     description: assignmentDescription,
//     Status: "In Progress",
//   };

//   console.log("📦 Assignment Payload:", payload);

//   try {
//     // 1️⃣ Create assignment
//     await dispatch(createAssigns(payload)).unwrap();

//     // 2️⃣ Update job
//     const response = await dispatch(
//       updatejob({ id: selectedJobIds[0], data: payload })
//     ).unwrap();

//     toast.success(response.message || "Project assigned successfully!");
//     setShowAssignModal(false);
//     setSelectedJobs({});
//     navigate("/admin/MyJobs");

//   } catch (err) {
//     console.error("❌ Full Error Object:", err);

//     // ✅ Extract status code from common structures
//     const status =
//       err?.status ||                    // direct status (unlikely)
//       err?.originalStatus ||           // RTK fetchBaseQuery
//       err?.response?.status ||         // Axios-style
//       err?.data?.status ||             // your backend sends this
//       err?.data?.statusCode ||         // fallback for other backends
//       500;

//     // ✅ Extract safe message
//     const message =
//       err?.message ||
//       err?.data?.message ||
//       err?.response?.data?.message ||
//       "Assignment failed!";

//     console.log("📛 Status Code:", status);
//     console.log("📨 Message:", message);

//     if (status === 409) {
//       console.log("status === 409",status === 409 );
      
//       toast.error("Job already assigned to this employee!");
//     } else {
//       toast.error(message);
//     }

//     setShowAssignModal(false);
//   }
// };



















import React, { useEffect, useState } from "react";
import axios from "axios";
import { Link, useLocation, useNavigate } from "react-router-dom";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { useDispatch, useSelector } from "react-redux";
import { createCostEstimate, updateCostEstimate } from "../../../redux/slices/costEstimatesSlice";
import { fetchProject } from "../../../redux/slices/ProjectsSlice";
import { fetchClient } from "../../../redux/slices/ClientSlice";
import { createInvoicingBilling, GetSingleInvoice, updateInvoicingBilling } from "../../../redux/slices/InvoicingBillingSlice";

const currencies = [
  { value: "", label: "Select Currency" },
  { label: "USD - US Dollar", value: "USD" },
  { label: "EUR - Euro", value: "EUR" },
  { label: "INR - Indian Rupee", value: "INR" },
  { label: "GBP - British Pound", value: "GBP" },
  { label: "JPY - Japanese Yen", value: "JPY" },
  { label: "AED - UAE Dirham", value: "AED" },
  { label: "SAR - Saudi Riyal", value: "SAR" },
];

const document = ["Invoice Select", "Dummy Invoice", "Tax Invoice", "Proforma Invoice"];
const OutputFormat = ["", "PDF", "DOCX", "XLSX", "TXT"];
const statuses = ["Status Select", "Active", "Inactive", "Completed", "pending", "overdue"];

function AddInvoice() {
    const navigate = useNavigate();
  const dispatch = useDispatch();


  const location = useLocation();
  const invoice = location.state?.invoice;
  const id = invoice?._id;
  console.log("hhel", invoice);

    const { invocing } = useSelector((state) => state.InvoicingBilling);
    console.log("invocing", invocing);
useEffect(() => {
  if (invoice) {
    dispatch(GetSingleInvoice({
      clientId: invoice.clientId,
      projectId: invoice.projectId,
      CostEstimatesId: invoice.CostEstimatesId,
      ReceivablePurchaseId: invoice.ReceivablePurchaseId,
    }));
  }
}, [dispatch, invoice]);



  const { project } = useSelector((state) => state.projects);
  useEffect(() => {
    dispatch(fetchProject());
  }, [dispatch]);
  const reversedProjectList = project?.data?.slice().reverse() || [];

  const { Clients } = useSelector((state) => state.client);
  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find((p) => p._id === Clients);
      if (foundProject) {
        setFormData((prev) => ({
          ...prev,
          projectsId: foundProject._id,
        }));
      }
    }
  }, [Clients, project]);

  useEffect(() => {
    dispatch(fetchClient());
  }, [dispatch]);

  const [items, setItems] = useState([{ description: "", quantity: 0, rate: 0, amount: 0 }]);

  const [formData, setFormData] = useState({
    clientId: "",
    projectsId: [""],
    CostEstimatesId: "",
    ReceivablePurchaseId: "",
    date: "",
    status: "",
    currency: "",
    document: "",
    output: "",
  });

  useEffect(() => {
    if (invoice && project?.data?.length) {
      setFormData((prev) => ({
        ...prev,
        clientId: invoice.clientId || "",
        CostEstimatesId: invoice.CostEstimatesId || "",
        ReceivablePurchaseId: invoice.ReceivablePurchaseId || "",
        projectsId: invoice.projectId ? [invoice.projectId] : [""],
        status: invoice.status && statuses.includes(invoice.status) ? invoice.status : "Active",
        Notes: invoice.Notes || "",
        currency: invoice.currency || "",
        date: invoice.date ? invoice.date.substring(0, 10) : "",
        validUntil: invoice.validUntil ? invoice.validUntil.substring(0, 10) : "",
      }));

      if (Array.isArray(invoice.lineItems) && invoice.lineItems.length > 0) {
        setItems(invoice.lineItems);
      }
    }
  }, [invoice, project?.data]);


  const [taxRate, setTaxRate] = useState(0.05);

  const calculateAmount = (quantity, rate) => quantity * rate;

  const handleItemChange = (index, field, value) => {
    const newItems = [...items];
    newItems[index][field] = value;
    newItems[index].amount = calculateAmount(newItems[index].quantity, newItems[index].rate);
    setItems(newItems);
  };

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const addItem = () => {
    setItems([...items, { description: "", quantity: 0, rate: 0, amount: 0 }]);
  };

  const removeItem = (index) => {
    const newItems = [...items];
    newItems.splice(index, 1);
    setItems(newItems);
  };

  const subtotal = items.reduce((acc, item) => acc + item.amount, 0);
  const tax = subtotal * taxRate;
  const total = subtotal + tax;

  const handleSubmit = async (e) => {
    e.preventDefault();
    const payload = {
      ...formData,
      VATRate: taxRate * 100,
      lineItems: items,
    };

    const isDuplicate = location.state?.isDuplicate;
    if (isDuplicate || !id) {
      dispatch(createInvoicingBilling(payload))
        .unwrap()
        .then(() => {
          toast.success("Estimates created successfully!");
          navigate("/admin/Invoicing_Billing", { state: { openTab: "jobs" } });
        })
        .catch(() => {
          toast.error("Failed to create estimates");
        });
    } else {
      dispatch(updateInvoicingBilling({ id, data: payload }))
        .unwrap()
        .then(() => {
          toast.success("Estimates updated successfully!");
          navigate("/admin/Invoicing_Billing", { state: { openTab: "jobs" } });
        })
        .catch(() => {
          toast.error("Failed to update estimates");
        });
    }
  };

  return (
    <>
      <ToastContainer />
      <div className="container-fluid p-4" style={{ backgroundColor: "white", borderRadius: "10px" }}>
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2>Generate New Invoice</h2>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="row mb-3">
            <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId || ""}
                disabled
              >
                {Clients?.data
                  ?.filter((client) => client._id === formData.clientId)
                  .map((client) => (
                    <option key={client._id} value={client._id}>
                      {client.clientName}
                    </option>
                  ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project</label>
              <select
                className="form-select"
                name="projectsId"
                value={formData.projectsId[0] || ""}
                disabled>
                {project?.data
                  ?.filter((proj) => proj._id === formData.projectsId[0])
                  .map((proj) => (
                    <option key={proj._id} value={proj._id}>
                      {proj.projectName}
                    </option>
                  ))}
              </select>
            </div>

            {/* Selectore dropdow opne ho raha hai  */}
            {/* <div className="col-md-4 mb-3">
              <label className="form-label">Client</label>
              <select
                className="form-select"
                name="clientId"
                value={formData.clientId[0] || ""}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    clientId: [e.target.value],
                  })
                }
                required
              >
                <option value="">Select Client</option>
                {Clients?.data?.map((client) => (
                  <option key={client._id} value={client._id}>
                    {client.clientName}
                  </option>
                ))}
              </select>
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Project</label>
              <select
                className="form-select"
                name="projectsId"
                value={formData.projectsId[0] || ""}
                onChange={(e) => {
                  const selectedId = e.target.value;
                  const selectedProject = project?.data?.find((p) => p._id === selectedId);
                  setFormData({
                    ...formData,
                    projectsId: [selectedId],
                    projectName: selectedProject?.projectName || "",
                  });
                }}
                required
              >
                <option value="">Select a project</option>
                {reversedProjectList.map((proj) => (
                  <option key={proj._id} value={proj._id}>
                    {proj.projectName}
                  </option>
                ))}
              </select>
            </div> */}


            <div className="col-md-4 mb-3">
              <label className="form-label">Due Date</label>
              <input
                type="date"
                className="form-control"
                name="date"
                required
                value={formData.date}
                onChange={handleFormChange}
              />
            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Currency</label>
              <select
                className="form-select"
                name="currency"
                value={formData.currency}
                onChange={handleFormChange}
                required
              >
                {currencies.map((curr) => (
                  <option
                    key={curr.value}
                    value={curr.value}
                    disabled={curr.value === ""}
                  >
                    {curr.label}
                  </option>
                ))}
              </select>

            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Document Type</label>
              <select
                className="form-select"
                name="document"
                value={formData.document}
                onChange={handleFormChange}
                required
              >
                <option value="" disabled>
                  Select Document
                </option>
                {document.slice(1).map((doc) => (
                  <option key={doc} value={doc}>
                    {doc}
                  </option>
                ))}
              </select>

            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Output Format</label>
              <select
                className="form-select"
                name="output"
                value={formData.output}
                onChange={handleFormChange}
                required
              >
                <option value="" disabled>
                  Select Output Format
                </option>
                {OutputFormat.slice(1).map((format) => (
                  <option key={format} value={format}>
                    {format}
                  </option>
                ))}
              </select>

            </div>

            <div className="col-md-4 mb-3">
              <label className="form-label">Status</label>
              <select
                className="form-select"
                name="status"
                value={formData.status}
                onChange={handleFormChange}
                required
              >
                <option value="" disabled>
                  Status Select
                </option>
                {statuses.slice(1).map((status) => (
                  <option key={status} value={status}>
                    {status}
                  </option>
                ))}
              </select>

            </div>
          </div>

          <h6 className="fw-semibold mb-3">Line Items</h6>
          {items.map((item, index) => (
            <div
              className="row gx-2 gy-2 align-items-center mb-2 px-2 py-2"
              key={index}
              style={{ background: "#f9f9f9", borderRadius: "8px" }}
            >
              <div className="col-md-5">
                <input
                  type="text"
                  className="form-control"
                  placeholder="Item description"
                  required
                  value={item.description}
                  onChange={(e) => handleItemChange(index, "description", e.target.value)}
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  className="form-control"
                  required
                  value={item.quantity}
                  onChange={(e) =>
                    handleItemChange(index, "quantity", parseInt(e.target.value))
                  }
                />
              </div>
              <div className="col-md-2">
                <input
                  type="number"
                  required
                  value={item.rate}
                  onChange={(e) => handleItemChange(index, "rate", parseFloat(e.target.value))}
                  className="form-control"
                />
              </div>
              <div className="col-md-2">
                <span>
                  {formData.currency} {item.amount.toFixed(2)}
                </span>
              </div>
              <div className="col-md-1 text-end">
                <button type="button"
                  className="btn btn-link text-danger p-0"
                  onClick={() => removeItem(index)}
                >
                  remove
                </button>
              </div>
            </div>
          ))}

          <button type="button"
            className="btn border rounded px-3 py-1 mb-4 text-dark"
            onClick={addItem}
          >
            + Add Line Item
          </button>

          <div className="text-end mt-4">
            <button type="button" className="btn btn-light me-2" onClick={() => navigate(-1)}>  Cancel</button>
            <button type="submit" className="btn btn-dark">
              Generate Invoice
            </button>
          </div>
        </form>
      </div>
    </>
  );
}

export default AddInvoice;























  const location = useLocation();
  const invoice = location.state?.invoice;
  const id = invoice?._id;
  console.log("hhel", invoice);

  const { invocing } = useSelector((state) => state.InvoicingBilling);
  console.log("invocing", invocing);
  useEffect(() => {
    if (invoice) {
      dispatch(GetSingleInvoice({
        projectsId: [invoice.projectId], // wrap it in an array as expected
        clientId: invoice.clientId,
        CostEstimatesId: invoice.CostEstimatesId,
        ReceivablePurchaseId: invoice.ReceivablePurchaseId,
      }));

    }
  }, [dispatch, invoice]);


  const { project } = useSelector((state) => state.projects);
  useEffect(() => {
    dispatch(fetchProject());
  }, [dispatch]);
  const reversedProjectList = project?.data?.slice().reverse() || [];

  const { Clients } = useSelector((state) => state.client);
  useEffect(() => {
    if (Clients && project?.data?.length) {
      const foundProject = project.data.find((p) => p._id === Clients);
      if (foundProject) {
        setFormData((prev) => ({
          ...prev,
          projectsId: foundProject._id,
        }));
      }
    }
  }, [Clients, project]);

  useEffect(() => {
    dispatch(fetchClient());
  }, [dispatch]);

  const [items, setItems] = useState([{ description: "", quantity: 0, rate: 0, amount: 0 }]);

  const [formData, setFormData] = useState({
    clientId: "",
    projectsId: [""],
    CostEstimatesId: "",
    ReceivablePurchaseId: "",
    date: "",
    status: "",
    currency: "",
    document: "",
    output: "",
  });

  useEffect(() => {
    const data = invocing?.data;
    if (data) {
      setFormData((prev) => ({
        ...prev,
        clientId: data.client?._id || "",
        CostEstimatesId: data.costEstimate?._id || "",
        ReceivablePurchaseId: data.receivablePurchase?._id || "",
        projectsId: data.projectId ? [data.projectId] : [""],
        status: data.costEstimate?.Status && statuses.includes(data.costEstimate.Status)
          ? data.costEstimate.Status
          : "Active",
        Notes: data.costEstimate?.Notes || "",
        currency: data.costEstimate?.currency || "",
        date: data.costEstimate?.estimateDate
          ? data.costEstimate.estimateDate.substring(0, 10)
          : "",
        validUntil: data.costEstimate?.validUntil
          ? data.costEstimate.validUntil.substring(0, 10)
          : "",
      }));

      if (
        Array.isArray(data.costEstimate?.lineItems) &&
        data.costEstimate.lineItems.length > 0
      ) {
        setItems(data.costEstimate.lineItems);
      }
    }
  }, [invocing]);


















  













import React, { useEffect, useState } from "react";
import { MdEditSquare } from "react-icons/md";
import { FaRegTrashCan } from "react-icons/fa6";
import { Button, Form, Table, Pagination, Modal } from "react-bootstrap";
import { Link, useLocation, useNavigate, useParams } from "react-router-dom";
import { FaEye } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { fetchjobs, ProductionJobsGet, Project_job_Id, updatejob, UpdateJobAssign } from "../../../redux/slices/JobsSlice";
import {
  FaFilePdf,
  FaUpload,
  FaLink,
  FaClock,
  FaEdit,
} from "react-icons/fa";
import { Dropdown } from "react-bootstrap";
import Swal from "sweetalert2";
import { fetchusers } from "../../../redux/slices/userSlice";
import { createAssigns, RetunjobGet } from "../../../redux/slices/AssignSlice";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { BiCopy } from "react-icons/bi";

function Retunjob() {
  const [showRejectModal, setShowRejectModal] = useState(false);
  const [rejectionReason, setRejectionReason] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [selectedProduction, setSelectedProduction] = useState("");
  const [selectedAdditional, setSelectedAdditional] = useState("");
  const [selectedJob, setSelectedJob] = useState(null);
  const [attachedFile, setAttachedFile] = useState(null);
  const [selectedJobs, setSelectedJobs] = useState({});
  const [errorMessage, setErrorMessage] = useState("");
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [selectedDesigner, setSelectedDesigner] = useState("");
  const [assignmentDescription, setAssignmentDescription] = useState("");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedProject, setSelectedProject] = useState("All Projects");
  const [selectedPriority, setSelectedPriority] = useState("All Priorities");
  const [selectedStatus, setSelectedStatus] = useState("All Status");
  const [selectedStage, setSelectedStage] = useState("All Stages");
  const [showModal, setShowModal] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;

  const jobs = [
    {
      id: "00001",
      project: "PackageRedesign",
      client: "AcmeCorp",
      brief: "Redesign...",
      date: "2024-02-20",
    },
    {
      id: "00002",
      project: "BrandGuidelines",
      client: "TechSolutions",
      brief: "Create...",
      date: "2024-02-19",
    },
    {
      id: "00003",
      project: "MarketingMaterials",
      client: "GlobalInc",
      brief: "Design...",
      date: "2024-02-18",
    },
  ];

  const { job,} = useSelector((state) => state.jobs);
    const { assigns, loading, error } = useSelector((state) => state.Assign);
  console.log("Job Data:", assigns.data);

  useEffect(() => {
    dispatch(RetunjobGet());
  }, [dispatch]);

  // ✅ Step 1: Flatten all jobId objects from the nested structure
  const flattenedJobs = job?.data?.flatMap((item) => item.jobId) || [];
  console.log("Flattened Jobs:", flattenedJobs);


  const handleShowDescription = (job) => {
    setSelectedJob(job);
    setShowModal(true);
  };

  const handleCloseModal = () => {
    setShowModal(false);
    setSelectedJob(null);
  };

  const handleAssignJob = (job) => {
    if (job === null) {
      const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
      if (selectedJobIds.length === 0) {
        setErrorMessage("Please select at least 1 job to assign.");
        setTimeout(() => setErrorMessage(""), 3000);
        return;
      }
    }
    setSelectedJob(job);
    setShowAssignModal(true);
  };

  const handleRejectJobs = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    if (selectedJobIds.length === 0) {
      setErrorMessage("Please select at least 1 job to reject.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    setShowRejectModal(true);
  };

  const handleSubmitRejection = () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    console.log(selectedJobIds);

    if (!rejectionReason.trim()) {
      setErrorMessage("Please enter a reason for rejection.");
      setTimeout(() => setErrorMessage(""), 3000);
      return;
    }
    // dispatch(updatejob({ id: selectedJobIds, data: { Status: "Reject" } }))
    dispatch(updatejob({ id: selectedJobIds, data: { Status: "Cancelled" } }))
    setSuccessMessage("Jobs rejected successfully.");
    dispatch(fetchjobs());
    setTimeout(() => setSuccessMessage(""), 3000);
    dispatch(fetchjobs());
    setSelectedJobs({});
    dispatch(fetchjobs());
    setRejectionReason("");
    dispatch(fetchjobs());
    setShowRejectModal(false);
  };

  // const handleDelete = (_id) => {
  //     console.log(_id);
  //     Swal.fire({
  //       title: "Are you sure?",
  //       text: "You want to mark this job as Cancelled?",
  //       icon: "warning",
  //       showCancelButton: true,
  //       confirmButtonColor: "#3085d6",
  //       cancelButtonColor: "#d33",
  //       confirmButtonText: "Yes, mark as Cancelled!",
  //     }).then((result) => {
  //       if (result.isConfirmed) {
  //         // dispatch(deletejob({ id: _id, data: { status: "Cancelled" } }))
  //         console.log(id);

  //         dispatch(updatejob({ id: _id, data: { Status: "Cancelled" } }))
  //           .unwrap()
  //           .then(() => {
  //             Swal.fire("Updated!", "The job has been marked as Cancelled.", "success");
  //             dispatch(Project_job_Id(id));
  //           })
  //           .catch(() => {
  //             Swal.fire("Error!", "Something went wrong while updating.", "error");
  //           });
  //       }
  //     });
  //   };



  const getPriorityClass = (priority) => {
    switch ((priority || "").toLowerCase()) {
      case "high":
        return "text-danger";
      case "medium":
        return "text-warning";
      case "low":
        return "text-success";
      default:
        return "";
    }
  };

  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";     // Yellow
      case "completed":
        return "bg-success text-white";    // Green
      case "cancelled":
        return "bg-danger text-white";     // Red
      case "active":
        return "bg-primary text-white";    // Blue
      case "reject":
        return "bg-danger text-white";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "open":
        return "bg-primary text-white";
      default:
        return "bg-light text-dark";
    }
  };

  const filteredJobs = job?.data?.flatMap((item) => item.jobId) || []

    .filter((j) => j.assignedTo === "Not Assigned")
    .filter((j) => {
      // Split searchQuery by spaces, ignore empty terms
      const terms = searchQuery.trim().split(/\s+/).filter(Boolean);
      if (terms.length === 0) {
        const matchesProject =
          selectedProject === "All Projects" ||
          (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
        const matchesPriority =
          selectedPriority === "All Priorities" ||
          (j.priority?.toLowerCase() === selectedPriority.toLowerCase());
        const matchesStatus =
          selectedStatus === "All Status" ||
          (j.Status?.toLowerCase() === selectedStatus.toLowerCase());
        const matchesStage =
          selectedStage === "All Stages" ||
          (j.stage?.toLowerCase() === selectedStage.toLowerCase());
        return (
          matchesProject &&
          matchesPriority &&
          matchesStatus &&
          matchesStage
        );
      }
      // Prepare searchable fields as strings
      const fields = [
        j.JobNo,
        j.projectId?.[0]?.projectName,
        j.brandName,
        j.subBrand,
        j.flavour,
        j.packType,
        j.packSize,
        j.packCode,
        j.updatedAt ? new Date(j.updatedAt).toLocaleTimeString("en-US", { hour: "2-digit", minute: "2-digit" }) : '',
        j.createdAt ? new Date(j.createdAt).toLocaleDateString("en-GB") : '',
        j.assignedTo,
        j.priority,
        j.Status
      ].map(f => (f || '').toString().toLowerCase());
      // Every term must be found in at least one field
      const matchesSearch = terms.every(term =>
        fields.some(field => field.includes(term.toLowerCase()))
      );
      const matchesProject =
        selectedProject === "All Projects" ||
        (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
      const matchesPriority =
        selectedPriority === "All Priorities" ||
        (j.priority?.toLowerCase() === selectedPriority.toLowerCase());
      const matchesStatus =
        selectedStatus === "All Status" ||
        (j.Status?.toLowerCase() === selectedStatus.toLowerCase());
      const matchesStage =
        selectedStage === "All Stages" ||
        (j.stage?.toLowerCase() === selectedStage.toLowerCase());
      return (
        matchesSearch &&
        matchesProject &&
        matchesPriority &&
        matchesStatus &&
        matchesStage
      );
    });

  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker/${job._id}`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  };

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
  };

  const [selectedEmployee, setSelectedEmployee] = useState("");
  const { userAll } = useSelector((state) => state.user);

  useEffect(() => {
    dispatch(fetchusers());
  }, [dispatch]);

  const [currentAssignment, setCurrentAssignment] = useState(1);
  const itemsAssignment = 10;

  const filteredAssignment = (userAll?.data?.users || []).filter(
    (j) =>
      ((j?.assign || "").toString().toLowerCase() ===
        selectedDesigner.toLowerCase()) &&
      selectedDesigner !== ""
  );

  const paginatedAssignment = filteredAssignment.slice(
    (currentAssignment - 1) * itemsAssignment,
    currentAssignment * itemsAssignment
  );

  const handleSubmitAssignment = async () => {
    const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
    const payload = {
      employeeId: [selectedEmployee],
      jobId: selectedJobIds,
      selectDesigner: selectedDesigner,
      description: assignmentDescription,
      Status: "In Progress",
    };
    console.log("Assignment Payload:", payload);
    // then update the job itself
    dispatch(Project_job_Id(id))
    dispatch(createAssigns(payload))
      .unwrap()
      .then((response) => {
        console.log("API Response:", response);
        if (response.success) {
          toast.success(response.message || "Project Assigned Successfully!");
          setShowAssignModal(false);
          setSelectedJobs(false);
          navigate("/admin/MyJobs");
        } else {
          setShowAssignModal(false);
          toast.error(response.message || "Assignment failed!");
        }
      })
      .catch((error) => {
        console.error("API Error:", error);
        toast.error(error.message || "Failed to update project!");
      });
  };

  const handleJobAssign = (selectedIds, assignTo) => {
    const payload = {
      id: selectedIds,
      assign: assignTo,
    };
    console.log("Assignment Payload:", payload);
    dispatch(Project_job_Id(id))
      .then(() => {
        // Swal.fire("Success!", "Jobs assigned successfully", "success");
      })
      .catch(() => {
        Swal.fire("Error!", "Something went wrong", "error");
      });
  };
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const totalPages = Math.ceil(filteredJobs.length / itemsPerPage);

  const paginatedProjects = filteredJobs.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="container bg-white p-3 mt-4 rounded shadow-sm">
      {/* Title */}
      <div className="d-flex justify-content-between align-items-center">
        <h5 className="fw-bold m-0">Retun Job</h5>
        <div className="d-flex gap-2 ">
          <Button onClick={handleRejectJobs} id="All_btn" className="m-2" variant="primary">
            Cancelled Job
          </Button>
          <Button
            id="All_btn"
            className="m-2"
            variant="primary"
            onClick={() => {
              const selectedJobIds = Object.keys(selectedJobs).filter((id) => selectedJobs[id]);
              if (selectedJobIds.length === 0) {
                setErrorMessage("Please select at least 1 job to assign.");
                setTimeout(() => setErrorMessage(""), 3000);
              } else {
                handleJobAssign(selectedJobIds);
                setShowAssignModal(true);
              }
            }}
          >
            Re-Assign
          </Button>
        </div>
      </div>

      {/* Show Messages */}
      {errorMessage && (
        <div className="alert alert-danger py-2" role="alert">
          {errorMessage}
        </div>
      )}
      {successMessage && (
        <div className="alert alert-success py-2" role="alert">
          {successMessage}
        </div>
      )}

      {/* Filters */}
      <div className="d-flex flex-wrap gap-2 mb-3 align-items-center">
        <Form.Control
          type="search"
          placeholder="Search jobs..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          style={{ width: "250px" }}
        />
        <Dropdown>
          <Dropdown.Toggle variant="light" id="project-dropdown">
            {selectedProject}
          </Dropdown.Toggle>
          <Dropdown.Menu>
            <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>
              All Projects
            </Dropdown.Item>
            {[...new Set((job?.jobs || []).map((j) => j.projectId?.[0]?.projectName || "N/A"))].map(
              (projectName, index) => (
                <Dropdown.Item key={index} onClick={() => setSelectedProject(projectName)}>
                  {projectName}
                </Dropdown.Item>
              )
            )}
          </Dropdown.Menu>
        </Dropdown>
      </div>

      {/* Table */}
      <div className="table-responsive">
        <Table hover className="align-middle sticky-header">
          <thead className="bg-light">
            <tr>
              <th>
                <input
                  type="checkbox"
                  onChange={(e) => {
                    const checked = e.target.checked;
                    const newSelectedJobs = {};
                    flattenedJobs.forEach((job) => {
                      newSelectedJobs[job._id] = checked;
                    });
                    setSelectedJobs(newSelectedJobs);
                  }}
                  checked={flattenedJobs.length > 0 && flattenedJobs.every((j) => selectedJobs[j._id])}

                />
              </th>
              <th>JobNo</th>
              <th style={{ whiteSpace: "nowrap" }}>Project Name</th>
              <th style={{ whiteSpace: "nowrap" }}>Project No</th>
              <th>Brand</th>
              <th style={{ whiteSpace: "nowrap" }}>Sub Brand</th>
              <th>Flavour</th>
              <th>PackType</th>
              <th>PackSize</th>
              <th>PackCode</th>
              <th>TimeLogged</th>
              <th>Due Date</th>
              <th>assign</th>
              <th>Priority</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {paginatedProjects
              .slice()
              .reverse()
              .filter((job) => job.Status === "Active") // 👈 Only show Active jobs
              .map((job, index) => (
                <tr key={job._id}>
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedJobs[job._id] || false}
                      onChange={() => handleCheckboxChange(job._id)}
                    />
                  </td>
                  <td onClick={() => JobDetails(job)}>
                    <Link style={{ textDecoration: "none" }}>{job.JobNo}</Link>
                  </td>
                  <td style={{ whiteSpace: "nowrap" }}>
                    {job.projectId?.[0]?.projectName || "N/A"}
                  </td>
                     <td style={{ whiteSpace: "nowrap" }}>
                    {job.projectId?.[0]?.projectNo || "N/A"}
                  </td>
                  <td style={{ whiteSpace: "nowrap" }}>{job.brandName}</td>
                  <td style={{ whiteSpace: "nowrap" }}>{job.subBrand}</td>
                  <td style={{ whiteSpace: "nowrap" }}>{job.flavour}</td>
                  <td style={{ whiteSpace: "nowrap" }}>{job.packType}</td>
                  <td style={{ whiteSpace: "nowrap" }}>{job.packSize}</td>
                  <td style={{ whiteSpace: "nowrap" }}>{job?.packCode}</td>
                  <td style={{ whiteSpace: "nowrap" }}>
                    {new Date(job.updatedAt).toLocaleTimeString("en-US", {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </td>
                  <td style={{ whiteSpace: "nowrap" }}>
                    {new Date(job.createdAt).toLocaleDateString("en-GB")}
                  </td>
                  <td style={{ whiteSpace: 'nowrap' }}>{job?.assign}</td>
                  <td>
                    <span className={getPriorityClass(job.priority)}>{job.priority}</span>
                  </td>
                  <td>
                    <span className={`badge ${getStatusClass(job.Status)} px-2 py-1`}>
                      {job.Status}
                    </span>
                  </td>
                  <td>
                    <div className="d-flex gap-2">
                      <Button id="icone_btn" size="sm" onClick={() => handleUpdate(job)}>
                        <FaEdit />
                      </Button>
                    </div>
                  </td>
                </tr>
              ))}
          </tbody>
        </Table>
      </div>

      {/* Assign Modal */}
      <Modal show={showAssignModal} onHide={() => setShowAssignModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Assign Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Select Designer</Form.Label>
              <Form.Select
                value={selectedDesigner}
                onChange={(e) => {
                  setSelectedDesigner(e.target.value);
                  setSelectedEmployee("");
                }}
              >
                <option value="">-- Select --</option>
                <option value="Designer">Designer</option>
                {/* <option value="Production">Production</option> */}
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Select Employee</Form.Label>
              <Form.Select
                value={selectedEmployee}
                onChange={(e) => setSelectedEmployee(e.target.value)}
                disabled={!selectedDesigner}
              >
                <option value="">-- Select Employee --</option>
                {paginatedAssignment
                  .filter((emp) => emp.role === 'employee')
                  .map((emp) => (
                    <option key={emp._id} value={emp._id}>
                      {emp.firstName || "Unnamed Employee"} {emp.lastName || "Unnamed Employee"}
                    </option>
                  ))}
              </Form.Select>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={assignmentDescription}
                onChange={(e) => setAssignmentDescription(e.target.value)}
                placeholder="Enter assignment details or instructions..."
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAssignModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleSubmitAssignment}>
            Assign
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Reject Modal */}
      <Modal show={showRejectModal} onHide={() => setShowRejectModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Cancelled Job</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="alert alert-warning">
            Are you sure you want to reject this job?
          </div>
          <Form.Group className="mb-3">
            <Form.Label>Reason for Cancelled</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              value={rejectionReason}
              onChange={(e) => setRejectionReason(e.target.value)}
              placeholder="Enter reason..."
            />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowRejectModal(false)}>
            Cancel
          </Button>
          <Button variant="danger" onClick={handleSubmitRejection}>
            Cancelled
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Pagination */}
      {!loading && !error && (
        <div className="d-flex justify-content-between align-items-center mb-4">
          <div className="text-muted small">
            Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredJobs.length}
          </div>
          <ul className="pagination pagination-sm mb-0">
            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                <span aria-hidden="true">&laquo;</span>
              </button>
            </li>
            {Array.from({ length: totalPages }, (_, i) => (
              <li key={i + 1} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                  {i + 1}
                </button>
              </li>
            ))}
            <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
              <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                <span aria-hidden="true">&raquo;</span>
              </button>
            </li>
          </ul>
        </div>
      )}
    </div>
  );
}

export default Retunjob; 


























import React, { useEffect, useState } from 'react';
import { LuDownload, LuEye, LuRotateCcw } from "react-icons/lu";
import { useDispatch, useSelector } from 'react-redux';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { filterStatus } from '../../../redux/slices/JobsSlice';
import { Button, Form, Table, ProgressBar, Pagination, Modal, Dropdown, Collapse } from "react-bootstrap";
import { Link } from "react-router-dom";
import { FaComments, FaDownload, FaEye } from "react-icons/fa";
import { BsPencil } from "react-icons/bs";

function Completed_Jobs() {
  const [selectedJobs, setSelectedJobs] = useState({});
  const [error, setError] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const location = useLocation();
  const params = useParams();
  const id = location.state?.id || params.id;

  const handleCheckboxChange = (jobId) => {
    setSelectedJobs((prev) => ({
      ...prev,
      [jobId]: !prev[jobId],
    }));
    setError('');
  };

  const { job, loading, } = useSelector((state) => state.jobs);
  const [Status, setStatus] = useState("Completed");

  useEffect(() => {
    dispatch(filterStatus(Status));
  }, [dispatch, Status]);

  const isAnySelected = Object.values(selectedJobs).some(Boolean);

  const handleReturnClick = () => {
    if (isAnySelected) {
      navigate("/admin/jobsView");
    } else {
      setError("Please select at least one job before proceeding.");
    }
  };

  const getPriorityClass = (priority) => {
    switch ((priority || "").toLowerCase()) {
      case "high": return "text-danger";
      case "medium": return "text-warning";
      case "low": return "text-success";
      default: return "";
    }
  };

  const getStatusClass = (status) => {
    switch (status.toLowerCase().trim()) {
      case "in progress":
      case "in_progress":
        return "bg-warning text-dark";
      case "completed":
        return "bg-success text-white";
      case "cancelled":
        return "bg-danger text-white";
      case "active":
        return "bg-primary text-white";
      case "reject":
        return "bg-danger text-white";
      case "review":
        return "bg-info text-dark";
      case "not started":
        return "bg-secondary text-white";
      case "open":
        return "bg-primary text-white";
      default:
        return "bg-light text-dark";
    }
  };


  const [searchQuery, setSearchQuery] = useState("");
  const [selectedProject, setSelectedProject] = useState("All Projects");

  const handleUpdate = (job) => {
    navigate(`/admin/AddJobTracker`, { state: { job } });
  };

  const JobDetails = (job) => {
    navigate(`/admin/OvervieJobsTracker`, { state: { job } });
  };

  const handleDesignerClick = (job) => {
    // Placeholder: Add your logic here
  };

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  const filteredProjects = (job?.jobs || []).filter((j) => {
    // Split searchQuery by spaces, ignore empty terms
    const terms = searchQuery.trim().split(/\s+/).filter(Boolean);
    if (terms.length === 0) {
      const matchesProject =
        selectedProject === "All Projects" ||
        (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
      return matchesProject;
    }
    // Prepare searchable fields as strings
    const fields = [
      j.JobNo,
      j.projectId?.[0]?.projectName,
      j.brandName,
      j.subBrand,
      j.flavour,
      j.packType,
      j.packSize,
      j.packCode,
      j.priority,
      j.createdAt ? new Date(j.createdAt).toLocaleDateString("en-GB") : '',
      j.assignedTo,
      j.updatedAt ? new Date(j.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }) : '',
      j.Status
    ].map(f => (f || '').toString().toLowerCase());
    // Every term must be found in at least one field
    const matchesSearch = terms.every(term =>
      fields.some(field => field.includes(term.toLowerCase()))
    );
    const matchesProject =
      selectedProject === "All Projects" ||
      (j.projectId?.[0]?.projectName?.toLowerCase() === selectedProject.toLowerCase());
    return matchesSearch && matchesProject;
  });

  const totalPages = Math.ceil(filteredProjects.length / itemsPerPage);

  const paginatedProjects = filteredProjects.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  return (
    <div className="container-fluid mt-2">
      <div className="d-flex justify-content-between align-items-center mb-3 flex-wrap">
        {/* <h4>Completed Jobs</h4> */}
        <div className="d-flex gap-2 mt-2 mt-md-0">
          {/* <button className="btn btn-outline-primary">Back to Designer</button> */}
          {/* <button className="btn btn-primary" onClick={handleReturnClick}>
            Return Completed Jobs
          </button> */}
        </div>
      </div>

      {error && <div className="alert alert-danger">{error}</div>}

      <div className="card p-3">
        <div className="d-flex justify-content-between align-items-center mb-4">
          <h2 className="job-title mb-0">Completed Jobs</h2>
        </div>
        {/* Responsive Toggle Button */}
        <div className="d-md-none mb-3">
          <button className="btn btn-outline-secondary w-100" onClick={() => setShowFilters(!showFilters)}>
            {showFilters ? "Hide Filters" : "Show Filters"}
          </button>
        </div>


        {/* Filters */}
        <div className="d-flex flex-wrap gap-2 mb-3 align-items-center">
          <Form.Control
            type="search"
            placeholder="Search jobs..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            style={{ width: "250px" }}
          />
          <Dropdown>
            <Dropdown.Toggle variant="light" id="project-dropdown">
              {selectedProject}
            </Dropdown.Toggle>
            <Dropdown.Menu>
              <Dropdown.Item onClick={() => setSelectedProject("All Projects")}>
                All Projects
              </Dropdown.Item>
              {[...new Set((job?.jobs || []).map((j) => j.projectId?.[0]?.projectName || "N/A"))].map(
                (projectName, index) => (
                  <Dropdown.Item key={index} onClick={() => setSelectedProject(projectName)}>
                    {projectName}
                  </Dropdown.Item>
                )
              )}
            </Dropdown.Menu>
          </Dropdown>
        </div>

        {/* Table Section */}
        <div className="table-responsive">
          <Table hover className="align-middle">
            <thead className="bg-light">
              <tr>
                <th><input type="checkbox" /></th>
                <th>JobNo</th>
                <th>ProjectName</th>
                <th>Brand</th>
                <th>SubBrand</th>
                <th>Flavour</th>
                <th>PackType</th>
                <th>PackSize</th>
                <th>PackCode</th>
                <th>Priority</th>
                <th style={{ whiteSpace: "nowrap" }}>Date Completed</th>
                <th>Assign</th>
                <th>TimeLogged</th>
                <th style={{ whiteSpace: "nowrap" }}>Time Budget</th>
                <th style={{ whiteSpace: "nowrap" }}>Time Spent</th>
                <th>Status</th>
                {/* <th>Actions</th> */}
              </tr>
            </thead>
            <tbody>
              {paginatedProjects.some(job => job.Status?.toLowerCase() === "completed") ? (
                paginatedProjects
                  .slice()
                  .reverse()
                  .filter(job => job.Status?.toLowerCase() === "completed")
                  .map((job, index) => (
                    <tr key={job._id}>
                      <td>
                        <input
                          type="checkbox"
                          checked={selectedJobs[job._id] || false}
                          onChange={() => handleCheckboxChange(job._id)}
                        />
                      </td>
                      <td onClick={() => JobDetails(job)}>
                        <Link style={{ textDecoration: 'none' }}>{job.JobNo}</Link>
                      </td>
                      <td style={{ whiteSpace: "nowrap" }}>{job.projectId?.[0]?.projectName || 'N/A'}</td>
                      <td style={{ whiteSpace: "nowrap" }}>{job.brandName}</td>
                      <td style={{ whiteSpace: "nowrap" }}>{job.subBrand}</td>
                      <td style={{ whiteSpace: 'nowrap' }}>{job.flavour}</td>
                      <td style={{ whiteSpace: "nowrap" }}>{job.packType}</td>
                      <td style={{ whiteSpace: "nowrap" }}>{job.packSize}</td>
                      <td style={{ whiteSpace: "nowrap" }}>{job.packCode}</td>
                      <td><span className={getPriorityClass(job.priority)}>{job.priority}</span></td>
                      <td>{new Date(job.createdAt).toLocaleDateString("en-GB")}</td>
                      <td style={{ whiteSpace: 'nowrap' }}>{job.assign}</td>
                      <td>{new Date(job.updatedAt).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })}</td>
                      <td>2h 15m</td>
                      <td>3h 30m</td>
                      <td>
                        <span className={`badge ${getStatusClass(job.Status)} px-2 py-1`}>
                          {job.Status}
                        </span>
                      </td>
                    </tr>
                  ))
              ) : (
                <tr>
                  <td colSpan="17" className="text-center text-muted py-4">
                    No completed jobs found.
                  </td>
                </tr>
              )}
            </tbody>


          </Table>
        </div>

        {!loading && !error && (
          <div className="d-flex justify-content-between align-items-center mb-4 flex-wrap">
            <div className="text-muted small">
              Showing {(currentPage - 1) * itemsPerPage + 1} to {(currentPage - 1) * itemsPerPage + paginatedProjects.length} of {filteredProjects.length}
            </div>
            <ul className="pagination pagination-sm mb-0">
              <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}>
                  &laquo;
                </button>
              </li>
              {Array.from({ length: totalPages }, (_, i) => (
                <li key={i} className={`page-item ${currentPage === i + 1 ? 'active' : ''}`}>
                  <button className="page-link" onClick={() => setCurrentPage(i + 1)}>
                    {i + 1}
                  </button>
                </li>
              ))}
              <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>
                <button className="page-link" onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}>
                  &raquo;
                </button>
              </li>
            </ul>
          </div>
        )}
      </div>
    </div>
  );
}

export default Completed_Jobs;




























import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Link, useLocation, useNavigate, useParams } from 'react-router-dom';
import { fetchProject } from '../../../redux/slices/ProjectsSlice';
import { fetchjobs } from '../../../redux/slices/JobsSlice';
import { createTimesheetWorklog, updateTimesheetWorklog } from '../../../redux/slices/TimesheetWorklogSlice';
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { fetchusers, SingleUser } from '../../../redux/slices/userSlice';
import { fetchMyJobs } from '../../../redux/slices/Employee/MyJobsSlice';


function AddTimeLog() {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const location = useLocation();
  const { id, openTab, entry, job } = location.state || {};

  console.log("Project Name:", job?.projectId[0]?.projectName);
  console.log("Job ID:", job.JobNo);

  const { UserSingle, loading, error } = useSelector((state) => state.user);

  useEffect(() => {
    dispatch(SingleUser());
  }, [dispatch]);

  const empid = UserSingle?._id;

  const getTodayDate = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  const [formData, setFormData] = useState({
    projectId: '',
    jobId: '',
    employeeId: empid,
    date: getTodayDate(),
    status: '',
    startTime: '',
    endTime: '',
    taskDescription: '',
    tags: '',
    projectName: '',
    jobName: ''
  });

  useEffect(() => {
    if (entry || job) {
      const data = entry || job;
      const parsedDate = data.date ? new Date(data.date).toISOString().split('T')[0] : getTodayDate();

      setFormData({
        date: parsedDate,
        projectId: Array.isArray(data.projectId)
          ? data.projectId[0]._id
          : data.projectId?._id || '',
        jobId: Array.isArray(data.jobId)
          ? data.jobId[0]._id
          : data._id || '',
        employeeId: Array.isArray(data.employeeId)
          ? data.employeeId[0]._id
          : empid,
        status: data.status || '',
        startTime: data.startTime || '',
        endTime: data.endTime || '',
        taskDescription: data.taskDescription || '',
        tags: data.tags || '',
        projectName: Array.isArray(data.projectId)
          ? data.projectId[0].projectName
          : data.projectId?.projectName || '',
        jobName: Array.isArray(data.jobId)
          ? data.jobId[0].jobName || data.jobId[0].JobNo
          : data.jobName || data.JobNo || ''
      });
    }
  }, [entry, job, empid]);

  useEffect(() => {
    dispatch(fetchProject());
    dispatch(fetchjobs());
    dispatch(fetchusers());
  }, [dispatch]);

  useEffect(() => {
    if (formData.startTime && formData.endTime) {
      const [startHour, startMinute] = formData.startTime.split(':').map(Number);
      const [endHour, endMinute] = formData.endTime.split(':').map(Number);

      const start = new Date();
      start.setHours(startHour, startMinute, 0);

      const end = new Date();
      end.setHours(endHour, endMinute, 0);

      let diff = (end - start) / 1000 / 60 / 60;

      if (diff < 0) diff = 0;

      setFormData(prev => ({
        ...prev,
        hours: diff.toFixed(2)
      }));
    }
  }, [formData.startTime, formData.endTime]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const convertTo12HourFormat = (time24) => {
    const [hourStr, minuteStr] = time24.split(':');
    let hour = parseInt(hourStr, 10);
    const minute = minuteStr;
    const ampm = hour >= 12 ? 'PM' : 'AM';
    hour = hour % 12 || 12;
    return `${hour.toString().padStart(2, '0')}:${minute} ${ampm}`;
  };

  //  const handleSubmit = (e) => {
  //   e.preventDefault();
  //   // Ensure projectName exists (fallback)
  //   let projectName = formData.projectName;
  //   if (!projectName) {
  //     const fallbackProject = reversedProjectList.find(p => p._id === formData.projectId);
  //     projectName = fallbackProject?.projectName || job?.projectId?.[0]?.projectName || "";
  //   }

  //   const payload = {
  //     projectId: [formData.projectId],
  //     jobId: [formData.jobId],
  //     employeeId: [formData.employeeId],
  //     date: formData.date,
  //     startTime: convertTo12HourFormat(formData.startTime),
  //     endTime: convertTo12HourFormat(formData.endTime),
  //     taskDescription: formData.taskDescription,
  //     status: formData.status,
  //     tags: formData.tags,
  //     projectName: projectName, // ✅ fixed
  //     jobName: formData.jobName
  //   };

  //   const successNavigate = () => navigate("/employee/TimeTracking");

  //   if (id) {
  //     dispatch(updateTimesheetWorklog({ _id: id, data: payload }))
  //       .unwrap()
  //       .then((res) => {
  //         toast.success(res?.message || "Timesheet updated successfully!");
  //         successNavigate();
  //       })
  //       .catch((err) => {
  //         toast.error(err?.message || "Failed to update timesheet!");
  //         console.error("Update error:", err);
  //       });
  //   } else {
  //     dispatch(createTimesheetWorklog(payload))
  //       .unwrap()
  //       .then((res) => {
  //         toast.success(res?.message || "Timesheet created successfully!");
  //         successNavigate();
  //       })
  //       .catch((err) => {
  //         toast.error(err?.message || "Error creating timesheet!");
  //         console.error("Create error:", err);
  //       });
  //   }
  // };


  const handleSubmit = (e) => {
    e.preventDefault();
    // Ensure projectName exists (fallback)
    let projectName = formData.projectName;
    if (!projectName) {
      const fallbackProject = reversedProjectList.find(p => p._id === formData.projectId);
      projectName = fallbackProject?.projectName || job?.projectId?.[0]?.projectName || "";
    }

    const payload = {
      projectId: [formData.projectId],
      jobId: [formData.jobId],
      employeeId: [formData.employeeId],
      date: formData.date,
      startTime: convertTo12HourFormat(formData.startTime),
      endTime: convertTo12HourFormat(formData.endTime),
      taskDescription: formData.taskDescription,
      status: formData.status,
      tags: formData.tags,
      projectName: projectName, // ✅ fixed
      jobName: formData.jobName
    };

    const successNavigate = () => navigate("/employee/TimeTracking");

    dispatch(createTimesheetWorklog(payload))
      .unwrap()
      .then((res) => {
        toast.success(res?.message || "Timesheet created successfully!");
        successNavigate();
      })
      .catch((err) => {
        toast.error(err?.message || "Error creating timesheet!");
        console.error("Create error:", err);
      });
  };

  const { myjobs } = useSelector((state) => state.MyJobs);
  const MynewJobsdata = myjobs && myjobs.assignments && myjobs.assignments.length > 0 ? myjobs.assignments[0].jobId : [];

  useEffect(() => {
    dispatch(fetchMyJobs());
  }, [dispatch]);

  const filteredProjects = MynewJobsdata || [];
  const reversedProjectList = Array.isArray(MynewJobsdata)
    ? MynewJobsdata.flatMap(job => job.projectId).reverse()
    : [];

  const reversedJobList = Array.isArray(MynewJobsdata)
    ? MynewJobsdata.flatMap(job => job.JobNo).reverse()
    : [];

  return (
    <div className="container py-4">
      <div className="row justify-content-center">
        <div className="col-12">
          <div className="card shadow-sm border-0">
            <div className="card-body p-4">
              <h5 className="card-title mb-4">Timesheet & Worklog</h5>
              <form onSubmit={handleSubmit}>
                <div className="row g-3">

                  {/* Project Dropdown */}
                  <div className="col-md-6">
                    <label className="form-label">Project</label>
                    <select
                      className="form-select"
                      name="projectId"
                      value={formData.projectId}
                      onChange={(e) => {
                        const selectedId = e.target.value;
                        const selectedProject = reversedProjectList.find(p => p._id === selectedId);
                        setFormData(prev => ({
                          ...prev,
                          projectId: selectedId,
                          projectName: selectedProject?.projectName || ""
                        }));
                      }}
                      required
                    >
                      <option value="">Select a project</option>
                      <option key={job?.projectId[0]?._id} value={job?.projectId[0]?._id}>
                        {job?.projectId[0]?.projectName}
                      </option>
                    </select>
                  </div>


                  {/* Jobs Dropdown */}
                  <div className="col-md-6">
                    <label className="form-label">Jobs</label>
                    <select
                      className="form-select"
                      name="jobId"
                      value={formData.jobId}
                      onChange={(e) => {
                        const selectedId = e.target.value;
                        const reversedJobList = filteredProjects.find(j => j._id === selectedId);
                        setFormData({
                          ...formData,
                          jobId: selectedId,
                          jobName: reversedJobList?.jobName || reversedJobList?.JobNo || (reversedJobList?.brandName + " " + reversedJobList?.subBrand) || "",
                        });
                      }}
                      required
                    >
                      <option value="">Select a job</option>
                      <option key={job._id} value={job._id}>
                        {job.JobNo}
                      </option>
                    </select>
                  </div>

                  <div className="col-md-6">
                    <label className="form-label">Date</label>
                    <input
                      type="date"
                      className="form-control"
                      name="date"
                      value={formData.date}
                      onChange={handleInputChange}
                      required
                    />
                  </div>
                  <div className="col-md-6">
                    <label className="form-label">Start Time</label>
                    <input
                      type="time"
                      className="form-control"
                      name="startTime"
                      value={formData.startTime}
                      onChange={handleInputChange}
                      required
                    />
                  </div>

                  <div className="col-md-6">
                    <label className="form-label">End Time</label>
                    <input
                      type="time"
                      className="form-control"
                      name="endTime"
                      value={formData.endTime}
                      onChange={handleInputChange}
                      required
                    />
                  </div>
                  {/* 
                  <div className="col-md-6">
                    <label className="form-label">Status</label>
                    <select
                      className="form-select"
                      name="status"
                      value={formData.status}
                      onChange={handleInputChange}
                      required
                    >
                      <option value="">Select Status</option>
                      <option value="Approved">Approved</option>
                      <option value="Pending">Pending</option>
                      <option value="In Progress">In Progress</option>
                      <option value="Completed">Completed</option>
                    </select>
                  </div> */}



                  <div className="col-12">
                    <label className="form-label">Note</label>
                    <textarea
                      className="form-control"
                      rows="4"
                      name="taskDescription"
                      value={formData.taskDescription}
                      onChange={handleInputChange}
                      required
                    ></textarea>
                  </div>
                </div>

                <div className="d-flex justify-content-end gap-2 mt-4">
                  <Link to="/admin/TimesheetWorklog" className="btn btn-light">Cancel</Link>
                  <button type="submit" className="btn btn-dark">
                    {id ? "Update Time Entry" : "Submit Time Entry"}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default AddTimeLog;



12 26 31























































import React, { useEffect, useState } from "react";
import {
  FaFileAlt,
  FaClock,
  FaCheckCircle,
  FaExclamationCircle,
  FaUser,
  FaBell,
} from "react-icons/fa";

// Notifiction code
import { initMessaging, getFcmToken, onForegroundMessage } from "../../../firebase";
import { saveToken, sendTestNotification } from "./api";
import { useDispatch, useSelector } from "react-redux";
import { getAllNotifications } from "../../../redux/slices/Notifiction";

const VAPID_KEY = "BBrmFxSoxxTJSvX7C4cMqpeNg437_GvbxC9pPQ6rjbtii8lR8iqHy8CfWo-BLVIu7TN53LobGEi6clH6rXSG-nw"; // Firebase Console → Cloud Messaging → Web configuration

function Notiifcations() {
const dispatch =useDispatch()

  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: "purchase",
      title: "New Purchase Order #PO-2024-089 requires your approval",
      from: "Client: ABC Corporation",
      time: "2 hours ago",
      read: false,
      category: "Today",
    },
    {
      id: 2,
      type: "timesheet",
      title: "Timesheet submission reminder",
      description: "Please submit your timesheet for the week ending Jan 14",
      time: "3 hours ago",
      read: false,
      category: "Today",
    },
    {
      id: 3,
      type: "project",
      title: 'Project "Holiday Package Design" completed',
      description: "All deliverables have been approved",
      time: "Yesterday at 4:24 PM",
      read: true,
      category: "Yesterday",
    },
    {
      id: 4,
      type: "invoice",
      title: "Invoice #INV-2024-045 is overdue",
      description: "Payment was due on Jan 10, 2024",
      time: "Yesterday at 2:15 PM",
      read: false,
      category: "Yesterday",
    },
    {
      id: 5,
      type: "team",
      title: 'New team member added to Project "Brand Guidelines"',
      description: "Sarah Johnson has joined as Junior Designer",
      time: "Jan 11, 2024",
      read: false,
      category: "Earlier",
    },
  ]);

  const [selectedCategory, setSelectedCategory] = useState("All Categories");
  const [showModal, setShowModal] = useState(false);

  const [formData, setFormData] = useState({
    title: "",
    text: "",
    image: "",
    name: "",
    scheduleOption: "now",
    date: "",
    time: "",
  });

  const markAllAsRead = () => {
    setNotifications(notifications.map((notif) => ({ ...notif, read: true })));
  };

  const removeNotification = (id) => {
    setNotifications(notifications.filter((notif) => notif.id !== id));
  };

  const getNotificationIcon = (type) => {
    switch (type) {
      case "purchase":
        return <FaFileAlt />;
      case "timesheet":
        return <FaClock />;
      case "project":
        return <FaCheckCircle />;
      case "invoice":
        return <FaExclamationCircle />;
      case "team":
        return <FaUser />;
      default:
        return <FaBell />;
    }
  };

  const getNotificationClass = (type) => {
    switch (type) {
      case "purchase":
        return "bg-primary bg-opacity-10";
      case "timesheet":
        return "bg-warning bg-opacity-10";
      case "project":
        return "bg-success bg-opacity-10";
      case "invoice":
        return "bg-danger bg-opacity-10";
      case "team":
        return "bg-info bg-opacity-10";
      default:
        return "";
    }
  };

  const filteredNotifications = notifications.filter(
    (notif) =>
      selectedCategory === "All Categories" ||
      notif.type === selectedCategory.toLowerCase()
  );

  const categories = [
    "All Categories",
    "Purchase",
    "Timesheet",
    "Project",
    "Invoice",
    "Team",
  ];

  const handleFormChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    const newNotification = {
      id: notifications.length + 1,
      type: "custom",
      title: formData.title,
      description: formData.text,
      time:
        formData.scheduleOption === "now"
          ? "Just now"
          : `${formData.date} at ${formData.time}`,
      read: false,
      category: "Today",
    };
    setNotifications([newNotification, ...notifications]);
    setShowModal(false);
    setFormData({
      title: "",
      text: "",
      image: "",
      name: "",
      scheduleOption: "now",
      date: "",
      time: "",
    });
  };


  // Notifiction code 
  const [token, setToken] = useState("");
  const [title, setTitle] = useState("Hello Farhan 👋");
  const [body, setBody] = useState("This is a test notification Saaranik Project");

  useEffect(() => {
    (async () => {
      const messaging = await initMessaging();
      if (!messaging) {
        console.warn("FCM not supported in this browser.");
        return;
      }
      const permission = await Notification.requestPermission();
      if (permission !== "granted") {
        console.warn("Notification permission not granted");
        return;
      }

      // Get + Save token initially
      const t = await getFcmToken(VAPID_KEY);
      if (t) {
        setToken(t);
        await saveToken(t);

        // Client → SW fallback postMessage (optional; if you use clients.matchAll in SW)
        if (navigator.serviceWorker?.controller) {
          navigator.serviceWorker.controller.postMessage({
            type: "NEW_FCM_TOKEN",
            token: t,
          });
        }
      }

      // Foreground message listener
      onForegroundMessage((payload) => {
        console.log("Foreground message:", payload);
        const { title, body, icon } = payload.notification || {};

        // Show browser native notification
        if (Notification.permission === "granted") {
          new Notification(title, {
            body,
            icon: icon || "/favicon.ico", // icon optional
          });
        }
      });


      // Simple token refresh strategy:
      // Re-check token on every load (and daily/interval if you want)
      const recheck = async () => {
        const newTok = await getFcmToken(VAPID_KEY);
        if (newTok && newTok !== token) {
          setToken(newTok);
          await saveToken(newTok);
          if (navigator.serviceWorker?.controller) {
            navigator.serviceWorker.controller.postMessage({
              type: "NEW_FCM_TOKEN",
              token: newTok,
            });
          }
        }
      };
      const interval = setInterval(recheck, 24 * 60 * 60 * 1000); // daily
      return () => clearInterval(interval);
    })();
  }, []);


    const { Notifiction, loading, error } = useSelector((state) => state.notifiction);
    console.log("jjjjjj",Notifiction);
    
useEffect(()=>{
  dispatch(getAllNotifications())
})
  return (
    <div className="container-fluid py-4">
      <div className="notifications-container bg-white rounded shadow-sm p-4">
        <div className="notification-header d-flex justify-content-between align-items-center mb-4">
          <h3>Notifications</h3>
          <div className="d-flex align-items-center">
            {/* <select
              className="form-select me-3"
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
            >
              {categories.map((category) => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select> */}
            <button
              className="btn btn-primary me-3"
              onClick={() => setShowModal(true)}
              style={{ whiteSpace: 'nowrap' }}
            >
              Send Notification
            </button>
            {/* <button
              className="btn btn-link text-decoration-none text-muted"
              onClick={markAllAsRead}
            >
              Mark all as read
            </button> */}
          </div>
        </div>

        {["Today", "Yesterday", "Earlier"].map((category) => {
          const categoryNotifications = filteredNotifications.filter(
            (n) => n.category === category
          );
          if (categoryNotifications.length === 0) return null;

          return (
            <div key={category} className="mb-4">
              <h6 className="text-muted mb-3">{category}</h6>
              {categoryNotifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`notification-card mb-3 p-3 bg-light rounded-3 position-relative ${!notification.read ? "unread" : ""
                    }`}
                >
                  <div className="d-flex align-items-start">
                    <div
                      className={`notification-icon rounded-circle p-2 me-3 ${getNotificationClass(
                        notification.type
                      )}`}
                    >
                      <span className="fs-5">
                        {getNotificationIcon(notification.type)}
                      </span>
                    </div>
                    <div className="flex-grow-1">
                      <h6 className="notification-title mb-1 fw-semibold">
                        {notification.title}
                      </h6>
                      {notification.from && (
                        <p className="text-muted small mb-1">
                          {notification.from}
                        </p>
                      )}
                      {notification.description && (
                        <p className="text-muted small mb-1">
                          {notification.description}
                        </p>
                      )}
                      <span className="text-muted smaller d-block">
                        {notification.time}
                      </span>
                    </div>
                    <button
                      className="btn-close position-absolute top-0 end-0 mt-2 me-2"
                      onClick={() => removeNotification(notification.id)}
                      aria-label="Close"
                    ></button>
                  </div>
                </div>
              ))}
            </div>
          );
        })}
      </div>

      {/* Bootstrap Modal */}
      {showModal && (
        <div
          className="modal fade show"
          style={{ display: "block", background: "rgba(0,0,0,0.5)" }}
        >
          <div className="modal-dialog">
            <div className="modal-content  text-dark">
              <div className="modal-header">
                <h5 className="modal-title">Send Notification</h5>
                <button
                  type="button"
                  className="btn-close btn-close-dark"
                  onClick={() => setShowModal(false)}
                ></button>
              </div>
              <div className="modal-body">
                <form onSubmit={handleFormSubmit}>
                  <label>Notification title</label>
                  <input className="form-control mb-2" value={title} onChange={(e) => setTitle(e.target.value)} />

                  <label>Notification text</label>
                  <textarea className="form-control mb-2" value={body} onChange={(e) => setBody(e.target.value)} />

                  <label>Notification image (optional)</label>
                  <input
                    type="text"
                    name="image"
                    value={formData.image}
                    onChange={handleFormChange}
                    className="form-control mb-2"
                  />

                  <label>Notification name (optional)</label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleFormChange}
                    className="form-control mb-2"
                  />

                  <label>Scheduling</label>
                  <select
                    name="scheduleOption"
                    value={formData.scheduleOption}
                    onChange={handleFormChange}
                    className="form-select mb-2"
                  >
                    <option value="now">Now</option>
                    <option value="scheduled">Scheduled</option>
                  </select>

                  {formData.scheduleOption === "scheduled" && (
                    <div className="d-flex gap-2">
                      <input
                        type="date"
                        name="date"
                        value={formData.date}
                        onChange={handleFormChange}
                        className="form-control mb-2"
                      />
                      <input
                        type="time"
                        name="time"
                        value={formData.time}
                        onChange={handleFormChange}
                        className="form-control mb-2"
                      />
                    </div>
                  )}
                  <button
                    style={{ marginTop: 16 }}
                    onClick={async (e) => {
                      e.preventDefault(); // form submit rokna
                      // null bhejne ka matlab hai -> sabhi tokens par send hoga
                      const res = await sendTestNotification(null, title, body);
                      console.log("Notification response:", res);
                      alert(`Sent to all tokens: ${res.successCount} success, ${res.failureCount} failed`);
                    }}
                    id="All_btn"
                    type="button"
                    className="btn btn-success w-100"
                  >
                    Send
                  </button>

                </form>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default Notiifcations;
// ye code me notifiction sate se aarhe hai code sahi hai 

















// ye code me notifiction dynemik aarhe hai ye code bi sahi hai 
// import React, { useEffect, useMemo, useState } from "react";
// import {
//   FaFileAlt,
//   FaClock,
//   FaCheckCircle,
//   FaExclamationCircle,
//   FaUser,
//   FaBell,
// } from "react-icons/fa";

// // Notifiction code
// import { initMessaging, getFcmToken, onForegroundMessage } from "../../../firebase";
// import { saveToken, sendTestNotification } from "./api";
// import { useDispatch, useSelector } from "react-redux";
// import { getAllNotifications } from "../../../redux/slices/Notifiction";
// import dayjs from "dayjs";


// const VAPID_KEY = "BBrmFxSoxxTJSvX7C4cMqpeNg437_GvbxC9pPQ6rjbtii8lR8iqHy8CfWo-BLVIu7TN53LobGEi6clH6rXSG-nw"; // Firebase Console → Cloud Messaging → Web configuration


// function Notiifcations() {
// const dispatch =useDispatch()

//   const [notifications, setNotifications] = useState([
//     {
//       id: 1,
//       type: "purchase",
//       title: "New Purchase Order #PO-2024-089 requires your approval",
//       from: "Client: ABC Corporation",
//       time: "2 hours ago",
//       read: false,
//       category: "Today",
//     },
//     {
//       id: 2,
//       type: "timesheet",
//       title: "Timesheet submission reminder",
//       description: "Please submit your timesheet for the week ending Jan 14",
//       time: "3 hours ago",
//       read: false,
//       category: "Today",
//     },
//     {
//       id: 3,
//       type: "project",
//       title: 'Project "Holiday Package Design" completed',
//       description: "All deliverables have been approved",
//       time: "Yesterday at 4:24 PM",
//       read: true,
//       category: "Yesterday",
//     },
//     {
//       id: 4,
//       type: "invoice",
//       title: "Invoice #INV-2024-045 is overdue",
//       description: "Payment was due on Jan 10, 2024",
//       time: "Yesterday at 2:15 PM",
//       read: false,
//       category: "Yesterday",
//     },
//     {
//       id: 5,
//       type: "team",
//       title: 'New team member added to Project "Brand Guidelines"',
//       description: "Sarah Johnson has joined as Junior Designer",
//       time: "Jan 11, 2024",
//       read: false,
//       category: "Earlier",
//     },
//   ]);

//   const [selectedCategory, setSelectedCategory] = useState("All Categories");
//   const [showModal, setShowModal] = useState(false);

//   const [formData, setFormData] = useState({
//     title: "",
//     text: "",
//     image: "",
//     name: "",
//     scheduleOption: "now",
//     date: "",
//     time: "",
//   });

//   const markAllAsRead = () => {
//     setNotifications(notifications.map((notif) => ({ ...notif, read: true })));
//   };

//   const removeNotification = (id) => {
//     setNotifications(notifications.filter((notif) => notif.id !== id));
//   };

//   const getNotificationIcon = (type) => {
//     switch (type) {
//       case "purchase":
//         return <FaFileAlt />;
//       case "timesheet":
//         return <FaClock />;
//       case "project":
//         return <FaCheckCircle />;
//       case "invoice":
//         return <FaExclamationCircle />;
//       case "team":
//         return <FaUser />;
//       default:
//         return <FaBell />;
//     }
//   };

//   const getNotificationClass = (type) => {
//     switch (type) {
//       case "purchase":
//         return "bg-primary bg-opacity-10";
//       case "timesheet":
//         return "bg-warning bg-opacity-10";
//       case "project":
//         return "bg-success bg-opacity-10";
//       case "invoice":
//         return "bg-danger bg-opacity-10";
//       case "team":
//         return "bg-info bg-opacity-10";
//       default:
//         return "";
//     }
//   };

//   const filteredNotifications = notifications.filter(
//     (notif) =>
//       selectedCategory === "All Categories" ||
//       notif.type === selectedCategory.toLowerCase()
//   );

//   const categories = [
//     "All Categories",
//     "Purchase",
//     "Timesheet",
//     "Project",
//     "Invoice",
//     "Team",
//   ];

//   const handleFormChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleFormSubmit = (e) => {
//     e.preventDefault();
//     const newNotification = {
//       id: notifications.length + 1,
//       type: "custom",
//       title: formData.title,
//       description: formData.text,
//       time:
//         formData.scheduleOption === "now"
//           ? "Just now"
//           : `${formData.date} at ${formData.time}`,
//       read: false,
//       category: "Today",
//     };
//     setNotifications([newNotification, ...notifications]);
//     setShowModal(false);
//     setFormData({
//       title: "",
//       text: "",
//       image: "",
//       name: "",
//       scheduleOption: "now",
//       date: "",
//       time: "",
//     });
//   };


//   // Notifiction code 
//   const [token, setToken] = useState("");
//   const [title, setTitle] = useState("Hello Farhan 👋");
//   const [body, setBody] = useState("This is a test notification Saaranik Project");

//   useEffect(() => {
//     (async () => {
//       const messaging = await initMessaging();
//       if (!messaging) {
//         console.warn("FCM not supported in this browser.");
//         return;
//       }
//       const permission = await Notification.requestPermission();
//       if (permission !== "granted") {
//         console.warn("Notification permission not granted");
//         return;
//       }

//       // Get + Save token initially
//       const t = await getFcmToken(VAPID_KEY);
//       if (t) {
//         setToken(t);
//         await saveToken(t);

//         // Client → SW fallback postMessage (optional; if you use clients.matchAll in SW)
//         if (navigator.serviceWorker?.controller) {
//           navigator.serviceWorker.controller.postMessage({
//             type: "NEW_FCM_TOKEN",
//             token: t,
//           });
//         }
//       }

//       // Foreground message listener
//       onForegroundMessage((payload) => {
//         console.log("Foreground message:", payload);
//         const { title, body, icon } = payload.notification || {};

//         // Show browser native notification
//         if (Notification.permission === "granted") {
//           new Notification(title, {
//             body,
//             icon: icon || "/favicon.ico", // icon optional
//           });
//         }
//       });


//       // Simple token refresh strategy:
//       // Re-check token on every load (and daily/interval if you want)
//       const recheck = async () => {
//         const newTok = await getFcmToken(VAPID_KEY);
//         if (newTok && newTok !== token) {
//           setToken(newTok);
//           await saveToken(newTok);
//           if (navigator.serviceWorker?.controller) {
//             navigator.serviceWorker.controller.postMessage({
//               type: "NEW_FCM_TOKEN",
//               token: newTok,
//             });
//           }
//         }
//       };
//       const interval = setInterval(recheck, 24 * 60 * 60 * 1000); // daily
//       return () => clearInterval(interval);
//     })();
//   }, []);


//     const { Notifiction, loading, error } = useSelector((state) => state.notifiction);
//     console.log("jjjjjj",Notifiction);
    
// useEffect(()=>{
//   dispatch(getAllNotifications())
// },[dispatch])
//   const groupedNotifications = useMemo(() => {
//     if (!Notifiction?.notifications) return {};

//     const today = dayjs().startOf("day");
//     const yesterday = dayjs().subtract(1, "day").startOf("day");

//     return Notifiction.notifications.reduce((acc, n) => {
//       const notifDate = dayjs(n.date);

//       let category = "Earlier";
//       if (notifDate.isAfter(today)) {
//         category = "Today";
//       } else if (notifDate.isAfter(yesterday)) {
//         category = "Yesterday";
//       }

//       if (!acc[category]) acc[category] = [];
//       acc[category].push({
//         id: n.id,
//         title: n.title,
//         description: n.body,
//         time: n.ago,
//         category,
//       });

//       return acc;
//     }, {});
//   }, [Notifiction]);

//   return (
//     <div className="container-fluid py-4">
//       <div className="notifications-container bg-white rounded shadow-sm p-4">
//         <div className="notification-header d-flex justify-content-between align-items-center mb-4">
//           <h3>Notifications</h3>
//           <div className="d-flex align-items-center">
//             {/* <select
//               className="form-select me-3"
//               value={selectedCategory}
//               onChange={(e) => setSelectedCategory(e.target.value)}
//             >
//               {categories.map((category) => (
//                 <option key={category} value={category}>
//                   {category}
//                 </option>
//               ))}
//             </select> */}
//             <button
//               className="btn btn-primary me-3"
//               onClick={() => setShowModal(true)}
//               style={{ whiteSpace: 'nowrap' }}
//             >
//               Send Notification
//             </button>
//             {/* <button
//               className="btn btn-link text-decoration-none text-muted"
//               onClick={markAllAsRead}
//             >
//               Mark all as read
//             </button> */}
//           </div>
//         </div>

//        <div>
//       {["Today", "Yesterday", "Earlier"].map((category) => {
//         const categoryNotifications = groupedNotifications[category] || [];
//         if (categoryNotifications.length === 0) return null;

//         return (
//           <div key={category} className="mb-4">
//             <h6 className="text-muted mb-3">{category}</h6>
//             {categoryNotifications.map((notification) => (
//               <div
//                 key={notification.id}
//                 className={`notification-card mb-3 p-3 bg-light rounded-3 position-relative`}
//               >
//                 <div className="d-flex align-items-start">
//                   <div
//                     className={`notification-icon rounded-circle p-2 me-3`}
//                   >
//                     <span className="fs-5">🔔</span>
//                   </div>
//                   <div className="flex-grow-1">
//                     <h6 className="notification-title mb-1 fw-semibold">
//                       {notification.title}
//                     </h6>
//                     {notification.description && (
//                       <p className="text-muted small mb-1">
//                         {notification.description}
//                       </p>
//                     )}
//                     <span className="text-muted smaller d-block">
//                       {notification.time}
//                     </span>
//                     <span className="text-muted smaller d-block">
//                       {notification.date}
//                     </span>
//                   </div>
//                   <button
//                     className="btn-close position-absolute top-0 end-0 mt-2 me-2"
//                     onClick={() => console.log("Remove", notification.id)}
//                     aria-label="Close"
//                   ></button>
//                 </div>
//               </div>
//             ))}
//           </div>
//         );
//       })}
//     </div>
//       </div>

//       {/* Bootstrap Modal */}
//       {showModal && (
//         <div
//           className="modal fade show"
//           style={{ display: "block", background: "rgba(0,0,0,0.5)" }}
//         >
//           <div className="modal-dialog">
//             <div className="modal-content  text-dark">
//               <div className="modal-header">
//                 <h5 className="modal-title">Send Notification</h5>
//                 <button
//                   type="button"
//                   className="btn-close btn-close-dark"
//                   onClick={() => setShowModal(false)}
//                 ></button>
//               </div>
//               <div className="modal-body">
//                 <form onSubmit={handleFormSubmit}>
//                   <label>Notification title</label>
//                   <input className="form-control mb-2" value={title} onChange={(e) => setTitle(e.target.value)} />

//                   <label>Notification text</label>
//                   <textarea className="form-control mb-2" value={body} onChange={(e) => setBody(e.target.value)} />

//                   <label>Notification image (optional)</label>
//                   <input
//                     type="text"
//                     name="image"
//                     value={formData.image}
//                     onChange={handleFormChange}
//                     className="form-control mb-2"
//                   />

//                   <label>Notification name (optional)</label>
//                   <input
//                     type="text"
//                     name="name"
//                     value={formData.name}
//                     onChange={handleFormChange}
//                     className="form-control mb-2"
//                   />

//                   <label>Scheduling</label>
//                   <select
//                     name="scheduleOption"
//                     value={formData.scheduleOption}
//                     onChange={handleFormChange}
//                     className="form-select mb-2"
//                   >
//                     <option value="now">Now</option>
//                     <option value="scheduled">Scheduled</option>
//                   </select>

//                   {formData.scheduleOption === "scheduled" && (
//                     <div className="d-flex gap-2">
//                       <input
//                         type="date"
//                         name="date"
//                         value={formData.date}
//                         onChange={handleFormChange}
//                         className="form-control mb-2"
//                       />
//                       <input
//                         type="time"
//                         name="time"
//                         value={formData.time}
//                         onChange={handleFormChange}
//                         className="form-control mb-2"
//                       />
//                     </div>
//                   )}
//                   <button
//                     style={{ marginTop: 16 }}
//                     onClick={async (e) => {
//                       e.preventDefault(); // form submit rokna
//                       // null bhejne ka matlab hai -> sabhi tokens par send hoga
//                       const res = await sendTestNotification(null, title, body);
//                       console.log("Notification response:", res);
//                       alert(`Sent to all tokens: ${res.successCount} success, ${res.failureCount} failed`);
//                     }}
//                     id="All_btn"
//                     type="button"
//                     className="btn btn-success w-100"
//                   >
//                     Send
//                   </button>

//                 </form>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }

// export default Notiifcations;






// this code is ok client is add ok 
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useDispatch } from 'react-redux';
import { createClients, fetchClient, UpdateClients } from '../../../redux/slices/ClientSlice';
import "react-toastify/dist/ReactToastify.css";
import axios from 'axios';
import { apiUrl } from '../../../redux/utils/config';
import CreatableSelect from "react-select/creatable";

// Add this function to format date for input fields
const formatDate = (dateStr) => {
  if (!dateStr) return '';
  const d = new Date(dateStr);
  if (isNaN(d)) return '';
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  return `${d.getFullYear()}-${month}-${day}`;
};

function AddClientManagement() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { id } = useParams(); // for edit mo
  const location = useLocation();
  const { client } = location.state || {};
  const _id = client?._id
  console.log("oo", _id);

  // Initial form state
  const [formData, setFormData] = useState({
    clientName: '',
    industry: '',
    website: '',
    clientAddress: '',
    TaxID_VATNumber: '',
    CSRCode: '',
    Status: '',
    button_Client_Suplier: ''
  });

  // Contact persons state
  const [contactPersons, setContactPersons] = useState([
    {
      contactName: '',
      jobTitle: '',
      email: '',
      phone: '',
      department: '',
      salesRepresentative: ''
    }
  ]);

  // Billing information state
  const [billingInformation, setBillingInformation] = useState([
    {
      billingAddress: '',
      billingContactName: '',
      billingEmail: '',
      billingPhone: '',
      currency: '',
      preferredPaymentMethod: ''
    }
  ]);
  // Shipping information state
  const [shippingInformation, setShippingInformation] = useState([
    {
      shippingAddress: '',
      shippingContactName: '',
      shippingEmail: '',
      shippingPhone: '',
      preferredShippingMethod: '',
      specialInstructions: ''
    }
  ]);
  // Financial information state
  const [financialInformation, setFinancialInformation] = useState([
    {
      annualRevenue: '',
      creditRating: '',
      bankName: '',
      accountNumber: '',
      fiscalYearEnd: '',
      financialContact: ''
    }
  ]);

  // Ledger information state
  const [ledgerInformation, setLedgerInformation] = useState([
    {
      accountCode: '',
      accountType: '',
      openingBalance: '',
      balanceDate: '',
      taxCategory: '',
      costCenter: ''
    }
  ]);

  // Additional information state
  const [additionalInformation, setAdditionalInformation] = useState({
    paymentTerms: '',
    creditLimit: '',
    notes: ''
  });

  // Add state for errors
  const [errors, setErrors] = useState({});

  useEffect(() => {
    const updateStates = (clientData) => {
      setFormData({
        clientName: clientData.clientName || '',
        industry: clientData.industry || '',
        website: clientData.website || '',
        clientAddress: clientData.clientAddress || '',
        TaxID_VATNumber: clientData.TaxID_VATNumber || '',
        CSRCode: clientData.CSRCode || '',
        Status: clientData.Status || '',
        button_Client_Suplier: clientData.button_Client_Suplier || ''
      });

      setContactPersons(clientData.contactPersons || []);
      setBillingInformation(clientData.billingInformation || []);
      setShippingInformation(clientData.shippingInformation || []);
      setFinancialInformation(
        (clientData.financialInformation || []).map((item) => ({
          ...item,
          fiscalYearEnd: formatDate(item.fiscalYearEnd),
        }))
      );
      setLedgerInformation(
        (clientData.ledgerInformation || []).map((item) => ({
          ...item,
          balanceDate: formatDate(item.balanceDate),
        }))
      );
      setAdditionalInformation(clientData.additionalInformation || {
        paymentTerms: '',
        creditLimit: '',
        notes: ''
      });
    };

    if (client) {
      updateStates(client);
    } else if (id) {
      dispatch(fetchclientById(id)).then((res) => {
        const fetchedclient = res.payload;
        if (fetchedclient) {
          updateStates(fetchedclient);
        }
      });
    }
  }, [id, dispatch, client]);



  // Handle basic form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle contact person changes
  const handleContactChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'phone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedContacts = [...contactPersons];
    updatedContacts[index] = {
      ...updatedContacts[index],
      [name]: newValue
    };
    setContactPersons(updatedContacts);
  };

  // Handle billing information changes
  const handleBillingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'billingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedBilling = [...billingInformation];
    updatedBilling[index] = {
      ...updatedBilling[index],
      [name]: newValue
    };
    setBillingInformation(updatedBilling);
  };

  // Handle shipping information changes
  const handleShippingChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'shippingPhone') {
      newValue = newValue.replace(/[^\d]/g, '').slice(0, 10);
    }
    const updatedShipping = [...shippingInformation];
    updatedShipping[index] = {
      ...updatedShipping[index],
      [name]: newValue
    };
    setShippingInformation(updatedShipping);
  };

  // Handle financial information changes
  const handleFinancialChange = (index, e) => {
    const { name, value } = e.target;
    let newValue = value;
    if (name === 'creditRating') {
      // Only allow numbers between 1 and 5
      let num = Number(newValue);
      if (newValue === '') {
        newValue = '';
      } else if (num < 1) {
        newValue = '1';
      } else if (num > 5) {
        newValue = '5';
      } else {
        newValue = String(num);
      }
    }
    const updatedFinancial = [...financialInformation];
    updatedFinancial[index] = {
      ...updatedFinancial[index],
      [name]: newValue
    };
    setFinancialInformation(updatedFinancial);
  };

  // Handle ledger information changes
  const handleLedgerChange = (index, e) => {
    const { name, value } = e.target;
    const updatedLedger = [...ledgerInformation];
    updatedLedger[index] = {
      ...updatedLedger[index],
      [name]: value
    };
    setLedgerInformation(updatedLedger);
  };


  const handleAdditionalChange = (e) => {
    const { name, value } = e.target;
    setAdditionalInformation(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Validation function
  const validate = () => {
    const newErrors = {};

    // Basic form fields
    if (!formData.clientName.trim()) newErrors.clientName = 'Name is required';
    if (!formData.industry) newErrors.industry = 'industry is required';
    if (!formData.website.trim()) newErrors.website = 'Website is required';
    else if (!/^https?:\/\//.test(formData.website)) newErrors.website = 'Website must start with http:// or https://';
    if (!formData.clientAddress.trim()) newErrors.clientAddress = 'Client Address is required';
    if (!formData.TaxID_VATNumber.trim()) newErrors.TaxID_VATNumber = 'Tax ID/VAT Number is required';
    if (!formData.CSRCode.trim()) newErrors.CSRCode = 'CSR Code is required';
    if (!formData.Status) newErrors.Status = 'Status is required';

    // Contact Persons
    contactPersons.forEach((contact, idx) => {
      if (!contact.contactName.trim()) newErrors[`contactName_${idx}`] = 'Contact Name is required';
      if (!contact.jobTitle.trim()) newErrors[`jobTitle_${idx}`] = 'Job Title is required';
      if (!contact.email.trim()) newErrors[`email_${idx}`] = 'Email is required';
      else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(contact.email)) newErrors[`email_${idx}`] = 'Invalid email';
      if (!contact.phone.trim()) newErrors[`phone_${idx}`] = 'Phone is required';
      else if (!/^\d{10}$/.test(contact.phone)) newErrors[`phone_${idx}`] = 'Phone must be 10 digits';
      if (!contact.department.trim()) newErrors[`department_${idx}`] = 'Department is required';
      if (!contact.salesRepresentative.trim()) newErrors[`salesRepresentative_${idx}`] = 'Sales Representative is required';
    });

    // Billing Information (first item)
    const billing = billingInformation[0] || {};
    if (!billing.billingAddress.trim()) newErrors.billingAddress = 'Billing Address is required';
    if (!billing.billingContactName.trim()) newErrors.billingContactName = 'Billing Contact Name is required';
    if (!billing.billingEmail.trim()) newErrors.billingEmail = 'Billing Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(billing.billingEmail)) newErrors.billingEmail = 'Invalid email';
    if (!billing.billingPhone.trim()) newErrors.billingPhone = 'Billing Phone is required';
    else if (!/^\d{10}$/.test(billing.billingPhone)) newErrors.billingPhone = 'Phone must be 10 digits';
    if (!billing.currency) newErrors.currency = 'Currency is required';
    if (!billing.preferredPaymentMethod) newErrors.preferredPaymentMethod = 'Preferred Payment Method is required';

    // Shipping Information (first item)
    const shipping = shippingInformation[0] || {};
    if (!shipping.shippingAddress.trim()) newErrors.shippingAddress = 'Shipping Address is required';
    if (!shipping.shippingContactName.trim()) newErrors.shippingContactName = 'Shipping Contact Name is required';
    if (!shipping.shippingEmail.trim()) newErrors.shippingEmail = 'Shipping Email is required';
    else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(shipping.shippingEmail)) newErrors.shippingEmail = 'Invalid email';
    if (!shipping.shippingPhone.trim()) newErrors.shippingPhone = 'Shipping Phone is required';
    else if (!/^\d{10}$/.test(shipping.shippingPhone)) newErrors.shippingPhone = 'Phone must be 10 digits';
    if (!shipping.preferredShippingMethod) newErrors.preferredShippingMethod = 'Preferred Shipping Method is required';
    if (!shipping.specialInstructions.trim()) newErrors.specialInstructions = 'Special Instructions are required';

    // Financial Information (first item)
    const financial = financialInformation[0] || {};
    if (!financial.annualRevenue) newErrors.annualRevenue = 'Annual Revenue is required';
    else if (isNaN(financial.annualRevenue) || Number(financial.annualRevenue) < 0) newErrors.annualRevenue = 'Annual Revenue must be a positive number';
    if (!financial.creditRating) newErrors.creditRating = 'Credit Rating is required';
    else if (isNaN(financial.creditRating) || Number(financial.creditRating) < 1 || Number(financial.creditRating) > 5) newErrors.creditRating = 'Credit Rating must be between 1 and 5';
    if (!financial.bankName.trim()) newErrors.bankName = 'Bank Name is required';
    if (!financial.accountNumber.trim()) newErrors.accountNumber = 'Account Number is required';
    if (!financial.fiscalYearEnd) newErrors.fiscalYearEnd = 'Fiscal Year End is required';
    if (!financial.financialContact.trim()) newErrors.financialContact = 'Financial Contact is required';

    // Ledger Information (first item)
    const ledger = ledgerInformation[0] || {};
    if (!ledger.accountCode.trim()) newErrors.accountCode = 'Account Code is required';
    if (!ledger.accountType) newErrors.accountType = 'Account Type is required';
    if (!ledger.openingBalance) newErrors.openingBalance = 'Opening Balance is required';
    else if (isNaN(ledger.openingBalance)) newErrors.openingBalance = 'Opening Balance must be a number';
    if (!ledger.balanceDate) newErrors.balanceDate = 'Balance Date is required';
    if (!ledger.taxCategory) newErrors.taxCategory = 'Tax Category is required';
    if (!ledger.costCenter.trim()) newErrors.costCenter = 'Cost Center is required';

    // Additional Information
    if (!additionalInformation.paymentTerms) newErrors.paymentTerms = 'Payment Terms is required';
    if (!additionalInformation.creditLimit) newErrors.creditLimit = 'Credit Limit is required';
    else if (isNaN(additionalInformation.creditLimit) || Number(additionalInformation.creditLimit) < 0) newErrors.creditLimit = 'Credit Limit must be a positive number';
    if (!additionalInformation.notes.trim()) newErrors.notes = 'Notes is required';

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    const fullData = {
      ...formData,
      contactPersons,
      billingInformation,
      shippingInformation,
      financialInformation,
      ledgerInformation,
      additionalInformation
    };
    console.log('Full Data Object:', fullData);
    if (_id) {
      dispatch(UpdateClients({ _id, data: fullData }))
        .unwrap()
        .then(() => {
          toast.success("clientupdated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Failed to update client!");
        });
    } else {
      dispatch(createClients(fullData))
        .unwrap()
        .then(() => {
          toast.success("clientcreated successfully!");
          navigate("/admin/clientManagement");
          dispatch(fetchClient());
        })
        .catch(() => {
          toast.error("Error creating client");
        });
    }
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();

  //   const fullData = {
  //     ...formData,
  //     contactPersons,
  //     billingInformation,
  //     shippingInformation,
  //     financialInformation,
  //     ledgerInformation,
  //     additionalInformation
  //   };
  //         dispatch(createClients(fullData))
  //       .unwrap()
  //       .then(() => {
  //         toast.success("clientcreated successfully!");
  //         navigate("/clientManagement");
  //       })
  //       .catch(() => {
  //         toast.error("Error creating client");
  //       });
  // };

  // ///////////////////////////////////////////////////////////////////////////////////////////

  // Keep the options in local state so we can push newly‑created ones
  const [brandOptions, setBrandOptions] = useState([
    { value: "Coca‑Cola", label: "Coca‑Cola" },
    { value: "Pepsi", label: "Pepsi" },
    // …your initial list
  ]);

  // When the user creates a brand that isn’t in the list yet
  const handleCreate = (inputValue) => {
    const newOption = { value: inputValue, label: inputValue };
    setBrandOptions((prev) => [...prev, newOption]);
    setFormData((prev) => ({ ...prev, brandName: inputValue }));
  };

  // Add state for select options
  const [selectOptions, setSelectOptions] = useState({
    industry: [],
    currency: [],
    preferredPaymentMethod: [],
    preferredShippingMethod: [],
    accountType: [],

  });

  // Fetch select options from API on mount
  useEffect(() => {
    axios.get(`${apiUrl}/client/selectclient`)
      .then(res => {
        if (res.data.success && res.data.data) {
          setSelectOptions({
            industry: (res.data.data.industry || []).map(v => ({ value: v, label: v })),
            currency: (res.data.data.currency || []).map(v => ({ value: v, label: v })),
            preferredPaymentMethod: (res.data.data.preferredPaymentMethod || []).map(v => ({ value: v, label: v })),
            preferredShippingMethod: (res.data.data.preferredShippingMethod || []).map(v => ({ value: v, label: v })),
            accountType: (res.data.data.accountType || []).map(v => ({ value: v, label: v })),
          });
        }
      });
  }, []);

  // Generic handler for creating new options
const [userData, setUserData] = useState({
  countryCode: "+44",
  phoneNumber: "",
});

const validatePhone = () => {
  const fullNumber = userData.countryCode + userData.phoneNumber;
  if (!/^\+\d{10,15}$/.test(fullNumber)) {
    errors.phoneNumber = "Enter a valid phone number with selected country code.";
  }
};

  const handleCreateOption = (field) => (inputValue) => {
    axios.post(`${apiUrl}/client/selectclient`, {
      [field]: [...selectOptions[field].map(opt => opt.value), inputValue]
    }).then(() => {
      setSelectOptions(prev => ({
        ...prev,
        [field]: [...prev[field], { value: inputValue, label: inputValue }]
      }));
      setFormData(prev => ({
        ...prev,
        [field]: inputValue
      }));
    });
  };
  if (!/^\+447\d{9}$/.test(formData.CSRCode)) {
    errors.CSRCode = "Enter valid UK mobile number (e.g. 7912345678)";
  }

  return (
    <>
      <ToastContainer />
      <div className="container mt-5">
        <div className="card shadow-sm">
          <div className="card-body">
            {/* <h1 className="card-title h4 mb-4">Add Company</h1> */}
            <h2 className="mb-4">{id || client?._id ? "Edit client" : "New Company (Client)"}</h2>
            <form className="row g-3" onSubmit={handleSubmit}>
              <div className='col-md-3'>  <h6 className="mb-3">Client/Supplier Information</h6></div>
              <div className="col-md-6"></div>
              <div className="col-md-6">
                <label className="form-label">Name</label>
                <input required type="text" name="clientName" value={formData.clientName} onChange={handleChange} className="form-control" placeholder="Enter  name" />
                {errors.clientName && <div className="text-danger small">{errors.clientName}</div>}
              </div>

              {/* <div className="col-md-6">
                <label className="form-label">industry</label>
                <select className="form-select" name="industry" required value={formData.industry} onChange={handleChange}>
                  <option value="">Select industry</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="tech">Technology</option>
                  <option value="retail">Retail</option>
                </select>
                {errors.industry && <div className="text-danger small">{errors.industry}</div>}
              </div> */}
              {/* industry */}
              <div className="col-md-6">
                <label className="form-label">Industry</label>
                <CreatableSelect
                  options={selectOptions.industry}
                  value={selectOptions.industry.find((opt) => opt.value === formData.industry)}
                  onChange={(option) =>
                    setFormData((prev) => ({ ...prev, industry: option?.value || "" }))
                  }
                  onCreateOption={handleCreateOption('industry')}
                  isClearable
                  required
                />
              </div>

              <div className="col-md-6">
                <label className="form-label">Website</label>
                <input required type="url" name="website" value={formData.website} onChange={handleChange} className="form-control" placeholder="https://" />
                {errors.website && <div className="text-danger small">{errors.website}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Client Address</label>
                <textarea required className="form-control" name="clientAddress" value={formData.clientAddress} onChange={handleChange}></textarea>
                {errors.clientAddress && <div className="text-danger small">{errors.clientAddress}</div>}
              </div>
              <div className="col-md-6">
                <label className="form-label">Tax ID/VAT Number</label>
                <input
                  required
                  type="text"
                  name="TaxID_VATNumber"
                  value={formData.TaxID_VATNumber}
                  onChange={handleChange}
                  className="form-control"
                  maxLength={15}
                  pattern="\d*"
                  inputMode="numeric"
                />

                {errors.TaxID_VATNumber && <div className="text-danger small">{errors.TaxID_VATNumber}</div>}
              </div>
             <div className="col-md-6">
  <label className="form-label">Phone Number</label>
  <div className="input-group">
    <select
      className="form-select"
      style={{ maxWidth: "100px" }}
      value={userData.countryCode}
      onChange={(e) => setUserData({ ...userData, countryCode: e.target.value })}
    >
      <option value="+44">🇬🇧 +44</option>
      <option value="+91">🇮🇳 +91</option>
      <option value="+1">🇺🇸 +1</option>
    </select>

    <input
      type="tel"
      name="phoneNumber"
      value={userData.phoneNumber}
      onChange={(e) => {
        let input = e.target.value.replace(/\D/g, "");
        if (input.length > 10) input = input.slice(0, 10);
        setUserData({ ...userData, phoneNumber: input });
      }}
      className="form-control"
      inputMode="numeric"
      maxLength={10}
      placeholder="Phone number"
    />
  </div>

  {errors.phoneNumber && (
    <div className="text-danger small">{errors.phoneNumber}</div>
  )}
</div>


              <div className="col-md-6">
                <label className="form-label">Status</label>
                <select
                  className="form-select"
                  name="Status"
                  required
                  value={formData.Status}
                  onChange={handleChange}
                >
                  <option value="">Select Status</option> {/* empty option for forcing selection */}
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </select>
                {errors.Status && <div className="text-danger small">{errors.Status}</div>}
              </div>

              <div className='col-md-12 row'>
                <h5 className="mb-3 mt-4">Contact Persons</h5>

                {contactPersons.map((contact, index) => (
                  <div className="border p-3 mb-3" key={index}>
                    <div className="row">
                      <div className="col-md-6">
                        <label className="form-label">Contact Name</label>
                        <input
                          type="text"
                          name="contactName"
                          required
                          value={contact.contactName}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Contact Name"
                        />
                        {errors[`contactName_${index}`] && <div className="text-danger small">{errors[`contactName_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Job Title</label>
                        <input
                          type="text"
                          name="jobTitle"
                          required
                          value={contact.jobTitle}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Job Title"
                        />
                        {errors[`jobTitle_${index}`] && <div className="text-danger small">{errors[`jobTitle_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Email</label>
                        <input
                          type="email"
                          name="email"
                          required
                          value={contact.email}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Email"
                        />
                        {errors[`email_${index}`] && <div className="text-danger small">{errors[`email_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Phone</label>
                        <input
                          type="tel"
                          name="phone"
                          required
                          value={contact.phone}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Phone"
                          maxLength={10}
                        />
                        {errors[`phone_${index}`] && <div className="text-danger small">{errors[`phone_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Department</label>
                        <input
                          type="text"
                          name="department"
                          required
                          value={contact.department}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Department"
                        />
                        {errors[`department_${index}`] && <div className="text-danger small">{errors[`department_${index}`]}</div>}
                      </div>

                      <div className="col-md-6">
                        <label className="form-label">Sales Representative</label>
                        <input
                          type="text"
                          name="salesRepresentative"
                          required
                          value={contact.salesRepresentative}
                          onChange={(e) => handleContactChange(index, e)}
                          className="form-control"
                          placeholder="Enter Sales Representative"
                        />
                        {errors[`salesRepresentative_${index}`] && <div className="text-danger small">{errors[`salesRepresentative_${index}`]}</div>}
                      </div>

                      <div className="col-md-12 mt-2 d-flex justify-content-end">
                        {contactPersons.length > 1 && (
                          <button
                            type="button"
                            className="btn btn-danger btn-sm"
                            onClick={() => {
                              const updatedContacts = [...contactPersons];
                              updatedContacts.splice(index, 1);
                              setContactPersons(updatedContacts);
                            }}
                          >
                            Remove
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Add More Button */}
                <div className="mb-3">
                  <button
                    type="button"
                    className="btn btn-primary"
                    onClick={() => {
                      setContactPersons([
                        ...contactPersons,
                        {
                          contactName: '',
                          jobTitle: '',
                          email: '',
                          phone: '',
                          department: '',
                          salesRepresentative: ''
                        }
                      ]);
                    }}
                  >
                    + Add Another Contact
                  </button>
                </div>
              </div>

              {/* Billing Information */}
              <div className='col-md-12 row'>
                {/* <h5 className="mb-3 mt-4">Billing Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Billing Address</label>
                  <textarea className="form-control" rows="3" name="billingAddress" value={billingInformation[0].billingAddress} onChange={(e) => handleBillingChange(0, e)}></textarea>
                  {errors.billingAddress && <div className="text-danger small">{errors.billingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Contact Name</label>
                  <input type="text" className="form-control" name="billingContactName" value={billingInformation[0].billingContactName} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingContactName && <div className="text-danger small">{errors.billingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Email</label>
                  <input type="email" className="form-control" name="billingEmail" value={billingInformation[0].billingEmail} onChange={(e) => handleBillingChange(0, e)} />
                  {errors.billingEmail && <div className="text-danger small">{errors.billingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Billing Phone</label>
                  <input type="tel" className="form-control" name="billingPhone" value={billingInformation[0].billingPhone} onChange={(e) => handleBillingChange(0, e)} maxLength={10} />
                  {errors.billingPhone && <div className="text-danger small">{errors.billingPhone}</div>}
                </div> */}

                {/* <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <select className="form-select" name="currency" required value={billingInformation[0].currency} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Currency</option>
                    <option value="USD">USD</option>
                    <option value="EUR">EUR</option>
                    <option value="GBP">GBP</option>
                  </select>
                  {errors.currency && <div className="text-danger small">{errors.currency}</div>}
                </div> */}
                {/* <div className="col-md-6">
                  <label className="form-label">Currency</label>
                  <CreatableSelect
                    options={selectOptions.currency}
                    value={selectOptions.currency.find((opt) => opt.value === formData.currency)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, currency: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('currency')}
                    isClearable

                  />
                </div> */}

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <select className="form-select" name="preferredPaymentMethod" required value={billingInformation[0].preferredPaymentMethod} onChange={(e) => handleBillingChange(0, e)}>
                    <option value="">Select Payment Method</option>
                    <option value="BankTransfer">BankTransfer</option>
                    <option value="CreditCard">CreditCard</option>
                    <option value="Check">Check</option>
                  </select>
                  {errors.preferredPaymentMethod && <div className="text-danger small">{errors.preferredPaymentMethod}</div>}
                </div> */}

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Payment Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredPaymentMethod}
                    value={selectOptions.preferredPaymentMethod.find((opt) => opt.value === formData.preferredPaymentMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredPaymentMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredPaymentMethod')}
                    isClearable
                  />
                </div> */}

                {/* Shipping Information */}
                {/* <h5 className="mb-3 mt-4">Shipping Information</h5>
                <div className="col-md-12">
                  <label className="form-label">Shipping Address</label>
                  <textarea className="form-control" rows="3" name="shippingAddress" value={shippingInformation[0].shippingAddress} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.shippingAddress && <div className="text-danger small">{errors.shippingAddress}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Contact Name</label>
                  <input type="text" className="form-control" name="shippingContactName" value={shippingInformation[0].shippingContactName} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingContactName && <div className="text-danger small">{errors.shippingContactName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Email</label>
                  <input type="email" className="form-control" name="shippingEmail" value={shippingInformation[0].shippingEmail} onChange={(e) => handleShippingChange(0, e)} />
                  {errors.shippingEmail && <div className="text-danger small">{errors.shippingEmail}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Shipping Phone</label>
                  <input type="tel" className="form-control" name="shippingPhone" value={shippingInformation[0].shippingPhone} onChange={(e) => handleShippingChange(0, e)} maxLength={10} />
                  {errors.shippingPhone && <div className="text-danger small">{errors.shippingPhone}</div>}
                </div> */}

                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <select className="form-select" name="preferredShippingMethod" required value={shippingInformation[0].preferredShippingMethod} onChange={(e) => handleShippingChange(0, e)}>
                    <option value="">Select Shipping Method</option>
                    <option value="ground">Ground</option>
                    <option value="standard">Standard</option>
                    <option value="express">Express</option>
                    <option value="overnight">Overnight</option>
                  </select>
                  {errors.preferredShippingMethod && <div className="text-danger small">{errors.preferredShippingMethod}</div>}
                </div> */}
                {/* <div className="col-md-6">
                  <label className="form-label">Preferred Shipping Method</label>
                  <CreatableSelect
                    options={selectOptions.preferredShippingMethod}
                    value={selectOptions.preferredShippingMethod.find((opt) => opt.value === formData.preferredShippingMethod)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, preferredShippingMethod: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('preferredShippingMethod')}
                    isClearable

                  />
                </div>


                <div className="col-md-12">
                  <label className="form-label">Special Instructions</label>
                  <textarea className="form-control" rows="3" name="specialInstructions" value={shippingInformation[0].specialInstructions} onChange={(e) => handleShippingChange(0, e)}></textarea>
                  {errors.specialInstructions && <div className="text-danger small">{errors.specialInstructions}</div>}
                </div> */}

                {/* Financial Information */}
                {/* <h5 className="mb-3 mt-4">Financial Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Annual Revenue</label>
                  <input type="number" className="form-control" name="annualRevenue" value={financialInformation[0].annualRevenue} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.annualRevenue && <div className="text-danger small">{errors.annualRevenue}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Credit Rating</label>
                  <input type="number" className="form-control" name="creditRating" value={financialInformation[0].creditRating} onChange={(e) => handleFinancialChange(0, e)} min={1} max={5} />
                  {errors.creditRating && <div className="text-danger small">{errors.creditRating}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Bank Name</label>
                  <input type="text" className="form-control" name="bankName" value={financialInformation[0].bankName} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.bankName && <div className="text-danger small">{errors.bankName}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Account Number</label>
                  <input type="text" className="form-control" name="accountNumber" value={financialInformation[0].accountNumber} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.accountNumber && <div className="text-danger small">{errors.accountNumber}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Fiscal Year End</label>
                  <input type="date" className="form-control" name="fiscalYearEnd" value={financialInformation[0].fiscalYearEnd} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.fiscalYearEnd && <div className="text-danger small">{errors.fiscalYearEnd}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Financial Contact</label>
                  <input type="text" className="form-control" name="financialContact" value={financialInformation[0].financialContact} onChange={(e) => handleFinancialChange(0, e)} />
                  {errors.financialContact && <div className="text-danger small">{errors.financialContact}</div>}
                </div> */}

                {/* Ledger Information */}
                {/* <h5 className="mb-3 mt-4">Ledger Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Account Code</label>
                  <input type="text" className="form-control" name="accountCode" value={ledgerInformation[0].accountCode} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.accountCode && <div className="text-danger small">{errors.accountCode}</div>}
                </div> */}

                {/* <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <select className="form-select" name="accountType" required value={ledgerInformation[0].accountType} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="">Select Account Type</option>
                    <option value="AccountsReceivable">AccountsReceivable</option>
                    <option value="AccountsPayable">AccountsPayable</option>
                  </select>
                  {errors.accountType && <div className="text-danger small">{errors.accountType}</div>}
                </div> */}

                {/* <div className="col-md-6">
                  <label className="form-label">Account Type</label>
                  <CreatableSelect
                    options={selectOptions.accountType}
                    value={selectOptions.accountType.find((opt) => opt.value === formData.accountType)}
                    onChange={(option) =>
                      setFormData((prev) => ({ ...prev, accountType: option?.value || "" }))
                    }
                    onCreateOption={handleCreateOption('accountType')}
                    isClearable

                  />
                </div>

                <div className="col-md-6">
                  <label className="form-label">Opening Balance</label>
                  <input type="number" className="form-control" name="openingBalance" value={ledgerInformation[0].openingBalance} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.openingBalance && <div className="text-danger small">{errors.openingBalance}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Balance Date</label>
                  <input type="date" className="form-control" name="balanceDate" value={ledgerInformation[0].balanceDate} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.balanceDate && <div className="text-danger small">{errors.balanceDate}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Tax Category</label>
                  <select className="form-select" name="taxCategory" value={ledgerInformation[0].taxCategory} onChange={(e) => handleLedgerChange(0, e)}>
                    <option value="standard">Standard Rate</option>
                    <option value="reduced">Reduced Rate</option>
                    <option value="zero">Zero Rate</option>
                  </select>
                  {errors.taxCategory && <div className="text-danger small">{errors.taxCategory}</div>}
                </div>
                <div className="col-md-6">
                  <label className="form-label">Cost Center</label>
                  <input type="text" className="form-control" name="costCenter" value={ledgerInformation[0].costCenter} onChange={(e) => handleLedgerChange(0, e)} />
                  {errors.costCenter && <div className="text-danger small">{errors.costCenter}</div>}
                </div> */}

                {/* Additional Information */}
                <h5 className="mb-3 mt-4">Additional Information</h5>
                <div className="col-md-6">
                  <label className="form-label">Payment Terms</label>
                  <select
                    className="form-select"
                    name="paymentTerms"
                    value={additionalInformation.paymentTerms}
                    onChange={handleAdditionalChange}
                  >
                    <option value="">Select Payment Terms</option>  {/* <-- placeholder */}
                    <option value="net30">Net 30</option>
                    <option value="net60">Net 60</option>
                    <option value="net90">Net 90</option>
                  </select>
                  {errors.paymentTerms && <div className="text-danger small">{errors.paymentTerms}</div>}
                </div>

                <div className="col-md-6">
                  <label className="form-label">Credit Limit</label>
                  <input type="number" className="form-control" name="creditLimit" value={additionalInformation.creditLimit} onChange={handleAdditionalChange} />
                  {errors.creditLimit && <div className="text-danger small">{errors.creditLimit}</div>}
                </div>
              </div>
              <div className="col-md-12">
                <label className="form-label">Notes</label>
                <textarea className="form-control" rows="3" name="notes" value={additionalInformation.notes} onChange={handleAdditionalChange} placeholder="Additional notes"></textarea>
                {errors.notes && <div className="text-danger small">{errors.notes}</div>}
              </div>



              {/* Your form fields go here */}

              <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>

                {!(id || client?._id) ? (
                  <>
                    <button
                      type="submit"
                      className={`btn ${formData.button_Client_Suplier === 'Client' ? 'btn-primary' : 'btn-outline-primary'}`}
                      onClick={() => setFormData({ ...formData, button_Client_Suplier: 'Client' })}
                    >
                      Client
                    </button>

                    <button
                      type="submit"
                      className={`btn ${formData.button_Client_Suplier === 'Supplier' ? 'btn-primary' : 'btn-outline-primary'}`}
                      onClick={() => setFormData({ ...formData, button_Client_Suplier: 'Supplier' })}
                    >
                      Supplier
                    </button>
                  </>
                ) : (
                  <button id="btn-All" type="submit" className="btn btn-primary">
                    Update Client
                  </button>
                )}
              </div>




              {/* <div className="col-12 d-flex justify-content-end gap-2 mt-4">
                <button type="button" className="btn btn-outline-secondary">Cancel</button>
                {!(id || client?._id) ? (
                  <>
                    <button type="submit" id="btn-All" className="btn btn-dark">Create Client</button>
                    <button type="submit" id="btn-All" className="btn btn-dark">Create Supplier</button>
                  </>
                ) : (
                  <button type="submit" id="btn-All" className="btn btn-dark">Update Client</button>
                )}
              </div> */}
            </form>
          </div>
        </div>
      </div>
    </>
  );
}

export default AddClientManagement;